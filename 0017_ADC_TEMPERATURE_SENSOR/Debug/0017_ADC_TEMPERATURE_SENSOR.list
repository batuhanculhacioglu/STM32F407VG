
0017_ADC_TEMPERATURE_SENSOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005388  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005518  08005518  00015518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080057a0  080057a0  000157a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080057ac  080057ac  000157ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000000  080057b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
  8 .bss          000000d0  200001fc  200001fc  000201fc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200002cc  200002cc  000201fc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009909  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001848  00000000  00000000  00029b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000870  00000000  00000000  0002b380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007d8  00000000  00000000  0002bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003b67  00000000  00000000  0002c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002df9  00000000  00000000  0002ff2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00032d28  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002bf0  00000000  00000000  00032da4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005500 	.word	0x08005500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08005500 	.word	0x08005500

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <uprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uprintf(char*data)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t *)data, strlen(data), 100);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff f989 	bl	80001d0 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	2364      	movs	r3, #100	; 0x64
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <uprintf+0x24>)
 8000ec8:	f001 ffd3 	bl	8002e72 <HAL_UART_Transmit>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000234 	.word	0x20000234

08000ed8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
	sprintf(data,"\n\r Sicaklik = %f",Temperature);
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x40>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fb2e 	bl	8000548 <__aeabi_f2d>
 8000eec:	4603      	mov	r3, r0
 8000eee:	460c      	mov	r4, r1
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4623      	mov	r3, r4
 8000ef4:	4909      	ldr	r1, [pc, #36]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x44>)
 8000ef6:	480a      	ldr	r0, [pc, #40]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000ef8:	f002 ff0e 	bl	8003d18 <siprintf>
	uprintf(data);
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000efe:	f7ff ffd7 	bl	8000eb0 <uprintf>
	Temperature = 0;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f04:	f04f 0200 	mov.w	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f0c:	f000 fbce 	bl	80016ac <HAL_ADC_Start_IT>
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd90      	pop	{r4, r7, pc}
 8000f18:	20000220 	.word	0x20000220
 8000f1c:	08005518 	.word	0x08005518
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000278 	.word	0x20000278

08000f28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

		adc1_value[count] = HAL_ADC_GetValue(&hadc1);
 8000f30:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f32:	681c      	ldr	r4, [r3, #0]
 8000f34:	4829      	ldr	r0, [pc, #164]	; (8000fdc <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f36:	f000 fdd8 	bl	8001aea <HAL_ADC_GetValue>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f40:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		count++;
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f4c:	6013      	str	r3, [r2, #0]
		/*
		 * count = 0 => Vrefint channel
		 * count = 1 => Temperature channel
		 */

		if (count==2)
 8000f4e:	4b22      	ldr	r3, [pc, #136]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d102      	bne.n	8000f5c <HAL_ADC_ConvCpltCallback+0x34>
		{
			count = 0;
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
		}

		Vdda = (float) 3.3 * (*VREFIN_CAL) / adc1_value[0];
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f68:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000fe8 <HAL_ADC_ConvCpltCallback+0xc0>
 8000f6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_ADC_ConvCpltCallback+0xc4>)
 8000f82:	edc3 7a00 	vstr	s15, [r3]
		Vsense = Vdda * adc1_value[1] / 4095;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f88:	885b      	ldrh	r3, [r3, #2]
 8000f8a:	ee07 3a90 	vmov	s15, r3
 8000f8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_ADC_ConvCpltCallback+0xc4>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000ff0 <HAL_ADC_ConvCpltCallback+0xc8>
 8000fa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000fa6:	edc3 7a00 	vstr	s15, [r3]

		Temperature = ((Vsense - V25) / Avg_slope) + 25;
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_ADC_ConvCpltCallback+0xcc>)
 8000fac:	edd3 7a00 	vldr	s15, [r3]
 8000fb0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000ff8 <HAL_ADC_ConvCpltCallback+0xd0>
 8000fb4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000fb8:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000ffc <HAL_ADC_ConvCpltCallback+0xd4>
 8000fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fc8:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <HAL_ADC_ConvCpltCallback+0xd8>)
 8000fca:	edc3 7a00 	vstr	s15, [r3]


}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd90      	pop	{r4, r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000224 	.word	0x20000224
 8000fdc:	20000278 	.word	0x20000278
 8000fe0:	200002c0 	.word	0x200002c0
 8000fe4:	1fff7a2a 	.word	0x1fff7a2a
 8000fe8:	40533333 	.word	0x40533333
 8000fec:	2000021c 	.word	0x2000021c
 8000ff0:	457ff000 	.word	0x457ff000
 8000ff4:	20000218 	.word	0x20000218
 8000ff8:	3f428f5c 	.word	0x3f428f5c
 8000ffc:	3b23d70a 	.word	0x3b23d70a
 8001000:	20000220 	.word	0x20000220

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f000 fa9a 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f80c 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f000 f8fe 	bl	8001210 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001014:	f000 f872 	bl	80010fc <MX_ADC1_Init>
  MX_UART5_Init();
 8001018:	f000 f8d0 	bl	80011bc <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	  HAL_ADC_Start_IT(&hadc1);
 800101c:	4801      	ldr	r0, [pc, #4]	; (8001024 <main+0x20>)
 800101e:	f000 fb45 	bl	80016ac <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001022:	e7fe      	b.n	8001022 <main+0x1e>
 8001024:	20000278 	.word	0x20000278

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f002 f9fa 	bl	8003430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <SystemClock_Config+0xcc>)
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <SystemClock_Config+0xcc>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <SystemClock_Config+0xcc>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <SystemClock_Config+0xd0>)
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <SystemClock_Config+0xd0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <SystemClock_Config+0xd0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001098:	2304      	movs	r3, #4
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800109c:	23a8      	movs	r3, #168	; 0xa8
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fa29 	bl	8002504 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b8:	f000 f90c 	bl	80012d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c0:	2302      	movs	r3, #2
 80010c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2105      	movs	r1, #5
 80010da:	4618      	mov	r0, r3
 80010dc:	f001 fc8a 	bl	80029f4 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010e6:	f000 f8f5 	bl	80012d4 <Error_Handler>
  }
}
 80010ea:	bf00      	nop
 80010ec:	3750      	adds	r7, #80	; 0x50
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40007000 	.word	0x40007000

080010fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001102:	463b      	mov	r3, r7
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800110e:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001110:	4a28      	ldr	r2, [pc, #160]	; (80011b4 <MX_ADC1_Init+0xb8>)
 8001112:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001116:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_ADC1_Init+0xb4>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001122:	4b23      	ldr	r3, [pc, #140]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001124:	2201      	movs	r2, #1
 8001126:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001128:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <MX_ADC1_Init+0xb4>)
 800112a:	2201      	movs	r2, #1
 800112c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800112e:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001136:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001138:	2200      	movs	r2, #0
 800113a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800113c:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <MX_ADC1_Init+0xb4>)
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <MX_ADC1_Init+0xbc>)
 8001140:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001142:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001144:	2200      	movs	r2, #0
 8001146:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001148:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <MX_ADC1_Init+0xb4>)
 800114a:	2202      	movs	r2, #2
 800114c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001156:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_ADC1_Init+0xb4>)
 8001158:	2201      	movs	r2, #1
 800115a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115c:	4814      	ldr	r0, [pc, #80]	; (80011b0 <MX_ADC1_Init+0xb4>)
 800115e:	f000 fa61 	bl	8001624 <HAL_ADC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001168:	f000 f8b4 	bl	80012d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800116c:	2311      	movs	r3, #17
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001174:	2303      	movs	r3, #3
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	; (80011b0 <MX_ADC1_Init+0xb4>)
 800117e:	f000 fcd5 	bl	8001b2c <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001188:	f000 f8a4 	bl	80012d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800118c:	2310      	movs	r3, #16
 800118e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001194:	463b      	mov	r3, r7
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_ADC1_Init+0xb4>)
 800119a:	f000 fcc7 	bl	8001b2c <HAL_ADC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011a4:	f000 f896 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000278 	.word	0x20000278
 80011b4:	40012000 	.word	0x40012000
 80011b8:	0f000001 	.word	0x0f000001

080011bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_UART5_Init+0x4c>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_UART5_Init+0x50>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_UART5_Init+0x4c>)
 80011c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_UART5_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_UART5_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_UART5_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_UART5_Init+0x4c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_UART5_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_UART5_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_UART5_Init+0x4c>)
 80011f4:	f001 fdf0 	bl	8002dd8 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80011fe:	f000 f869 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000234 	.word	0x20000234
 800120c:	40005000 	.word	0x40005000

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4a27      	ldr	r2, [pc, #156]	; (80012c8 <MX_GPIO_Init+0xb8>)
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <MX_GPIO_Init+0xb8>)
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b24      	ldr	r3, [pc, #144]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4a20      	ldr	r2, [pc, #128]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <MX_GPIO_Init+0xb8>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_GPIO_Init+0xb8>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_GPIO_Init+0xb8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001296:	2301      	movs	r3, #1
 8001298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_GPIO_Init+0xbc>)
 800129c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	4619      	mov	r1, r3
 80012a8:	4809      	ldr	r0, [pc, #36]	; (80012d0 <MX_GPIO_Init+0xc0>)
 80012aa:	f000 ff79 	bl	80021a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2006      	movs	r0, #6
 80012b4:	f000 ff3d 	bl	8002132 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012b8:	2006      	movs	r0, #6
 80012ba:	f000 ff56 	bl	800216a <HAL_NVIC_EnableIRQ>

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	10110000 	.word	0x10110000
 80012d0:	40020000 	.word	0x40020000

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012da:	e7fe      	b.n	80012da <Error_Handler+0x6>

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4a10      	ldr	r2, [pc, #64]	; (8001328 <HAL_MspInit+0x4c>)
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <HAL_MspInit+0x4c>)
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	603b      	str	r3, [r7, #0]
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_MspInit+0x4c>)
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_MspInit+0x4c>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <HAL_ADC_MspInit+0x48>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d115      	bne.n	800136a <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <HAL_ADC_MspInit+0x4c>)
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_ADC_MspInit+0x4c>)
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_ADC_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	2012      	movs	r0, #18
 8001360:	f000 fee7 	bl	8002132 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001364:	2012      	movs	r0, #18
 8001366:	f000 ff00 	bl	800216a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40012000 	.word	0x40012000
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a28      	ldr	r2, [pc, #160]	; (800143c <HAL_UART_MspInit+0xc0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d14a      	bne.n	8001434 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013a4:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4a20      	ldr	r2, [pc, #128]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <HAL_UART_MspInit+0xc4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001404:	2308      	movs	r3, #8
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4619      	mov	r1, r3
 800140e:	480d      	ldr	r0, [pc, #52]	; (8001444 <HAL_UART_MspInit+0xc8>)
 8001410:	f000 fec6 	bl	80021a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001414:	2304      	movs	r3, #4
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001424:	2308      	movs	r3, #8
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <HAL_UART_MspInit+0xcc>)
 8001430:	f000 feb6 	bl	80021a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40005000 	.word	0x40005000
 8001440:	40023800 	.word	0x40023800
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00

0800144c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <NMI_Handler+0x4>

08001452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <MemManage_Handler+0x4>

0800145e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001462:	e7fe      	b.n	8001462 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	e7fe      	b.n	8001468 <UsageFault_Handler+0x4>

0800146a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001498:	f000 f8a4 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 f815 	bl	80024d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <ADC_IRQHandler+0x10>)
 80014b6:	f000 f9d7 	bl	8001868 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000278 	.word	0x20000278

080014c4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x50>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_sbrk+0x16>
		heap_end = &end;
 80014d4:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <_sbrk+0x50>)
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <_sbrk+0x54>)
 80014d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <_sbrk+0x50>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <_sbrk+0x50>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	466a      	mov	r2, sp
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d907      	bls.n	80014fe <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80014ee:	f001 ff75 	bl	80033dc <__errno>
 80014f2:	4602      	mov	r2, r0
 80014f4:	230c      	movs	r3, #12
 80014f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	e006      	b.n	800150c <_sbrk+0x48>
	}

	heap_end += incr;
 80014fe:	4b05      	ldr	r3, [pc, #20]	; (8001514 <_sbrk+0x50>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	4a03      	ldr	r2, [pc, #12]	; (8001514 <_sbrk+0x50>)
 8001508:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000228 	.word	0x20000228
 8001518:	200002cc 	.word	0x200002cc

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4a06      	ldr	r2, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001544:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fdd7 	bl	800211c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff feb2 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fdef 	bl	8002186 <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 fdb7 	bl	8002132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000020 	.word	0x20000020
 80015dc:	20000028 	.word	0x20000028
 80015e0:	20000024 	.word	0x20000024

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000028 	.word	0x20000028
 8001608:	200002c4 	.word	0x200002c4

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200002c4 	.word	0x200002c4

08001624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e033      	b.n	80016a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fe72 	bl	800132c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166a:	f023 0302 	bic.w	r3, r3, #2
 800166e:	f043 0202 	orr.w	r2, r3, #2
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fb7c 	bl	8001d74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
 8001692:	e001      	b.n	8001698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ADC_Start_IT+0x1a>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e0bd      	b.n	8001842 <HAL_ADC_Start_IT+0x196>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d018      	beq.n	800170e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	6892      	ldr	r2, [r2, #8]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_ADC_Start_IT+0x1a4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a58      	ldr	r2, [pc, #352]	; (8001854 <HAL_ADC_Start_IT+0x1a8>)
 80016f2:	fba2 2303 	umull	r2, r3, r2, r3
 80016f6:	0c9a      	lsrs	r2, r3, #18
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	3b01      	subs	r3, #1
 8001706:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b01      	cmp	r3, #1
 800171a:	f040 8085 	bne.w	8001828 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001748:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800175c:	d106      	bne.n	800176c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f023 0206 	bic.w	r2, r3, #6
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
 800176a:	e002      	b.n	8001772 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_ADC_Start_IT+0x1ac>)
 800177c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001786:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001796:	f043 0320 	orr.w	r3, r3, #32
 800179a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12a      	bne.n	80017fe <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2b      	ldr	r2, [pc, #172]	; (800185c <HAL_ADC_Start_IT+0x1b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d015      	beq.n	80017de <HAL_ADC_Start_IT+0x132>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_ADC_Start_IT+0x1b4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d105      	bne.n	80017c8 <HAL_ADC_Start_IT+0x11c>
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <HAL_ADC_Start_IT+0x1ac>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <HAL_ADC_Start_IT+0x1b8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d136      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
 80017d2:	4b21      	ldr	r3, [pc, #132]	; (8001858 <HAL_ADC_Start_IT+0x1ac>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	d830      	bhi.n	8001840 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d129      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	6892      	ldr	r2, [r2, #8]
 80017f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e020      	b.n	8001840 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a16      	ldr	r2, [pc, #88]	; (800185c <HAL_ADC_Start_IT+0x1b0>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d11b      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d114      	bne.n	8001840 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	6892      	ldr	r2, [r2, #8]
 8001820:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	e00b      	b.n	8001840 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f043 0210 	orr.w	r2, r3, #16
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000020 	.word	0x20000020
 8001854:	431bde83 	.word	0x431bde83
 8001858:	40012300 	.word	0x40012300
 800185c:	40012000 	.word	0x40012000
 8001860:	40012100 	.word	0x40012100
 8001864:	40012200 	.word	0x40012200

08001868 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	bf0c      	ite	eq
 8001886:	2301      	moveq	r3, #1
 8001888:	2300      	movne	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0320 	and.w	r3, r3, #32
 8001898:	2b20      	cmp	r3, #32
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d049      	beq.n	800193e <HAL_ADC_IRQHandler+0xd6>
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d046      	beq.n	800193e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d12b      	bne.n	800192e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d127      	bne.n	800192e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d119      	bne.n	800192e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	6852      	ldr	r2, [r2, #4]
 8001904:	f022 0220 	bic.w	r2, r2, #32
 8001908:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d105      	bne.n	800192e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f043 0201 	orr.w	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff fafa 	bl	8000f28 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0212 	mvn.w	r2, #18
 800193c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b04      	cmp	r3, #4
 800194a:	bf0c      	ite	eq
 800194c:	2301      	moveq	r3, #1
 800194e:	2300      	movne	r3, #0
 8001950:	b2db      	uxtb	r3, r3
 8001952:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195e:	2b80      	cmp	r3, #128	; 0x80
 8001960:	bf0c      	ite	eq
 8001962:	2301      	moveq	r3, #1
 8001964:	2300      	movne	r3, #0
 8001966:	b2db      	uxtb	r3, r3
 8001968:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d057      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x1b8>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d054      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b00      	cmp	r3, #0
 8001980:	d105      	bne.n	800198e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d139      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d12b      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d124      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d11d      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d119      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	6852      	ldr	r2, [r2, #4]
 80019e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d105      	bne.n	8001a10 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 faab 	bl	8001f6c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 020c 	mvn.w	r2, #12
 8001a1e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	bf0c      	ite	eq
 8001a2e:	2301      	moveq	r3, #1
 8001a30:	2300      	movne	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b40      	cmp	r3, #64	; 0x40
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d017      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x21a>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d014      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d10d      	bne.n	8001a82 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f846 	bl	8001b04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f06f 0201 	mvn.w	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0320 	and.w	r3, r3, #32
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d015      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x27a>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d012      	beq.n	8001ae2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	f043 0202 	orr.w	r2, r3, #2
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0220 	mvn.w	r2, #32
 8001ad0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 f820 	bl	8001b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0220 	mvn.w	r2, #32
 8001ae0:	601a      	str	r2, [r3, #0]
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b2c:	b490      	push	{r4, r7}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1c>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e107      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x22c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b09      	cmp	r3, #9
 8001b56:	d926      	bls.n	8001ba6 <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68d9      	ldr	r1, [r3, #12]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4403      	add	r3, r0
 8001b70:	3b1e      	subs	r3, #30
 8001b72:	2007      	movs	r0, #7
 8001b74:	fa00 f303 	lsl.w	r3, r0, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	400b      	ands	r3, r1
 8001b7c:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	6898      	ldr	r0, [r3, #8]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	461c      	mov	r4, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4423      	add	r3, r4
 8001b9a:	3b1e      	subs	r3, #30
 8001b9c:	fa00 f303 	lsl.w	r3, r0, r3
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	60d3      	str	r3, [r2, #12]
 8001ba4:	e023      	b.n	8001bee <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6919      	ldr	r1, [r3, #16]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4603      	mov	r3, r0
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4403      	add	r3, r0
 8001bbe:	2007      	movs	r0, #7
 8001bc0:	fa00 f303 	lsl.w	r3, r0, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6919      	ldr	r1, [r3, #16]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6898      	ldr	r0, [r3, #8]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	461c      	mov	r4, r3
 8001be0:	4623      	mov	r3, r4
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4423      	add	r3, r4
 8001be6:	fa00 f303 	lsl.w	r3, r0, r3
 8001bea:	430b      	orrs	r3, r1
 8001bec:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b06      	cmp	r3, #6
 8001bf4:	d824      	bhi.n	8001c40 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b05      	subs	r3, #5
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	4003      	ands	r3, r0
 8001c16:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6819      	ldr	r1, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	461c      	mov	r4, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b05      	subs	r3, #5
 8001c36:	fa04 f303 	lsl.w	r3, r4, r3
 8001c3a:	4303      	orrs	r3, r0
 8001c3c:	634b      	str	r3, [r1, #52]	; 0x34
 8001c3e:	e04c      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	d824      	bhi.n	8001c92 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6819      	ldr	r1, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b23      	subs	r3, #35	; 0x23
 8001c5e:	221f      	movs	r2, #31
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	4003      	ands	r3, r0
 8001c68:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461c      	mov	r4, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b23      	subs	r3, #35	; 0x23
 8001c88:	fa04 f303 	lsl.w	r3, r4, r3
 8001c8c:	4303      	orrs	r3, r0
 8001c8e:	630b      	str	r3, [r1, #48]	; 0x30
 8001c90:	e023      	b.n	8001cda <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6819      	ldr	r1, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b41      	subs	r3, #65	; 0x41
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4003      	ands	r3, r0
 8001cb2:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6819      	ldr	r1, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b41      	subs	r3, #65	; 0x41
 8001cd2:	fa04 f303 	lsl.w	r3, r4, r3
 8001cd6:	4303      	orrs	r3, r0
 8001cd8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cda:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_ADC_ConfigChannel+0x238>)
 8001cdc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_ADC_ConfigChannel+0x23c>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d109      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b12      	cmp	r3, #18
 8001cee:	d105      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1d0>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_ADC_ConfigChannel+0x23c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d123      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x222>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d003      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x1ea>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b11      	cmp	r3, #17
 8001d14:	d11b      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x222>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d111      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x222>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_ADC_ConfigChannel+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_ADC_ConfigChannel+0x244>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9a      	lsrs	r2, r3, #18
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d40:	e002      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x21c>
      {
        counter--;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f9      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x216>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc90      	pop	{r4, r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40012300 	.word	0x40012300
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	20000020 	.word	0x20000020
 8001d70:	431bde83 	.word	0x431bde83

08001d74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d7c:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <ADC_Init+0x1f0>)
 8001d7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	431a      	orrs	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	6852      	ldr	r2, [r2, #4]
 8001da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6812      	ldr	r2, [r2, #0]
 8001db2:	6851      	ldr	r1, [r2, #4]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6912      	ldr	r2, [r2, #16]
 8001db8:	0212      	lsls	r2, r2, #8
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	6852      	ldr	r2, [r2, #4]
 8001dc8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	6851      	ldr	r1, [r2, #4]
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6892      	ldr	r2, [r2, #8]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	6892      	ldr	r2, [r2, #8]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	6891      	ldr	r1, [r2, #8]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68d2      	ldr	r2, [r2, #12]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e06:	4a58      	ldr	r2, [pc, #352]	; (8001f68 <ADC_Init+0x1f4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d022      	beq.n	8001e52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	6892      	ldr	r2, [r2, #8]
 8001e16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	6891      	ldr	r1, [r2, #8]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	6892      	ldr	r2, [r2, #8]
 8001e38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6812      	ldr	r2, [r2, #0]
 8001e46:	6891      	ldr	r1, [r2, #8]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	e00f      	b.n	8001e72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	6892      	ldr	r2, [r2, #8]
 8001e5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	6892      	ldr	r2, [r2, #8]
 8001e6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	6892      	ldr	r2, [r2, #8]
 8001e7c:	f022 0202 	bic.w	r2, r2, #2
 8001e80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	6891      	ldr	r1, [r2, #8]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	7e12      	ldrb	r2, [r2, #24]
 8001e90:	0052      	lsls	r2, r2, #1
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d01b      	beq.n	8001ed8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	6852      	ldr	r2, [r2, #4]
 8001eaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	6852      	ldr	r2, [r2, #4]
 8001eba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ebe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	6851      	ldr	r1, [r2, #4]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ece:	3a01      	subs	r2, #1
 8001ed0:	0352      	lsls	r2, r2, #13
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	e007      	b.n	8001ee8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	6852      	ldr	r2, [r2, #4]
 8001ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001ef2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	69d2      	ldr	r2, [r2, #28]
 8001f06:	3a01      	subs	r2, #1
 8001f08:	0512      	lsls	r2, r2, #20
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	6892      	ldr	r2, [r2, #8]
 8001f18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	6891      	ldr	r1, [r2, #8]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001f2e:	0252      	lsls	r2, r2, #9
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	6892      	ldr	r2, [r2, #8]
 8001f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	6891      	ldr	r1, [r2, #8]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6952      	ldr	r2, [r2, #20]
 8001f52:	0292      	lsls	r2, r2, #10
 8001f54:	430a      	orrs	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40012300 	.word	0x40012300
 8001f68:	0f000001 	.word	0x0f000001

08001f6c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	db0b      	blt.n	800200e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff6:	4909      	ldr	r1, [pc, #36]	; (800201c <__NVIC_EnableIRQ+0x38>)
 8001ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	79fa      	ldrb	r2, [r7, #7]
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2001      	movs	r0, #1
 8002006:	fa00 f202 	lsl.w	r2, r0, r2
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000e100 	.word	0xe000e100

08002020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	2b00      	cmp	r3, #0
 8002032:	db0a      	blt.n	800204a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002034:	490d      	ldr	r1, [pc, #52]	; (800206c <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	b2d2      	uxtb	r2, r2
 8002042:	440b      	add	r3, r1
 8002044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002048:	e00a      	b.n	8002060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204a:	4909      	ldr	r1, [pc, #36]	; (8002070 <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	0112      	lsls	r2, r2, #4
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	440b      	add	r3, r1
 800205e:	761a      	strb	r2, [r3, #24]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000e100 	.word	0xe000e100
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002074:	b480      	push	{r7}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f1c3 0307 	rsb	r3, r3, #7
 800208e:	2b04      	cmp	r3, #4
 8002090:	bf28      	it	cs
 8002092:	2304      	movcs	r3, #4
 8002094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3304      	adds	r3, #4
 800209a:	2b06      	cmp	r3, #6
 800209c:	d902      	bls.n	80020a4 <NVIC_EncodePriority+0x30>
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3b03      	subs	r3, #3
 80020a2:	e000      	b.n	80020a6 <NVIC_EncodePriority+0x32>
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	2201      	movs	r2, #1
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	401a      	ands	r2, r3
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ba:	2101      	movs	r1, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	1e59      	subs	r1, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e8:	d301      	bcc.n	80020ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00f      	b.n	800210e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ee:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <SysTick_Config+0x40>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f6:	210f      	movs	r1, #15
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f7ff ff90 	bl	8002020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <SysTick_Config+0x40>)
 8002102:	2200      	movs	r2, #0
 8002104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <SysTick_Config+0x40>)
 8002108:	2207      	movs	r2, #7
 800210a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	e000e010 	.word	0xe000e010

0800211c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff ff2b 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002144:	f7ff ff40 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 8002148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	6978      	ldr	r0, [r7, #20]
 8002150:	f7ff ff90 	bl	8002074 <NVIC_EncodePriority>
 8002154:	4602      	mov	r2, r0
 8002156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff5f 	bl	8002020 <__NVIC_SetPriority>
}
 8002162:	bf00      	nop
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	4603      	mov	r3, r0
 8002172:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff ff33 	bl	8001fe4 <__NVIC_EnableIRQ>
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffa2 	bl	80020d8 <SysTick_Config>
 8002194:	4603      	mov	r3, r0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
 80021ba:	e16b      	b.n	8002494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	f040 815a 	bne.w	800248e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d005      	beq.n	80021f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d130      	bne.n	8002254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	2203      	movs	r2, #3
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002228:	2201      	movs	r2, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	091b      	lsrs	r3, r3, #4
 800223e:	f003 0201 	and.w	r2, r3, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b03      	cmp	r3, #3
 800225e:	d017      	beq.n	8002290 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	2203      	movs	r2, #3
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d123      	bne.n	80022e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	08da      	lsrs	r2, r3, #3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3208      	adds	r2, #8
 80022de:	69b9      	ldr	r1, [r7, #24]
 80022e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0203 	and.w	r2, r3, #3
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80b4 	beq.w	800248e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4a5f      	ldr	r2, [pc, #380]	; (80024a8 <HAL_GPIO_Init+0x308>)
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_GPIO_Init+0x308>)
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002334:	6453      	str	r3, [r2, #68]	; 0x44
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_GPIO_Init+0x308>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002342:	4a5a      	ldr	r2, [pc, #360]	; (80024ac <HAL_GPIO_Init+0x30c>)
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	3302      	adds	r3, #2
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	220f      	movs	r2, #15
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43db      	mvns	r3, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4013      	ands	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a51      	ldr	r2, [pc, #324]	; (80024b0 <HAL_GPIO_Init+0x310>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d02b      	beq.n	80023c6 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a50      	ldr	r2, [pc, #320]	; (80024b4 <HAL_GPIO_Init+0x314>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d025      	beq.n	80023c2 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a4f      	ldr	r2, [pc, #316]	; (80024b8 <HAL_GPIO_Init+0x318>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d01f      	beq.n	80023be <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4e      	ldr	r2, [pc, #312]	; (80024bc <HAL_GPIO_Init+0x31c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d019      	beq.n	80023ba <HAL_GPIO_Init+0x21a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a4d      	ldr	r2, [pc, #308]	; (80024c0 <HAL_GPIO_Init+0x320>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_GPIO_Init+0x216>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x324>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00d      	beq.n	80023b2 <HAL_GPIO_Init+0x212>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a4b      	ldr	r2, [pc, #300]	; (80024c8 <HAL_GPIO_Init+0x328>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <HAL_GPIO_Init+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a4a      	ldr	r2, [pc, #296]	; (80024cc <HAL_GPIO_Init+0x32c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <HAL_GPIO_Init+0x20a>
 80023a6:	2307      	movs	r3, #7
 80023a8:	e00e      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ae:	2306      	movs	r3, #6
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x228>
 80023c6:	2300      	movs	r3, #0
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023d8:	4934      	ldr	r1, [pc, #208]	; (80024ac <HAL_GPIO_Init+0x30c>)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_GPIO_Init+0x330>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800240a:	4a31      	ldr	r2, [pc, #196]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002434:	4a26      	ldr	r2, [pc, #152]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243a:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800245e:	4a1c      	ldr	r2, [pc, #112]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_GPIO_Init+0x330>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002488:	4a11      	ldr	r2, [pc, #68]	; (80024d0 <HAL_GPIO_Init+0x330>)
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b0f      	cmp	r3, #15
 8002498:	f67f ae90 	bls.w	80021bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800249c:	bf00      	nop
 800249e:	3724      	adds	r7, #36	; 0x24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40013800 	.word	0x40013800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400
 80024b8:	40020800 	.word	0x40020800
 80024bc:	40020c00 	.word	0x40020c00
 80024c0:	40021000 	.word	0x40021000
 80024c4:	40021400 	.word	0x40021400
 80024c8:	40021800 	.word	0x40021800
 80024cc:	40021c00 	.word	0x40021c00
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024de:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024e0:	695a      	ldr	r2, [r3, #20]
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024ea:	4a05      	ldr	r2, [pc, #20]	; (8002500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fcf0 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40013c00 	.word	0x40013c00

08002504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e264      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d075      	beq.n	800260e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002522:	4ba3      	ldr	r3, [pc, #652]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d00c      	beq.n	8002548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	4ba0      	ldr	r3, [pc, #640]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d112      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253a:	4b9d      	ldr	r3, [pc, #628]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d10b      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	4b99      	ldr	r3, [pc, #612]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d05b      	beq.n	800260c <HAL_RCC_OscConfig+0x108>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d157      	bne.n	800260c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e23f      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d106      	bne.n	8002578 <HAL_RCC_OscConfig+0x74>
 800256a:	4a91      	ldr	r2, [pc, #580]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	4b90      	ldr	r3, [pc, #576]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
 8002582:	4a8b      	ldr	r2, [pc, #556]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4a88      	ldr	r2, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	4b87      	ldr	r3, [pc, #540]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 800259c:	4a84      	ldr	r2, [pc, #528]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	4b84      	ldr	r3, [pc, #528]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4a81      	ldr	r2, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff f826 	bl	800160c <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff f822 	bl	800160c <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e204      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b76      	ldr	r3, [pc, #472]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xc0>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7ff f812 	bl	800160c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7ff f80e 	bl	800160c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1f0      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b6c      	ldr	r3, [pc, #432]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0xe8>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261a:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1c4      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4956      	ldr	r1, [pc, #344]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <HAL_RCC_OscConfig+0x2b0>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe ffc7 	bl	800160c <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe ffc3 	bl	800160c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1a5      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4943      	ldr	r1, [pc, #268]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80026a2:	4b43      	ldr	r3, [pc, #268]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b3f      	ldr	r3, [pc, #252]	; (80027b4 <HAL_RCC_OscConfig+0x2b0>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe ffa6 	bl	800160c <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe ffa2 	bl	800160c <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e184      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d030      	beq.n	8002750 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <HAL_RCC_OscConfig+0x2b4>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe ff86 	bl	800160c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe ff82 	bl	800160c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e164      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x200>
 8002722:	e015      	b.n	8002750 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <HAL_RCC_OscConfig+0x2b4>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe ff6f 	bl	800160c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002732:	f7fe ff6b 	bl	800160c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e14d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002748:	f003 0302 	and.w	r3, r3, #2
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80a0 	beq.w	800289e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275e:	2300      	movs	r3, #0
 8002760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10f      	bne.n	800278e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277c:	6413      	str	r3, [r2, #64]	; 0x40
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800278a:	2301      	movs	r3, #1
 800278c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_OscConfig+0x2b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d121      	bne.n	80027de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4a08      	ldr	r2, [pc, #32]	; (80027bc <HAL_RCC_OscConfig+0x2b8>)
 800279c:	4b07      	ldr	r3, [pc, #28]	; (80027bc <HAL_RCC_OscConfig+0x2b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe ff31 	bl	800160c <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e011      	b.n	80027d2 <HAL_RCC_OscConfig+0x2ce>
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800
 80027b4:	42470000 	.word	0x42470000
 80027b8:	42470e80 	.word	0x42470e80
 80027bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7fe ff24 	bl	800160c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e106      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b85      	ldr	r3, [pc, #532]	; (80029e8 <HAL_RCC_OscConfig+0x4e4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d106      	bne.n	80027f4 <HAL_RCC_OscConfig+0x2f0>
 80027e6:	4a81      	ldr	r2, [pc, #516]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	4b80      	ldr	r3, [pc, #512]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	e01c      	b.n	800282e <HAL_RCC_OscConfig+0x32a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x312>
 80027fc:	4a7b      	ldr	r2, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 80027fe:	4b7b      	ldr	r3, [pc, #492]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	4a78      	ldr	r2, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 800280a:	4b78      	ldr	r3, [pc, #480]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e00b      	b.n	800282e <HAL_RCC_OscConfig+0x32a>
 8002816:	4a75      	ldr	r2, [pc, #468]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002818:	4b74      	ldr	r3, [pc, #464]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	4a72      	ldr	r2, [pc, #456]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002824:	4b71      	ldr	r3, [pc, #452]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d015      	beq.n	8002862 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe fee9 	bl	800160c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7fe fee5 	bl	800160c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0c5      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	4b65      	ldr	r3, [pc, #404]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ee      	beq.n	800283e <HAL_RCC_OscConfig+0x33a>
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7fe fed3 	bl	800160c <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fecf 	bl	800160c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0af      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	4b5a      	ldr	r3, [pc, #360]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4a56      	ldr	r2, [pc, #344]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002894:	4b55      	ldr	r3, [pc, #340]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 809b 	beq.w	80029de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d05c      	beq.n	800296e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d141      	bne.n	8002940 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028bc:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x4ec>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe fea3 	bl	800160c <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fe9f 	bl	800160c <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e081      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028dc:	4b43      	ldr	r3, [pc, #268]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f0      	bne.n	80028ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e8:	4940      	ldr	r1, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69da      	ldr	r2, [r3, #28]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	019b      	lsls	r3, r3, #6
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	4313      	orrs	r3, r2
 8002910:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002912:	4b37      	ldr	r3, [pc, #220]	; (80029f0 <HAL_RCC_OscConfig+0x4ec>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fe78 	bl	800160c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fe74 	bl	800160c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e056      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x41c>
 800293e:	e04e      	b.n	80029de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b2b      	ldr	r3, [pc, #172]	; (80029f0 <HAL_RCC_OscConfig+0x4ec>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fe61 	bl	800160c <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fe5d 	bl	800160c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e03f      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x44a>
 800296c:	e037      	b.n	80029de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e032      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800297a:	4b1c      	ldr	r3, [pc, #112]	; (80029ec <HAL_RCC_OscConfig+0x4e8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d028      	beq.n	80029da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d121      	bne.n	80029da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d11a      	bne.n	80029da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d111      	bne.n	80029da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d107      	bne.n	80029da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3718      	adds	r7, #24
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40007000 	.word	0x40007000
 80029ec:	40023800 	.word	0x40023800
 80029f0:	42470060 	.word	0x42470060

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0cc      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b68      	ldr	r3, [pc, #416]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0207 	and.w	r2, r3, #7
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b65      	ldr	r3, [pc, #404]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b63      	ldr	r3, [pc, #396]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0207 	and.w	r2, r3, #7
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b8      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4a59      	ldr	r2, [pc, #356]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4a53      	ldr	r2, [pc, #332]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4950      	ldr	r1, [pc, #320]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d044      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d119      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e067      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4937      	ldr	r1, [pc, #220]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 0203 	bic.w	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fe fd92 	bl	800160c <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fe fd8e 	bl	800160c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e04f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0207 	and.w	r2, r3, #7
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d90c      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0207 	and.w	r2, r3, #7
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4919      	ldr	r1, [pc, #100]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b66:	4912      	ldr	r1, [pc, #72]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f821 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fcf2 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023c00 	.word	0x40023c00
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	0800552c 	.word	0x0800552c
 8002bb8:	20000020 	.word	0x20000020
 8002bbc:	20000024 	.word	0x20000024

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bc4:	b08f      	sub	sp, #60	; 0x3c
 8002bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bcc:	2300      	movs	r3, #0
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd8:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d007      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d008      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 80b2 	bne.w	8002d52 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bee:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002bf2:	e0b1      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf4:	4b5d      	ldr	r3, [pc, #372]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bf8:	e0ae      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bfa:	4b5a      	ldr	r3, [pc, #360]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c04:	4b57      	ldr	r3, [pc, #348]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d04e      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	f04f 0400 	mov.w	r4, #0
 8002c1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	ea01 0103 	and.w	r1, r1, r3
 8002c26:	ea02 0204 	and.w	r2, r2, r4
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	0160      	lsls	r0, r4, #5
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24
 8002c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c34:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002c38:	6278      	str	r0, [r7, #36]	; 0x24
 8002c3a:	015b      	lsls	r3, r3, #5
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002c42:	1a5b      	subs	r3, r3, r1
 8002c44:	eb64 0402 	sbc.w	r4, r4, r2
 8002c48:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002c4c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002c50:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002c54:	ebb8 0803 	subs.w	r8, r8, r3
 8002c58:	eb69 0904 	sbc.w	r9, r9, r4
 8002c5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002c74:	eb18 0801 	adds.w	r8, r8, r1
 8002c78:	eb49 0902 	adc.w	r9, r9, r2
 8002c7c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002c94:	4640      	mov	r0, r8
 8002c96:	4649      	mov	r1, r9
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	f04f 0400 	mov.w	r4, #0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4623      	mov	r3, r4
 8002ca2:	f7fd ff7d 	bl	8000ba0 <__aeabi_uldivmod>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	460c      	mov	r4, r1
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cac:	e043      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	f04f 0400 	mov.w	r4, #0
 8002cb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	ea01 0103 	and.w	r1, r1, r3
 8002cc4:	ea02 0204 	and.w	r2, r2, r4
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4614      	mov	r4, r2
 8002ccc:	0160      	lsls	r0, r4, #5
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	015b      	lsls	r3, r3, #5
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002ce0:	1a5b      	subs	r3, r3, r1
 8002ce2:	eb64 0402 	sbc.w	r4, r4, r2
 8002ce6:	01a6      	lsls	r6, r4, #6
 8002ce8:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002cec:	019d      	lsls	r5, r3, #6
 8002cee:	1aed      	subs	r5, r5, r3
 8002cf0:	eb66 0604 	sbc.w	r6, r6, r4
 8002cf4:	00f3      	lsls	r3, r6, #3
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	00eb      	lsls	r3, r5, #3
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002d08:	186d      	adds	r5, r5, r1
 8002d0a:	eb46 0602 	adc.w	r6, r6, r2
 8002d0e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002d12:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002d16:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002d1a:	4655      	mov	r5, sl
 8002d1c:	465e      	mov	r6, fp
 8002d1e:	4628      	mov	r0, r5
 8002d20:	4631      	mov	r1, r6
 8002d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f7fd ff38 	bl	8000ba0 <__aeabi_uldivmod>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d36:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	3301      	adds	r3, #1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d50:	e002      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	373c      	adds	r7, #60	; 0x3c
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000020 	.word	0x20000020

08002d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d8c:	f7ff fff0 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002d90:	4601      	mov	r1, r0
 8002d92:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	0a9b      	lsrs	r3, r3, #10
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	4a03      	ldr	r2, [pc, #12]	; (8002dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d9e:	5cd3      	ldrb	r3, [r2, r3]
 8002da0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	0800553c 	.word	0x0800553c

08002db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002db4:	f7ff ffdc 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 8002db8:	4601      	mov	r1, r0
 8002dba:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	0b5b      	lsrs	r3, r3, #13
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	4a03      	ldr	r2, [pc, #12]	; (8002dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	0800553c 	.word	0x0800553c

08002dd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e03f      	b.n	8002e6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fe fabc 	bl	800137c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	68d2      	ldr	r2, [r2, #12]
 8002e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f903 	bl	8003028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	6912      	ldr	r2, [r2, #16]
 8002e2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	6952      	ldr	r2, [r2, #20]
 8002e3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	68d2      	ldr	r2, [r2, #12]
 8002e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b08a      	sub	sp, #40	; 0x28
 8002e76:	af02      	add	r7, sp, #8
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d17b      	bne.n	8002f8a <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_UART_Transmit+0x2c>
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e074      	b.n	8002f8c <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <HAL_UART_Transmit+0x3e>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e06d      	b.n	8002f8c <HAL_UART_Transmit+0x11a>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2221      	movs	r2, #33	; 0x21
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe fba1 	bl	800160c <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_UART_Transmit+0x82>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e003      	b.n	8002efc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f04:	e029      	b.n	8002f5a <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f83f 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e035      	b.n	8002f8c <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10a      	bne.n	8002f3c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f32:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	3302      	adds	r3, #2
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e007      	b.n	8002f4c <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	69fa      	ldr	r2, [r7, #28]
 8002f42:	7812      	ldrb	r2, [r2, #0]
 8002f44:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1d0      	bne.n	8002f06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2140      	movs	r1, #64	; 0x40
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 f810 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e006      	b.n	8002f8c <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e000      	b.n	8002f8c <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002f8a:	2302      	movs	r3, #2
  }
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa4:	e02c      	b.n	8003000 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d028      	beq.n	8003000 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb4:	f7fe fb2a 	bl	800160c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	1ad2      	subs	r2, r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d91d      	bls.n	8003000 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fd2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68fa      	ldr	r2, [r7, #12]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	6952      	ldr	r2, [r2, #20]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e00f      	b.n	8003020 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	401a      	ands	r2, r3
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	429a      	cmp	r2, r3
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	429a      	cmp	r2, r3
 800301c:	d0c3      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800302c:	b091      	sub	sp, #68	; 0x44
 800302e:	af00      	add	r7, sp, #0
 8003030:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
 8003052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
 8003058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4313      	orrs	r3, r2
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	6819      	ldr	r1, [r3, #0]
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 800306e:	f022 020c 	bic.w	r2, r2, #12
 8003072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003074:	4313      	orrs	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800308e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4bba      	ldr	r3, [pc, #744]	; (800337c <UART_SetConfig+0x354>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d004      	beq.n	80030a2 <UART_SetConfig+0x7a>
 8003098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4bb8      	ldr	r3, [pc, #736]	; (8003380 <UART_SetConfig+0x358>)
 800309e:	429a      	cmp	r2, r3
 80030a0:	d103      	bne.n	80030aa <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030a2:	f7ff fe85 	bl	8002db0 <HAL_RCC_GetPCLK2Freq>
 80030a6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80030a8:	e002      	b.n	80030b0 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030aa:	f7ff fe6d 	bl	8002d88 <HAL_RCC_GetPCLK1Freq>
 80030ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b8:	f040 80a7 	bne.w	800320a <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80030c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c4:	4619      	mov	r1, r3
 80030c6:	f04f 0200 	mov.w	r2, #0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4614      	mov	r4, r2
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	eb44 0404 	adc.w	r4, r4, r4
 80030d4:	185b      	adds	r3, r3, r1
 80030d6:	eb44 0402 	adc.w	r4, r4, r2
 80030da:	00e0      	lsls	r0, r4, #3
 80030dc:	6178      	str	r0, [r7, #20]
 80030de:	6978      	ldr	r0, [r7, #20]
 80030e0:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 80030e4:	6178      	str	r0, [r7, #20]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030ee:	185d      	adds	r5, r3, r1
 80030f0:	eb44 0602 	adc.w	r6, r4, r2
 80030f4:	4628      	mov	r0, r5
 80030f6:	4631      	mov	r1, r6
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f04f 0400 	mov.w	r4, #0
 8003100:	18db      	adds	r3, r3, r3
 8003102:	eb44 0404 	adc.w	r4, r4, r4
 8003106:	461a      	mov	r2, r3
 8003108:	4623      	mov	r3, r4
 800310a:	f7fd fd49 	bl	8000ba0 <__aeabi_uldivmod>
 800310e:	4603      	mov	r3, r0
 8003110:	460c      	mov	r4, r1
 8003112:	461a      	mov	r2, r3
 8003114:	4b9b      	ldr	r3, [pc, #620]	; (8003384 <UART_SetConfig+0x35c>)
 8003116:	fba3 2302 	umull	r2, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011e      	lsls	r6, r3, #4
 800311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003120:	4619      	mov	r1, r3
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	460b      	mov	r3, r1
 8003128:	4614      	mov	r4, r2
 800312a:	18db      	adds	r3, r3, r3
 800312c:	eb44 0404 	adc.w	r4, r4, r4
 8003130:	185b      	adds	r3, r3, r1
 8003132:	eb44 0402 	adc.w	r4, r4, r2
 8003136:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 800313a:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 800313e:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 8003142:	4653      	mov	r3, sl
 8003144:	465c      	mov	r4, fp
 8003146:	eb13 0a01 	adds.w	sl, r3, r1
 800314a:	eb44 0b02 	adc.w	fp, r4, r2
 800314e:	4650      	mov	r0, sl
 8003150:	4659      	mov	r1, fp
 8003152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f04f 0400 	mov.w	r4, #0
 800315a:	18db      	adds	r3, r3, r3
 800315c:	eb44 0404 	adc.w	r4, r4, r4
 8003160:	461a      	mov	r2, r3
 8003162:	4623      	mov	r3, r4
 8003164:	f7fd fd1c 	bl	8000ba0 <__aeabi_uldivmod>
 8003168:	4603      	mov	r3, r0
 800316a:	460c      	mov	r4, r1
 800316c:	461a      	mov	r2, r3
 800316e:	4b85      	ldr	r3, [pc, #532]	; (8003384 <UART_SetConfig+0x35c>)
 8003170:	fba3 1302 	umull	r1, r3, r3, r2
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	2164      	movs	r1, #100	; 0x64
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	3332      	adds	r3, #50	; 0x32
 8003182:	4a80      	ldr	r2, [pc, #512]	; (8003384 <UART_SetConfig+0x35c>)
 8003184:	fba2 2303 	umull	r2, r3, r2, r3
 8003188:	095b      	lsrs	r3, r3, #5
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003190:	441e      	add	r6, r3
 8003192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	460b      	mov	r3, r1
 800319c:	4614      	mov	r4, r2
 800319e:	18db      	adds	r3, r3, r3
 80031a0:	eb44 0404 	adc.w	r4, r4, r4
 80031a4:	185b      	adds	r3, r3, r1
 80031a6:	eb44 0402 	adc.w	r4, r4, r2
 80031aa:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 80031ae:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 80031b2:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 80031b6:	4643      	mov	r3, r8
 80031b8:	464c      	mov	r4, r9
 80031ba:	eb13 0801 	adds.w	r8, r3, r1
 80031be:	eb44 0902 	adc.w	r9, r4, r2
 80031c2:	4640      	mov	r0, r8
 80031c4:	4649      	mov	r1, r9
 80031c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f04f 0400 	mov.w	r4, #0
 80031ce:	18db      	adds	r3, r3, r3
 80031d0:	eb44 0404 	adc.w	r4, r4, r4
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	f7fd fce2 	bl	8000ba0 <__aeabi_uldivmod>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b68      	ldr	r3, [pc, #416]	; (8003384 <UART_SetConfig+0x35c>)
 80031e4:	fba3 1302 	umull	r1, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	2164      	movs	r1, #100	; 0x64
 80031ec:	fb01 f303 	mul.w	r3, r1, r3
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	3332      	adds	r3, #50	; 0x32
 80031f6:	4a63      	ldr	r2, [pc, #396]	; (8003384 <UART_SetConfig+0x35c>)
 80031f8:	fba2 2303 	umull	r2, r3, r2, r3
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	f003 0307 	and.w	r3, r3, #7
 8003202:	4433      	add	r3, r6
 8003204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003206:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003208:	e0b3      	b.n	8003372 <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
 8003210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003212:	4619      	mov	r1, r3
 8003214:	f04f 0200 	mov.w	r2, #0
 8003218:	460b      	mov	r3, r1
 800321a:	4614      	mov	r4, r2
 800321c:	18db      	adds	r3, r3, r3
 800321e:	eb44 0404 	adc.w	r4, r4, r4
 8003222:	185b      	adds	r3, r3, r1
 8003224:	eb44 0402 	adc.w	r4, r4, r2
 8003228:	00e6      	lsls	r6, r4, #3
 800322a:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800322e:	00dd      	lsls	r5, r3, #3
 8003230:	462b      	mov	r3, r5
 8003232:	4634      	mov	r4, r6
 8003234:	185d      	adds	r5, r3, r1
 8003236:	eb44 0602 	adc.w	r6, r4, r2
 800323a:	4628      	mov	r0, r5
 800323c:	4631      	mov	r1, r6
 800323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	00a5      	lsls	r5, r4, #2
 8003248:	62fd      	str	r5, [r7, #44]	; 0x2c
 800324a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800324c:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 8003250:	62fd      	str	r5, [r7, #44]	; 0x2c
 8003252:	009c      	lsls	r4, r3, #2
 8003254:	62bc      	str	r4, [r7, #40]	; 0x28
 8003256:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800325a:	f7fd fca1 	bl	8000ba0 <__aeabi_uldivmod>
 800325e:	4603      	mov	r3, r0
 8003260:	460c      	mov	r4, r1
 8003262:	461a      	mov	r2, r3
 8003264:	4b47      	ldr	r3, [pc, #284]	; (8003384 <UART_SetConfig+0x35c>)
 8003266:	fba3 1302 	umull	r1, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	011d      	lsls	r5, r3, #4
 800326e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003270:	4619      	mov	r1, r3
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	460b      	mov	r3, r1
 8003278:	4614      	mov	r4, r2
 800327a:	18db      	adds	r3, r3, r3
 800327c:	eb44 0404 	adc.w	r4, r4, r4
 8003280:	185b      	adds	r3, r3, r1
 8003282:	eb44 0402 	adc.w	r4, r4, r2
 8003286:	00e0      	lsls	r0, r4, #3
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	00d8      	lsls	r0, r3, #3
 8003294:	60b8      	str	r0, [r7, #8]
 8003296:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800329a:	eb13 0801 	adds.w	r8, r3, r1
 800329e:	eb44 0902 	adc.w	r9, r4, r2
 80032a2:	4640      	mov	r0, r8
 80032a4:	4649      	mov	r1, r9
 80032a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f04f 0400 	mov.w	r4, #0
 80032ae:	00a6      	lsls	r6, r4, #2
 80032b0:	627e      	str	r6, [r7, #36]	; 0x24
 80032b2:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80032b4:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80032b8:	627e      	str	r6, [r7, #36]	; 0x24
 80032ba:	009c      	lsls	r4, r3, #2
 80032bc:	623c      	str	r4, [r7, #32]
 80032be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032c2:	f7fd fc6d 	bl	8000ba0 <__aeabi_uldivmod>
 80032c6:	4603      	mov	r3, r0
 80032c8:	460c      	mov	r4, r1
 80032ca:	461a      	mov	r2, r3
 80032cc:	4b2d      	ldr	r3, [pc, #180]	; (8003384 <UART_SetConfig+0x35c>)
 80032ce:	fba3 1302 	umull	r1, r3, r3, r2
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2164      	movs	r1, #100	; 0x64
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	3332      	adds	r3, #50	; 0x32
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <UART_SetConfig+0x35c>)
 80032e2:	fba2 1303 	umull	r1, r3, r2, r3
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	441d      	add	r5, r3
 80032ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032f0:	4619      	mov	r1, r3
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4614      	mov	r4, r2
 80032fa:	18db      	adds	r3, r3, r3
 80032fc:	eb44 0404 	adc.w	r4, r4, r4
 8003300:	185b      	adds	r3, r3, r1
 8003302:	eb44 0402 	adc.w	r4, r4, r2
 8003306:	00e0      	lsls	r0, r4, #3
 8003308:	6078      	str	r0, [r7, #4]
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	00d8      	lsls	r0, r3, #3
 8003314:	6038      	str	r0, [r7, #0]
 8003316:	e897 0018 	ldmia.w	r7, {r3, r4}
 800331a:	eb13 0801 	adds.w	r8, r3, r1
 800331e:	eb44 0902 	adc.w	r9, r4, r2
 8003322:	4640      	mov	r0, r8
 8003324:	4649      	mov	r1, r9
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f04f 0400 	mov.w	r4, #0
 800332e:	00a6      	lsls	r6, r4, #2
 8003330:	61fe      	str	r6, [r7, #28]
 8003332:	69fe      	ldr	r6, [r7, #28]
 8003334:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8003338:	61fe      	str	r6, [r7, #28]
 800333a:	009c      	lsls	r4, r3, #2
 800333c:	61bc      	str	r4, [r7, #24]
 800333e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003342:	f7fd fc2d 	bl	8000ba0 <__aeabi_uldivmod>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	461a      	mov	r2, r3
 800334c:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <UART_SetConfig+0x35c>)
 800334e:	fba3 1302 	umull	r1, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <UART_SetConfig+0x35c>)
 8003362:	fba2 1303 	umull	r1, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	442b      	add	r3, r5
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	6093      	str	r3, [r2, #8]
}
 8003372:	bf00      	nop
 8003374:	3744      	adds	r7, #68	; 0x44
 8003376:	46bd      	mov	sp, r7
 8003378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337c:	40011000 	.word	0x40011000
 8003380:	40011400 	.word	0x40011400
 8003384:	51eb851f 	.word	0x51eb851f

08003388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800338e:	490e      	ldr	r1, [pc, #56]	; (80033c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003394:	e002      	b.n	800339c <LoopCopyDataInit>

08003396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339a:	3304      	adds	r3, #4

0800339c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800339c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a0:	d3f9      	bcc.n	8003396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033a4:	4c0b      	ldr	r4, [pc, #44]	; (80033d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a8:	e001      	b.n	80033ae <LoopFillZerobss>

080033aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ac:	3204      	adds	r2, #4

080033ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b0:	d3fb      	bcc.n	80033aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033b2:	f7fe f8b3 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f000 f817 	bl	80033e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ba:	f7fd fe23 	bl	8001004 <main>
  bx  lr    
 80033be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80033cc:	080057b0 	.word	0x080057b0
  ldr r2, =_sbss
 80033d0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80033d4:	200002cc 	.word	0x200002cc

080033d8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <CAN1_RX0_IRQHandler>
	...

080033dc <__errno>:
 80033dc:	4b01      	ldr	r3, [pc, #4]	; (80033e4 <__errno+0x8>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000002c 	.word	0x2000002c

080033e8 <__libc_init_array>:
 80033e8:	b570      	push	{r4, r5, r6, lr}
 80033ea:	4e0d      	ldr	r6, [pc, #52]	; (8003420 <__libc_init_array+0x38>)
 80033ec:	4c0d      	ldr	r4, [pc, #52]	; (8003424 <__libc_init_array+0x3c>)
 80033ee:	1ba4      	subs	r4, r4, r6
 80033f0:	10a4      	asrs	r4, r4, #2
 80033f2:	2500      	movs	r5, #0
 80033f4:	42a5      	cmp	r5, r4
 80033f6:	d109      	bne.n	800340c <__libc_init_array+0x24>
 80033f8:	4e0b      	ldr	r6, [pc, #44]	; (8003428 <__libc_init_array+0x40>)
 80033fa:	4c0c      	ldr	r4, [pc, #48]	; (800342c <__libc_init_array+0x44>)
 80033fc:	f002 f880 	bl	8005500 <_init>
 8003400:	1ba4      	subs	r4, r4, r6
 8003402:	10a4      	asrs	r4, r4, #2
 8003404:	2500      	movs	r5, #0
 8003406:	42a5      	cmp	r5, r4
 8003408:	d105      	bne.n	8003416 <__libc_init_array+0x2e>
 800340a:	bd70      	pop	{r4, r5, r6, pc}
 800340c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003410:	4798      	blx	r3
 8003412:	3501      	adds	r5, #1
 8003414:	e7ee      	b.n	80033f4 <__libc_init_array+0xc>
 8003416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800341a:	4798      	blx	r3
 800341c:	3501      	adds	r5, #1
 800341e:	e7f2      	b.n	8003406 <__libc_init_array+0x1e>
 8003420:	080057a8 	.word	0x080057a8
 8003424:	080057a8 	.word	0x080057a8
 8003428:	080057a8 	.word	0x080057a8
 800342c:	080057ac 	.word	0x080057ac

08003430 <memset>:
 8003430:	4402      	add	r2, r0
 8003432:	4603      	mov	r3, r0
 8003434:	4293      	cmp	r3, r2
 8003436:	d100      	bne.n	800343a <memset+0xa>
 8003438:	4770      	bx	lr
 800343a:	f803 1b01 	strb.w	r1, [r3], #1
 800343e:	e7f9      	b.n	8003434 <memset+0x4>

08003440 <__cvt>:
 8003440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	ec55 4b10 	vmov	r4, r5, d0
 8003448:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800344a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800344e:	2d00      	cmp	r5, #0
 8003450:	460e      	mov	r6, r1
 8003452:	4691      	mov	r9, r2
 8003454:	4619      	mov	r1, r3
 8003456:	bfb8      	it	lt
 8003458:	4622      	movlt	r2, r4
 800345a:	462b      	mov	r3, r5
 800345c:	f027 0720 	bic.w	r7, r7, #32
 8003460:	bfbb      	ittet	lt
 8003462:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003466:	461d      	movlt	r5, r3
 8003468:	2300      	movge	r3, #0
 800346a:	232d      	movlt	r3, #45	; 0x2d
 800346c:	bfb8      	it	lt
 800346e:	4614      	movlt	r4, r2
 8003470:	2f46      	cmp	r7, #70	; 0x46
 8003472:	700b      	strb	r3, [r1, #0]
 8003474:	d004      	beq.n	8003480 <__cvt+0x40>
 8003476:	2f45      	cmp	r7, #69	; 0x45
 8003478:	d100      	bne.n	800347c <__cvt+0x3c>
 800347a:	3601      	adds	r6, #1
 800347c:	2102      	movs	r1, #2
 800347e:	e000      	b.n	8003482 <__cvt+0x42>
 8003480:	2103      	movs	r1, #3
 8003482:	ab03      	add	r3, sp, #12
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	ab02      	add	r3, sp, #8
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	4632      	mov	r2, r6
 800348c:	4653      	mov	r3, sl
 800348e:	ec45 4b10 	vmov	d0, r4, r5
 8003492:	f000 fcf1 	bl	8003e78 <_dtoa_r>
 8003496:	2f47      	cmp	r7, #71	; 0x47
 8003498:	4680      	mov	r8, r0
 800349a:	d102      	bne.n	80034a2 <__cvt+0x62>
 800349c:	f019 0f01 	tst.w	r9, #1
 80034a0:	d026      	beq.n	80034f0 <__cvt+0xb0>
 80034a2:	2f46      	cmp	r7, #70	; 0x46
 80034a4:	eb08 0906 	add.w	r9, r8, r6
 80034a8:	d111      	bne.n	80034ce <__cvt+0x8e>
 80034aa:	f898 3000 	ldrb.w	r3, [r8]
 80034ae:	2b30      	cmp	r3, #48	; 0x30
 80034b0:	d10a      	bne.n	80034c8 <__cvt+0x88>
 80034b2:	2200      	movs	r2, #0
 80034b4:	2300      	movs	r3, #0
 80034b6:	4620      	mov	r0, r4
 80034b8:	4629      	mov	r1, r5
 80034ba:	f7fd fb01 	bl	8000ac0 <__aeabi_dcmpeq>
 80034be:	b918      	cbnz	r0, 80034c8 <__cvt+0x88>
 80034c0:	f1c6 0601 	rsb	r6, r6, #1
 80034c4:	f8ca 6000 	str.w	r6, [sl]
 80034c8:	f8da 3000 	ldr.w	r3, [sl]
 80034cc:	4499      	add	r9, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	2300      	movs	r3, #0
 80034d2:	4620      	mov	r0, r4
 80034d4:	4629      	mov	r1, r5
 80034d6:	f7fd faf3 	bl	8000ac0 <__aeabi_dcmpeq>
 80034da:	b938      	cbnz	r0, 80034ec <__cvt+0xac>
 80034dc:	2230      	movs	r2, #48	; 0x30
 80034de:	9b03      	ldr	r3, [sp, #12]
 80034e0:	4599      	cmp	r9, r3
 80034e2:	d905      	bls.n	80034f0 <__cvt+0xb0>
 80034e4:	1c59      	adds	r1, r3, #1
 80034e6:	9103      	str	r1, [sp, #12]
 80034e8:	701a      	strb	r2, [r3, #0]
 80034ea:	e7f8      	b.n	80034de <__cvt+0x9e>
 80034ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80034f0:	9b03      	ldr	r3, [sp, #12]
 80034f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80034f4:	eba3 0308 	sub.w	r3, r3, r8
 80034f8:	4640      	mov	r0, r8
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	b004      	add	sp, #16
 80034fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003502 <__exponent>:
 8003502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003504:	4603      	mov	r3, r0
 8003506:	2900      	cmp	r1, #0
 8003508:	bfb8      	it	lt
 800350a:	4249      	neglt	r1, r1
 800350c:	f803 2b02 	strb.w	r2, [r3], #2
 8003510:	bfb4      	ite	lt
 8003512:	222d      	movlt	r2, #45	; 0x2d
 8003514:	222b      	movge	r2, #43	; 0x2b
 8003516:	2909      	cmp	r1, #9
 8003518:	7042      	strb	r2, [r0, #1]
 800351a:	dd20      	ble.n	800355e <__exponent+0x5c>
 800351c:	f10d 0207 	add.w	r2, sp, #7
 8003520:	4617      	mov	r7, r2
 8003522:	260a      	movs	r6, #10
 8003524:	fb91 f5f6 	sdiv	r5, r1, r6
 8003528:	fb06 1115 	mls	r1, r6, r5, r1
 800352c:	3130      	adds	r1, #48	; 0x30
 800352e:	2d09      	cmp	r5, #9
 8003530:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003534:	f102 34ff 	add.w	r4, r2, #4294967295
 8003538:	4629      	mov	r1, r5
 800353a:	dc09      	bgt.n	8003550 <__exponent+0x4e>
 800353c:	3130      	adds	r1, #48	; 0x30
 800353e:	3a02      	subs	r2, #2
 8003540:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003544:	42ba      	cmp	r2, r7
 8003546:	461c      	mov	r4, r3
 8003548:	d304      	bcc.n	8003554 <__exponent+0x52>
 800354a:	1a20      	subs	r0, r4, r0
 800354c:	b003      	add	sp, #12
 800354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003550:	4622      	mov	r2, r4
 8003552:	e7e7      	b.n	8003524 <__exponent+0x22>
 8003554:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003558:	f803 1b01 	strb.w	r1, [r3], #1
 800355c:	e7f2      	b.n	8003544 <__exponent+0x42>
 800355e:	2230      	movs	r2, #48	; 0x30
 8003560:	461c      	mov	r4, r3
 8003562:	4411      	add	r1, r2
 8003564:	f804 2b02 	strb.w	r2, [r4], #2
 8003568:	7059      	strb	r1, [r3, #1]
 800356a:	e7ee      	b.n	800354a <__exponent+0x48>

0800356c <_printf_float>:
 800356c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003570:	b08d      	sub	sp, #52	; 0x34
 8003572:	460c      	mov	r4, r1
 8003574:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003578:	4616      	mov	r6, r2
 800357a:	461f      	mov	r7, r3
 800357c:	4605      	mov	r5, r0
 800357e:	f001 fa49 	bl	8004a14 <_localeconv_r>
 8003582:	6803      	ldr	r3, [r0, #0]
 8003584:	9304      	str	r3, [sp, #16]
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fe22 	bl	80001d0 <strlen>
 800358c:	2300      	movs	r3, #0
 800358e:	930a      	str	r3, [sp, #40]	; 0x28
 8003590:	f8d8 3000 	ldr.w	r3, [r8]
 8003594:	9005      	str	r0, [sp, #20]
 8003596:	3307      	adds	r3, #7
 8003598:	f023 0307 	bic.w	r3, r3, #7
 800359c:	f103 0208 	add.w	r2, r3, #8
 80035a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80035a4:	f8d4 b000 	ldr.w	fp, [r4]
 80035a8:	f8c8 2000 	str.w	r2, [r8]
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80035b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80035b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80035bc:	9307      	str	r3, [sp, #28]
 80035be:	f8cd 8018 	str.w	r8, [sp, #24]
 80035c2:	f04f 32ff 	mov.w	r2, #4294967295
 80035c6:	4ba5      	ldr	r3, [pc, #660]	; (800385c <_printf_float+0x2f0>)
 80035c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035cc:	f7fd faaa 	bl	8000b24 <__aeabi_dcmpun>
 80035d0:	2800      	cmp	r0, #0
 80035d2:	f040 81fb 	bne.w	80039cc <_printf_float+0x460>
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295
 80035da:	4ba0      	ldr	r3, [pc, #640]	; (800385c <_printf_float+0x2f0>)
 80035dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80035e0:	f7fd fa82 	bl	8000ae8 <__aeabi_dcmple>
 80035e4:	2800      	cmp	r0, #0
 80035e6:	f040 81f1 	bne.w	80039cc <_printf_float+0x460>
 80035ea:	2200      	movs	r2, #0
 80035ec:	2300      	movs	r3, #0
 80035ee:	4640      	mov	r0, r8
 80035f0:	4649      	mov	r1, r9
 80035f2:	f7fd fa6f 	bl	8000ad4 <__aeabi_dcmplt>
 80035f6:	b110      	cbz	r0, 80035fe <_printf_float+0x92>
 80035f8:	232d      	movs	r3, #45	; 0x2d
 80035fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035fe:	4b98      	ldr	r3, [pc, #608]	; (8003860 <_printf_float+0x2f4>)
 8003600:	4a98      	ldr	r2, [pc, #608]	; (8003864 <_printf_float+0x2f8>)
 8003602:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003606:	bf8c      	ite	hi
 8003608:	4690      	movhi	r8, r2
 800360a:	4698      	movls	r8, r3
 800360c:	2303      	movs	r3, #3
 800360e:	f02b 0204 	bic.w	r2, fp, #4
 8003612:	6123      	str	r3, [r4, #16]
 8003614:	6022      	str	r2, [r4, #0]
 8003616:	f04f 0900 	mov.w	r9, #0
 800361a:	9700      	str	r7, [sp, #0]
 800361c:	4633      	mov	r3, r6
 800361e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003620:	4621      	mov	r1, r4
 8003622:	4628      	mov	r0, r5
 8003624:	f000 f9e2 	bl	80039ec <_printf_common>
 8003628:	3001      	adds	r0, #1
 800362a:	f040 8093 	bne.w	8003754 <_printf_float+0x1e8>
 800362e:	f04f 30ff 	mov.w	r0, #4294967295
 8003632:	b00d      	add	sp, #52	; 0x34
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003638:	6861      	ldr	r1, [r4, #4]
 800363a:	1c4b      	adds	r3, r1, #1
 800363c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003640:	d13f      	bne.n	80036c2 <_printf_float+0x156>
 8003642:	2306      	movs	r3, #6
 8003644:	6063      	str	r3, [r4, #4]
 8003646:	2300      	movs	r3, #0
 8003648:	9303      	str	r3, [sp, #12]
 800364a:	ab0a      	add	r3, sp, #40	; 0x28
 800364c:	9302      	str	r3, [sp, #8]
 800364e:	ab09      	add	r3, sp, #36	; 0x24
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	ec49 8b10 	vmov	d0, r8, r9
 8003656:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800365a:	6022      	str	r2, [r4, #0]
 800365c:	f8cd a004 	str.w	sl, [sp, #4]
 8003660:	6861      	ldr	r1, [r4, #4]
 8003662:	4628      	mov	r0, r5
 8003664:	f7ff feec 	bl	8003440 <__cvt>
 8003668:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800366c:	2b47      	cmp	r3, #71	; 0x47
 800366e:	4680      	mov	r8, r0
 8003670:	d109      	bne.n	8003686 <_printf_float+0x11a>
 8003672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003674:	1cd8      	adds	r0, r3, #3
 8003676:	db02      	blt.n	800367e <_printf_float+0x112>
 8003678:	6862      	ldr	r2, [r4, #4]
 800367a:	4293      	cmp	r3, r2
 800367c:	dd57      	ble.n	800372e <_printf_float+0x1c2>
 800367e:	f1aa 0a02 	sub.w	sl, sl, #2
 8003682:	fa5f fa8a 	uxtb.w	sl, sl
 8003686:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800368a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800368c:	d834      	bhi.n	80036f8 <_printf_float+0x18c>
 800368e:	3901      	subs	r1, #1
 8003690:	4652      	mov	r2, sl
 8003692:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003696:	9109      	str	r1, [sp, #36]	; 0x24
 8003698:	f7ff ff33 	bl	8003502 <__exponent>
 800369c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800369e:	1883      	adds	r3, r0, r2
 80036a0:	2a01      	cmp	r2, #1
 80036a2:	4681      	mov	r9, r0
 80036a4:	6123      	str	r3, [r4, #16]
 80036a6:	dc02      	bgt.n	80036ae <_printf_float+0x142>
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	07d1      	lsls	r1, r2, #31
 80036ac:	d501      	bpl.n	80036b2 <_printf_float+0x146>
 80036ae:	3301      	adds	r3, #1
 80036b0:	6123      	str	r3, [r4, #16]
 80036b2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0af      	beq.n	800361a <_printf_float+0xae>
 80036ba:	232d      	movs	r3, #45	; 0x2d
 80036bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c0:	e7ab      	b.n	800361a <_printf_float+0xae>
 80036c2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80036c6:	d002      	beq.n	80036ce <_printf_float+0x162>
 80036c8:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80036cc:	d1bb      	bne.n	8003646 <_printf_float+0xda>
 80036ce:	b189      	cbz	r1, 80036f4 <_printf_float+0x188>
 80036d0:	2300      	movs	r3, #0
 80036d2:	9303      	str	r3, [sp, #12]
 80036d4:	ab0a      	add	r3, sp, #40	; 0x28
 80036d6:	9302      	str	r3, [sp, #8]
 80036d8:	ab09      	add	r3, sp, #36	; 0x24
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	ec49 8b10 	vmov	d0, r8, r9
 80036e0:	6022      	str	r2, [r4, #0]
 80036e2:	f8cd a004 	str.w	sl, [sp, #4]
 80036e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80036ea:	4628      	mov	r0, r5
 80036ec:	f7ff fea8 	bl	8003440 <__cvt>
 80036f0:	4680      	mov	r8, r0
 80036f2:	e7be      	b.n	8003672 <_printf_float+0x106>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e7a5      	b.n	8003644 <_printf_float+0xd8>
 80036f8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80036fc:	d119      	bne.n	8003732 <_printf_float+0x1c6>
 80036fe:	2900      	cmp	r1, #0
 8003700:	6863      	ldr	r3, [r4, #4]
 8003702:	dd0c      	ble.n	800371e <_printf_float+0x1b2>
 8003704:	6121      	str	r1, [r4, #16]
 8003706:	b913      	cbnz	r3, 800370e <_printf_float+0x1a2>
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	07d2      	lsls	r2, r2, #31
 800370c:	d502      	bpl.n	8003714 <_printf_float+0x1a8>
 800370e:	3301      	adds	r3, #1
 8003710:	440b      	add	r3, r1
 8003712:	6123      	str	r3, [r4, #16]
 8003714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003716:	65a3      	str	r3, [r4, #88]	; 0x58
 8003718:	f04f 0900 	mov.w	r9, #0
 800371c:	e7c9      	b.n	80036b2 <_printf_float+0x146>
 800371e:	b913      	cbnz	r3, 8003726 <_printf_float+0x1ba>
 8003720:	6822      	ldr	r2, [r4, #0]
 8003722:	07d0      	lsls	r0, r2, #31
 8003724:	d501      	bpl.n	800372a <_printf_float+0x1be>
 8003726:	3302      	adds	r3, #2
 8003728:	e7f3      	b.n	8003712 <_printf_float+0x1a6>
 800372a:	2301      	movs	r3, #1
 800372c:	e7f1      	b.n	8003712 <_printf_float+0x1a6>
 800372e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003734:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003736:	4293      	cmp	r3, r2
 8003738:	db05      	blt.n	8003746 <_printf_float+0x1da>
 800373a:	6822      	ldr	r2, [r4, #0]
 800373c:	6123      	str	r3, [r4, #16]
 800373e:	07d1      	lsls	r1, r2, #31
 8003740:	d5e8      	bpl.n	8003714 <_printf_float+0x1a8>
 8003742:	3301      	adds	r3, #1
 8003744:	e7e5      	b.n	8003712 <_printf_float+0x1a6>
 8003746:	2b00      	cmp	r3, #0
 8003748:	bfd4      	ite	le
 800374a:	f1c3 0302 	rsble	r3, r3, #2
 800374e:	2301      	movgt	r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	e7de      	b.n	8003712 <_printf_float+0x1a6>
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	055a      	lsls	r2, r3, #21
 8003758:	d407      	bmi.n	800376a <_printf_float+0x1fe>
 800375a:	6923      	ldr	r3, [r4, #16]
 800375c:	4642      	mov	r2, r8
 800375e:	4631      	mov	r1, r6
 8003760:	4628      	mov	r0, r5
 8003762:	47b8      	blx	r7
 8003764:	3001      	adds	r0, #1
 8003766:	d12b      	bne.n	80037c0 <_printf_float+0x254>
 8003768:	e761      	b.n	800362e <_printf_float+0xc2>
 800376a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800376e:	f240 80e2 	bls.w	8003936 <_printf_float+0x3ca>
 8003772:	2200      	movs	r2, #0
 8003774:	2300      	movs	r3, #0
 8003776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800377a:	f7fd f9a1 	bl	8000ac0 <__aeabi_dcmpeq>
 800377e:	2800      	cmp	r0, #0
 8003780:	d03c      	beq.n	80037fc <_printf_float+0x290>
 8003782:	2301      	movs	r3, #1
 8003784:	4a38      	ldr	r2, [pc, #224]	; (8003868 <_printf_float+0x2fc>)
 8003786:	4631      	mov	r1, r6
 8003788:	4628      	mov	r0, r5
 800378a:	47b8      	blx	r7
 800378c:	3001      	adds	r0, #1
 800378e:	f43f af4e 	beq.w	800362e <_printf_float+0xc2>
 8003792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003796:	429a      	cmp	r2, r3
 8003798:	db02      	blt.n	80037a0 <_printf_float+0x234>
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	07d8      	lsls	r0, r3, #31
 800379e:	d50f      	bpl.n	80037c0 <_printf_float+0x254>
 80037a0:	9b05      	ldr	r3, [sp, #20]
 80037a2:	9a04      	ldr	r2, [sp, #16]
 80037a4:	4631      	mov	r1, r6
 80037a6:	4628      	mov	r0, r5
 80037a8:	47b8      	blx	r7
 80037aa:	3001      	adds	r0, #1
 80037ac:	f43f af3f 	beq.w	800362e <_printf_float+0xc2>
 80037b0:	f04f 0800 	mov.w	r8, #0
 80037b4:	f104 091a 	add.w	r9, r4, #26
 80037b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037ba:	3b01      	subs	r3, #1
 80037bc:	4598      	cmp	r8, r3
 80037be:	db12      	blt.n	80037e6 <_printf_float+0x27a>
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	079b      	lsls	r3, r3, #30
 80037c4:	d509      	bpl.n	80037da <_printf_float+0x26e>
 80037c6:	f04f 0800 	mov.w	r8, #0
 80037ca:	f104 0919 	add.w	r9, r4, #25
 80037ce:	68e3      	ldr	r3, [r4, #12]
 80037d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	4598      	cmp	r8, r3
 80037d6:	f2c0 80ee 	blt.w	80039b6 <_printf_float+0x44a>
 80037da:	68e0      	ldr	r0, [r4, #12]
 80037dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037de:	4298      	cmp	r0, r3
 80037e0:	bfb8      	it	lt
 80037e2:	4618      	movlt	r0, r3
 80037e4:	e725      	b.n	8003632 <_printf_float+0xc6>
 80037e6:	2301      	movs	r3, #1
 80037e8:	464a      	mov	r2, r9
 80037ea:	4631      	mov	r1, r6
 80037ec:	4628      	mov	r0, r5
 80037ee:	47b8      	blx	r7
 80037f0:	3001      	adds	r0, #1
 80037f2:	f43f af1c 	beq.w	800362e <_printf_float+0xc2>
 80037f6:	f108 0801 	add.w	r8, r8, #1
 80037fa:	e7dd      	b.n	80037b8 <_printf_float+0x24c>
 80037fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	dc34      	bgt.n	800386c <_printf_float+0x300>
 8003802:	2301      	movs	r3, #1
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <_printf_float+0x2fc>)
 8003806:	4631      	mov	r1, r6
 8003808:	4628      	mov	r0, r5
 800380a:	47b8      	blx	r7
 800380c:	3001      	adds	r0, #1
 800380e:	f43f af0e 	beq.w	800362e <_printf_float+0xc2>
 8003812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003814:	b923      	cbnz	r3, 8003820 <_printf_float+0x2b4>
 8003816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003818:	b913      	cbnz	r3, 8003820 <_printf_float+0x2b4>
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	07d9      	lsls	r1, r3, #31
 800381e:	d5cf      	bpl.n	80037c0 <_printf_float+0x254>
 8003820:	9b05      	ldr	r3, [sp, #20]
 8003822:	9a04      	ldr	r2, [sp, #16]
 8003824:	4631      	mov	r1, r6
 8003826:	4628      	mov	r0, r5
 8003828:	47b8      	blx	r7
 800382a:	3001      	adds	r0, #1
 800382c:	f43f aeff 	beq.w	800362e <_printf_float+0xc2>
 8003830:	f04f 0900 	mov.w	r9, #0
 8003834:	f104 0a1a 	add.w	sl, r4, #26
 8003838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800383a:	425b      	negs	r3, r3
 800383c:	4599      	cmp	r9, r3
 800383e:	db01      	blt.n	8003844 <_printf_float+0x2d8>
 8003840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003842:	e78b      	b.n	800375c <_printf_float+0x1f0>
 8003844:	2301      	movs	r3, #1
 8003846:	4652      	mov	r2, sl
 8003848:	4631      	mov	r1, r6
 800384a:	4628      	mov	r0, r5
 800384c:	47b8      	blx	r7
 800384e:	3001      	adds	r0, #1
 8003850:	f43f aeed 	beq.w	800362e <_printf_float+0xc2>
 8003854:	f109 0901 	add.w	r9, r9, #1
 8003858:	e7ee      	b.n	8003838 <_printf_float+0x2cc>
 800385a:	bf00      	nop
 800385c:	7fefffff 	.word	0x7fefffff
 8003860:	08005544 	.word	0x08005544
 8003864:	08005548 	.word	0x08005548
 8003868:	08005554 	.word	0x08005554
 800386c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800386e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003870:	429a      	cmp	r2, r3
 8003872:	bfa8      	it	ge
 8003874:	461a      	movge	r2, r3
 8003876:	2a00      	cmp	r2, #0
 8003878:	4691      	mov	r9, r2
 800387a:	dc38      	bgt.n	80038ee <_printf_float+0x382>
 800387c:	f104 031a 	add.w	r3, r4, #26
 8003880:	f04f 0b00 	mov.w	fp, #0
 8003884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003888:	9306      	str	r3, [sp, #24]
 800388a:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800388e:	ebaa 0309 	sub.w	r3, sl, r9
 8003892:	459b      	cmp	fp, r3
 8003894:	db33      	blt.n	80038fe <_printf_float+0x392>
 8003896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800389a:	429a      	cmp	r2, r3
 800389c:	db3a      	blt.n	8003914 <_printf_float+0x3a8>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	07da      	lsls	r2, r3, #31
 80038a2:	d437      	bmi.n	8003914 <_printf_float+0x3a8>
 80038a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038a8:	eba3 020a 	sub.w	r2, r3, sl
 80038ac:	eba3 0901 	sub.w	r9, r3, r1
 80038b0:	4591      	cmp	r9, r2
 80038b2:	bfa8      	it	ge
 80038b4:	4691      	movge	r9, r2
 80038b6:	f1b9 0f00 	cmp.w	r9, #0
 80038ba:	dc33      	bgt.n	8003924 <_printf_float+0x3b8>
 80038bc:	f04f 0800 	mov.w	r8, #0
 80038c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038c4:	f104 0a1a 	add.w	sl, r4, #26
 80038c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	eba3 0309 	sub.w	r3, r3, r9
 80038d2:	4598      	cmp	r8, r3
 80038d4:	f6bf af74 	bge.w	80037c0 <_printf_float+0x254>
 80038d8:	2301      	movs	r3, #1
 80038da:	4652      	mov	r2, sl
 80038dc:	4631      	mov	r1, r6
 80038de:	4628      	mov	r0, r5
 80038e0:	47b8      	blx	r7
 80038e2:	3001      	adds	r0, #1
 80038e4:	f43f aea3 	beq.w	800362e <_printf_float+0xc2>
 80038e8:	f108 0801 	add.w	r8, r8, #1
 80038ec:	e7ec      	b.n	80038c8 <_printf_float+0x35c>
 80038ee:	4613      	mov	r3, r2
 80038f0:	4631      	mov	r1, r6
 80038f2:	4642      	mov	r2, r8
 80038f4:	4628      	mov	r0, r5
 80038f6:	47b8      	blx	r7
 80038f8:	3001      	adds	r0, #1
 80038fa:	d1bf      	bne.n	800387c <_printf_float+0x310>
 80038fc:	e697      	b.n	800362e <_printf_float+0xc2>
 80038fe:	2301      	movs	r3, #1
 8003900:	9a06      	ldr	r2, [sp, #24]
 8003902:	4631      	mov	r1, r6
 8003904:	4628      	mov	r0, r5
 8003906:	47b8      	blx	r7
 8003908:	3001      	adds	r0, #1
 800390a:	f43f ae90 	beq.w	800362e <_printf_float+0xc2>
 800390e:	f10b 0b01 	add.w	fp, fp, #1
 8003912:	e7ba      	b.n	800388a <_printf_float+0x31e>
 8003914:	9b05      	ldr	r3, [sp, #20]
 8003916:	9a04      	ldr	r2, [sp, #16]
 8003918:	4631      	mov	r1, r6
 800391a:	4628      	mov	r0, r5
 800391c:	47b8      	blx	r7
 800391e:	3001      	adds	r0, #1
 8003920:	d1c0      	bne.n	80038a4 <_printf_float+0x338>
 8003922:	e684      	b.n	800362e <_printf_float+0xc2>
 8003924:	464b      	mov	r3, r9
 8003926:	eb08 020a 	add.w	r2, r8, sl
 800392a:	4631      	mov	r1, r6
 800392c:	4628      	mov	r0, r5
 800392e:	47b8      	blx	r7
 8003930:	3001      	adds	r0, #1
 8003932:	d1c3      	bne.n	80038bc <_printf_float+0x350>
 8003934:	e67b      	b.n	800362e <_printf_float+0xc2>
 8003936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003938:	2a01      	cmp	r2, #1
 800393a:	dc01      	bgt.n	8003940 <_printf_float+0x3d4>
 800393c:	07db      	lsls	r3, r3, #31
 800393e:	d537      	bpl.n	80039b0 <_printf_float+0x444>
 8003940:	2301      	movs	r3, #1
 8003942:	4642      	mov	r2, r8
 8003944:	4631      	mov	r1, r6
 8003946:	4628      	mov	r0, r5
 8003948:	47b8      	blx	r7
 800394a:	3001      	adds	r0, #1
 800394c:	f43f ae6f 	beq.w	800362e <_printf_float+0xc2>
 8003950:	9b05      	ldr	r3, [sp, #20]
 8003952:	9a04      	ldr	r2, [sp, #16]
 8003954:	4631      	mov	r1, r6
 8003956:	4628      	mov	r0, r5
 8003958:	47b8      	blx	r7
 800395a:	3001      	adds	r0, #1
 800395c:	f43f ae67 	beq.w	800362e <_printf_float+0xc2>
 8003960:	2200      	movs	r2, #0
 8003962:	2300      	movs	r3, #0
 8003964:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003968:	f7fd f8aa 	bl	8000ac0 <__aeabi_dcmpeq>
 800396c:	b158      	cbz	r0, 8003986 <_printf_float+0x41a>
 800396e:	f04f 0800 	mov.w	r8, #0
 8003972:	f104 0a1a 	add.w	sl, r4, #26
 8003976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	4598      	cmp	r8, r3
 800397c:	db0d      	blt.n	800399a <_printf_float+0x42e>
 800397e:	464b      	mov	r3, r9
 8003980:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003984:	e6eb      	b.n	800375e <_printf_float+0x1f2>
 8003986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003988:	f108 0201 	add.w	r2, r8, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	4631      	mov	r1, r6
 8003990:	4628      	mov	r0, r5
 8003992:	47b8      	blx	r7
 8003994:	3001      	adds	r0, #1
 8003996:	d1f2      	bne.n	800397e <_printf_float+0x412>
 8003998:	e649      	b.n	800362e <_printf_float+0xc2>
 800399a:	2301      	movs	r3, #1
 800399c:	4652      	mov	r2, sl
 800399e:	4631      	mov	r1, r6
 80039a0:	4628      	mov	r0, r5
 80039a2:	47b8      	blx	r7
 80039a4:	3001      	adds	r0, #1
 80039a6:	f43f ae42 	beq.w	800362e <_printf_float+0xc2>
 80039aa:	f108 0801 	add.w	r8, r8, #1
 80039ae:	e7e2      	b.n	8003976 <_printf_float+0x40a>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4642      	mov	r2, r8
 80039b4:	e7eb      	b.n	800398e <_printf_float+0x422>
 80039b6:	2301      	movs	r3, #1
 80039b8:	464a      	mov	r2, r9
 80039ba:	4631      	mov	r1, r6
 80039bc:	4628      	mov	r0, r5
 80039be:	47b8      	blx	r7
 80039c0:	3001      	adds	r0, #1
 80039c2:	f43f ae34 	beq.w	800362e <_printf_float+0xc2>
 80039c6:	f108 0801 	add.w	r8, r8, #1
 80039ca:	e700      	b.n	80037ce <_printf_float+0x262>
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	4640      	mov	r0, r8
 80039d2:	4649      	mov	r1, r9
 80039d4:	f7fd f8a6 	bl	8000b24 <__aeabi_dcmpun>
 80039d8:	2800      	cmp	r0, #0
 80039da:	f43f ae2d 	beq.w	8003638 <_printf_float+0xcc>
 80039de:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <_printf_float+0x478>)
 80039e0:	4a01      	ldr	r2, [pc, #4]	; (80039e8 <_printf_float+0x47c>)
 80039e2:	e60e      	b.n	8003602 <_printf_float+0x96>
 80039e4:	0800554c 	.word	0x0800554c
 80039e8:	08005550 	.word	0x08005550

080039ec <_printf_common>:
 80039ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039f0:	4691      	mov	r9, r2
 80039f2:	461f      	mov	r7, r3
 80039f4:	688a      	ldr	r2, [r1, #8]
 80039f6:	690b      	ldr	r3, [r1, #16]
 80039f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039fc:	4293      	cmp	r3, r2
 80039fe:	bfb8      	it	lt
 8003a00:	4613      	movlt	r3, r2
 8003a02:	f8c9 3000 	str.w	r3, [r9]
 8003a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a0a:	4606      	mov	r6, r0
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	b112      	cbz	r2, 8003a16 <_printf_common+0x2a>
 8003a10:	3301      	adds	r3, #1
 8003a12:	f8c9 3000 	str.w	r3, [r9]
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	0699      	lsls	r1, r3, #26
 8003a1a:	bf42      	ittt	mi
 8003a1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a20:	3302      	addmi	r3, #2
 8003a22:	f8c9 3000 	strmi.w	r3, [r9]
 8003a26:	6825      	ldr	r5, [r4, #0]
 8003a28:	f015 0506 	ands.w	r5, r5, #6
 8003a2c:	d107      	bne.n	8003a3e <_printf_common+0x52>
 8003a2e:	f104 0a19 	add.w	sl, r4, #25
 8003a32:	68e3      	ldr	r3, [r4, #12]
 8003a34:	f8d9 2000 	ldr.w	r2, [r9]
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	429d      	cmp	r5, r3
 8003a3c:	db29      	blt.n	8003a92 <_printf_common+0xa6>
 8003a3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a42:	6822      	ldr	r2, [r4, #0]
 8003a44:	3300      	adds	r3, #0
 8003a46:	bf18      	it	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	0692      	lsls	r2, r2, #26
 8003a4c:	d42e      	bmi.n	8003aac <_printf_common+0xc0>
 8003a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a52:	4639      	mov	r1, r7
 8003a54:	4630      	mov	r0, r6
 8003a56:	47c0      	blx	r8
 8003a58:	3001      	adds	r0, #1
 8003a5a:	d021      	beq.n	8003aa0 <_printf_common+0xb4>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	68e5      	ldr	r5, [r4, #12]
 8003a60:	f8d9 2000 	ldr.w	r2, [r9]
 8003a64:	f003 0306 	and.w	r3, r3, #6
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	bf08      	it	eq
 8003a6c:	1aad      	subeq	r5, r5, r2
 8003a6e:	68a3      	ldr	r3, [r4, #8]
 8003a70:	6922      	ldr	r2, [r4, #16]
 8003a72:	bf0c      	ite	eq
 8003a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a78:	2500      	movne	r5, #0
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	bfc4      	itt	gt
 8003a7e:	1a9b      	subgt	r3, r3, r2
 8003a80:	18ed      	addgt	r5, r5, r3
 8003a82:	f04f 0900 	mov.w	r9, #0
 8003a86:	341a      	adds	r4, #26
 8003a88:	454d      	cmp	r5, r9
 8003a8a:	d11b      	bne.n	8003ac4 <_printf_common+0xd8>
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a92:	2301      	movs	r3, #1
 8003a94:	4652      	mov	r2, sl
 8003a96:	4639      	mov	r1, r7
 8003a98:	4630      	mov	r0, r6
 8003a9a:	47c0      	blx	r8
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d103      	bne.n	8003aa8 <_printf_common+0xbc>
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	3501      	adds	r5, #1
 8003aaa:	e7c2      	b.n	8003a32 <_printf_common+0x46>
 8003aac:	18e1      	adds	r1, r4, r3
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	2030      	movs	r0, #48	; 0x30
 8003ab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ab6:	4422      	add	r2, r4
 8003ab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003abc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	e7c4      	b.n	8003a4e <_printf_common+0x62>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	4639      	mov	r1, r7
 8003aca:	4630      	mov	r0, r6
 8003acc:	47c0      	blx	r8
 8003ace:	3001      	adds	r0, #1
 8003ad0:	d0e6      	beq.n	8003aa0 <_printf_common+0xb4>
 8003ad2:	f109 0901 	add.w	r9, r9, #1
 8003ad6:	e7d7      	b.n	8003a88 <_printf_common+0x9c>

08003ad8 <_printf_i>:
 8003ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003adc:	4617      	mov	r7, r2
 8003ade:	7e0a      	ldrb	r2, [r1, #24]
 8003ae0:	b085      	sub	sp, #20
 8003ae2:	2a6e      	cmp	r2, #110	; 0x6e
 8003ae4:	4698      	mov	r8, r3
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003aec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003af0:	f000 80bc 	beq.w	8003c6c <_printf_i+0x194>
 8003af4:	d81a      	bhi.n	8003b2c <_printf_i+0x54>
 8003af6:	2a63      	cmp	r2, #99	; 0x63
 8003af8:	d02e      	beq.n	8003b58 <_printf_i+0x80>
 8003afa:	d80a      	bhi.n	8003b12 <_printf_i+0x3a>
 8003afc:	2a00      	cmp	r2, #0
 8003afe:	f000 80c8 	beq.w	8003c92 <_printf_i+0x1ba>
 8003b02:	2a58      	cmp	r2, #88	; 0x58
 8003b04:	f000 808a 	beq.w	8003c1c <_printf_i+0x144>
 8003b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003b10:	e02a      	b.n	8003b68 <_printf_i+0x90>
 8003b12:	2a64      	cmp	r2, #100	; 0x64
 8003b14:	d001      	beq.n	8003b1a <_printf_i+0x42>
 8003b16:	2a69      	cmp	r2, #105	; 0x69
 8003b18:	d1f6      	bne.n	8003b08 <_printf_i+0x30>
 8003b1a:	6821      	ldr	r1, [r4, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b22:	d023      	beq.n	8003b6c <_printf_i+0x94>
 8003b24:	1d11      	adds	r1, r2, #4
 8003b26:	6019      	str	r1, [r3, #0]
 8003b28:	6813      	ldr	r3, [r2, #0]
 8003b2a:	e027      	b.n	8003b7c <_printf_i+0xa4>
 8003b2c:	2a73      	cmp	r2, #115	; 0x73
 8003b2e:	f000 80b4 	beq.w	8003c9a <_printf_i+0x1c2>
 8003b32:	d808      	bhi.n	8003b46 <_printf_i+0x6e>
 8003b34:	2a6f      	cmp	r2, #111	; 0x6f
 8003b36:	d02a      	beq.n	8003b8e <_printf_i+0xb6>
 8003b38:	2a70      	cmp	r2, #112	; 0x70
 8003b3a:	d1e5      	bne.n	8003b08 <_printf_i+0x30>
 8003b3c:	680a      	ldr	r2, [r1, #0]
 8003b3e:	f042 0220 	orr.w	r2, r2, #32
 8003b42:	600a      	str	r2, [r1, #0]
 8003b44:	e003      	b.n	8003b4e <_printf_i+0x76>
 8003b46:	2a75      	cmp	r2, #117	; 0x75
 8003b48:	d021      	beq.n	8003b8e <_printf_i+0xb6>
 8003b4a:	2a78      	cmp	r2, #120	; 0x78
 8003b4c:	d1dc      	bne.n	8003b08 <_printf_i+0x30>
 8003b4e:	2278      	movs	r2, #120	; 0x78
 8003b50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003b54:	496e      	ldr	r1, [pc, #440]	; (8003d10 <_printf_i+0x238>)
 8003b56:	e064      	b.n	8003c22 <_printf_i+0x14a>
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003b5e:	1d11      	adds	r1, r2, #4
 8003b60:	6019      	str	r1, [r3, #0]
 8003b62:	6813      	ldr	r3, [r2, #0]
 8003b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0a3      	b.n	8003cb4 <_printf_i+0x1dc>
 8003b6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003b70:	f102 0104 	add.w	r1, r2, #4
 8003b74:	6019      	str	r1, [r3, #0]
 8003b76:	d0d7      	beq.n	8003b28 <_printf_i+0x50>
 8003b78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da03      	bge.n	8003b88 <_printf_i+0xb0>
 8003b80:	222d      	movs	r2, #45	; 0x2d
 8003b82:	425b      	negs	r3, r3
 8003b84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b88:	4962      	ldr	r1, [pc, #392]	; (8003d14 <_printf_i+0x23c>)
 8003b8a:	220a      	movs	r2, #10
 8003b8c:	e017      	b.n	8003bbe <_printf_i+0xe6>
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b96:	d003      	beq.n	8003ba0 <_printf_i+0xc8>
 8003b98:	1d08      	adds	r0, r1, #4
 8003b9a:	6018      	str	r0, [r3, #0]
 8003b9c:	680b      	ldr	r3, [r1, #0]
 8003b9e:	e006      	b.n	8003bae <_printf_i+0xd6>
 8003ba0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ba4:	f101 0004 	add.w	r0, r1, #4
 8003ba8:	6018      	str	r0, [r3, #0]
 8003baa:	d0f7      	beq.n	8003b9c <_printf_i+0xc4>
 8003bac:	880b      	ldrh	r3, [r1, #0]
 8003bae:	4959      	ldr	r1, [pc, #356]	; (8003d14 <_printf_i+0x23c>)
 8003bb0:	2a6f      	cmp	r2, #111	; 0x6f
 8003bb2:	bf14      	ite	ne
 8003bb4:	220a      	movne	r2, #10
 8003bb6:	2208      	moveq	r2, #8
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003bbe:	6865      	ldr	r5, [r4, #4]
 8003bc0:	60a5      	str	r5, [r4, #8]
 8003bc2:	2d00      	cmp	r5, #0
 8003bc4:	f2c0 809c 	blt.w	8003d00 <_printf_i+0x228>
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	f020 0004 	bic.w	r0, r0, #4
 8003bce:	6020      	str	r0, [r4, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d13f      	bne.n	8003c54 <_printf_i+0x17c>
 8003bd4:	2d00      	cmp	r5, #0
 8003bd6:	f040 8095 	bne.w	8003d04 <_printf_i+0x22c>
 8003bda:	4675      	mov	r5, lr
 8003bdc:	2a08      	cmp	r2, #8
 8003bde:	d10b      	bne.n	8003bf8 <_printf_i+0x120>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	07da      	lsls	r2, r3, #31
 8003be4:	d508      	bpl.n	8003bf8 <_printf_i+0x120>
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6862      	ldr	r2, [r4, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	bfde      	ittt	le
 8003bee:	2330      	movle	r3, #48	; 0x30
 8003bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bf8:	ebae 0305 	sub.w	r3, lr, r5
 8003bfc:	6123      	str	r3, [r4, #16]
 8003bfe:	f8cd 8000 	str.w	r8, [sp]
 8003c02:	463b      	mov	r3, r7
 8003c04:	aa03      	add	r2, sp, #12
 8003c06:	4621      	mov	r1, r4
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f7ff feef 	bl	80039ec <_printf_common>
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d155      	bne.n	8003cbe <_printf_i+0x1e6>
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	b005      	add	sp, #20
 8003c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003c20:	493c      	ldr	r1, [pc, #240]	; (8003d14 <_printf_i+0x23c>)
 8003c22:	6822      	ldr	r2, [r4, #0]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003c2a:	f100 0504 	add.w	r5, r0, #4
 8003c2e:	601d      	str	r5, [r3, #0]
 8003c30:	d001      	beq.n	8003c36 <_printf_i+0x15e>
 8003c32:	6803      	ldr	r3, [r0, #0]
 8003c34:	e002      	b.n	8003c3c <_printf_i+0x164>
 8003c36:	0655      	lsls	r5, r2, #25
 8003c38:	d5fb      	bpl.n	8003c32 <_printf_i+0x15a>
 8003c3a:	8803      	ldrh	r3, [r0, #0]
 8003c3c:	07d0      	lsls	r0, r2, #31
 8003c3e:	bf44      	itt	mi
 8003c40:	f042 0220 	orrmi.w	r2, r2, #32
 8003c44:	6022      	strmi	r2, [r4, #0]
 8003c46:	b91b      	cbnz	r3, 8003c50 <_printf_i+0x178>
 8003c48:	6822      	ldr	r2, [r4, #0]
 8003c4a:	f022 0220 	bic.w	r2, r2, #32
 8003c4e:	6022      	str	r2, [r4, #0]
 8003c50:	2210      	movs	r2, #16
 8003c52:	e7b1      	b.n	8003bb8 <_printf_i+0xe0>
 8003c54:	4675      	mov	r5, lr
 8003c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c5a:	fb02 3310 	mls	r3, r2, r0, r3
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003c64:	4603      	mov	r3, r0
 8003c66:	2800      	cmp	r0, #0
 8003c68:	d1f5      	bne.n	8003c56 <_printf_i+0x17e>
 8003c6a:	e7b7      	b.n	8003bdc <_printf_i+0x104>
 8003c6c:	6808      	ldr	r0, [r1, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	6949      	ldr	r1, [r1, #20]
 8003c72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c76:	d004      	beq.n	8003c82 <_printf_i+0x1aa>
 8003c78:	1d10      	adds	r0, r2, #4
 8003c7a:	6018      	str	r0, [r3, #0]
 8003c7c:	6813      	ldr	r3, [r2, #0]
 8003c7e:	6019      	str	r1, [r3, #0]
 8003c80:	e007      	b.n	8003c92 <_printf_i+0x1ba>
 8003c82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c86:	f102 0004 	add.w	r0, r2, #4
 8003c8a:	6018      	str	r0, [r3, #0]
 8003c8c:	6813      	ldr	r3, [r2, #0]
 8003c8e:	d0f6      	beq.n	8003c7e <_printf_i+0x1a6>
 8003c90:	8019      	strh	r1, [r3, #0]
 8003c92:	2300      	movs	r3, #0
 8003c94:	6123      	str	r3, [r4, #16]
 8003c96:	4675      	mov	r5, lr
 8003c98:	e7b1      	b.n	8003bfe <_printf_i+0x126>
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	1d11      	adds	r1, r2, #4
 8003c9e:	6019      	str	r1, [r3, #0]
 8003ca0:	6815      	ldr	r5, [r2, #0]
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	f7fc fa9a 	bl	80001e0 <memchr>
 8003cac:	b108      	cbz	r0, 8003cb2 <_printf_i+0x1da>
 8003cae:	1b40      	subs	r0, r0, r5
 8003cb0:	6060      	str	r0, [r4, #4]
 8003cb2:	6863      	ldr	r3, [r4, #4]
 8003cb4:	6123      	str	r3, [r4, #16]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cbc:	e79f      	b.n	8003bfe <_printf_i+0x126>
 8003cbe:	6923      	ldr	r3, [r4, #16]
 8003cc0:	462a      	mov	r2, r5
 8003cc2:	4639      	mov	r1, r7
 8003cc4:	4630      	mov	r0, r6
 8003cc6:	47c0      	blx	r8
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d0a2      	beq.n	8003c12 <_printf_i+0x13a>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	079b      	lsls	r3, r3, #30
 8003cd0:	d507      	bpl.n	8003ce2 <_printf_i+0x20a>
 8003cd2:	2500      	movs	r5, #0
 8003cd4:	f104 0919 	add.w	r9, r4, #25
 8003cd8:	68e3      	ldr	r3, [r4, #12]
 8003cda:	9a03      	ldr	r2, [sp, #12]
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	429d      	cmp	r5, r3
 8003ce0:	db05      	blt.n	8003cee <_printf_i+0x216>
 8003ce2:	68e0      	ldr	r0, [r4, #12]
 8003ce4:	9b03      	ldr	r3, [sp, #12]
 8003ce6:	4298      	cmp	r0, r3
 8003ce8:	bfb8      	it	lt
 8003cea:	4618      	movlt	r0, r3
 8003cec:	e793      	b.n	8003c16 <_printf_i+0x13e>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	464a      	mov	r2, r9
 8003cf2:	4639      	mov	r1, r7
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	47c0      	blx	r8
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d08a      	beq.n	8003c12 <_printf_i+0x13a>
 8003cfc:	3501      	adds	r5, #1
 8003cfe:	e7eb      	b.n	8003cd8 <_printf_i+0x200>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1a7      	bne.n	8003c54 <_printf_i+0x17c>
 8003d04:	780b      	ldrb	r3, [r1, #0]
 8003d06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d0e:	e765      	b.n	8003bdc <_printf_i+0x104>
 8003d10:	08005567 	.word	0x08005567
 8003d14:	08005556 	.word	0x08005556

08003d18 <siprintf>:
 8003d18:	b40e      	push	{r1, r2, r3}
 8003d1a:	b500      	push	{lr}
 8003d1c:	b09c      	sub	sp, #112	; 0x70
 8003d1e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003d22:	ab1d      	add	r3, sp, #116	; 0x74
 8003d24:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003d28:	9002      	str	r0, [sp, #8]
 8003d2a:	9006      	str	r0, [sp, #24]
 8003d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d30:	480a      	ldr	r0, [pc, #40]	; (8003d5c <siprintf+0x44>)
 8003d32:	9104      	str	r1, [sp, #16]
 8003d34:	9107      	str	r1, [sp, #28]
 8003d36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d3e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003d42:	6800      	ldr	r0, [r0, #0]
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	a902      	add	r1, sp, #8
 8003d48:	f001 fa6c 	bl	8005224 <_svfiprintf_r>
 8003d4c:	9b02      	ldr	r3, [sp, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	b01c      	add	sp, #112	; 0x70
 8003d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d58:	b003      	add	sp, #12
 8003d5a:	4770      	bx	lr
 8003d5c:	2000002c 	.word	0x2000002c

08003d60 <quorem>:
 8003d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d64:	6903      	ldr	r3, [r0, #16]
 8003d66:	690c      	ldr	r4, [r1, #16]
 8003d68:	429c      	cmp	r4, r3
 8003d6a:	4680      	mov	r8, r0
 8003d6c:	f300 8082 	bgt.w	8003e74 <quorem+0x114>
 8003d70:	3c01      	subs	r4, #1
 8003d72:	f101 0714 	add.w	r7, r1, #20
 8003d76:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003d7a:	f100 0614 	add.w	r6, r0, #20
 8003d7e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003d82:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003d86:	eb06 030e 	add.w	r3, r6, lr
 8003d8a:	3501      	adds	r5, #1
 8003d8c:	eb07 090e 	add.w	r9, r7, lr
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	fbb0 f5f5 	udiv	r5, r0, r5
 8003d96:	b395      	cbz	r5, 8003dfe <quorem+0x9e>
 8003d98:	f04f 0a00 	mov.w	sl, #0
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	46b4      	mov	ip, r6
 8003da0:	46d3      	mov	fp, sl
 8003da2:	f850 2b04 	ldr.w	r2, [r0], #4
 8003da6:	b293      	uxth	r3, r2
 8003da8:	fb05 a303 	mla	r3, r5, r3, sl
 8003dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	ebab 0303 	sub.w	r3, fp, r3
 8003db6:	0c12      	lsrs	r2, r2, #16
 8003db8:	f8bc b000 	ldrh.w	fp, [ip]
 8003dbc:	fb05 a202 	mla	r2, r5, r2, sl
 8003dc0:	fa13 f38b 	uxtah	r3, r3, fp
 8003dc4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003dc8:	fa1f fb82 	uxth.w	fp, r2
 8003dcc:	f8dc 2000 	ldr.w	r2, [ip]
 8003dd0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003dd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dde:	4581      	cmp	r9, r0
 8003de0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003de4:	f84c 3b04 	str.w	r3, [ip], #4
 8003de8:	d2db      	bcs.n	8003da2 <quorem+0x42>
 8003dea:	f856 300e 	ldr.w	r3, [r6, lr]
 8003dee:	b933      	cbnz	r3, 8003dfe <quorem+0x9e>
 8003df0:	9b01      	ldr	r3, [sp, #4]
 8003df2:	3b04      	subs	r3, #4
 8003df4:	429e      	cmp	r6, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	d330      	bcc.n	8003e5c <quorem+0xfc>
 8003dfa:	f8c8 4010 	str.w	r4, [r8, #16]
 8003dfe:	4640      	mov	r0, r8
 8003e00:	f001 f833 	bl	8004e6a <__mcmp>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	db25      	blt.n	8003e54 <quorem+0xf4>
 8003e08:	3501      	adds	r5, #1
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	f04f 0e00 	mov.w	lr, #0
 8003e10:	f857 2b04 	ldr.w	r2, [r7], #4
 8003e14:	f8d0 c000 	ldr.w	ip, [r0]
 8003e18:	b293      	uxth	r3, r2
 8003e1a:	ebae 0303 	sub.w	r3, lr, r3
 8003e1e:	0c12      	lsrs	r2, r2, #16
 8003e20:	fa13 f38c 	uxtah	r3, r3, ip
 8003e24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003e28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e32:	45b9      	cmp	r9, r7
 8003e34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003e38:	f840 3b04 	str.w	r3, [r0], #4
 8003e3c:	d2e8      	bcs.n	8003e10 <quorem+0xb0>
 8003e3e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003e42:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003e46:	b92a      	cbnz	r2, 8003e54 <quorem+0xf4>
 8003e48:	3b04      	subs	r3, #4
 8003e4a:	429e      	cmp	r6, r3
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	d30b      	bcc.n	8003e68 <quorem+0x108>
 8003e50:	f8c8 4010 	str.w	r4, [r8, #16]
 8003e54:	4628      	mov	r0, r5
 8003e56:	b003      	add	sp, #12
 8003e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5c:	6812      	ldr	r2, [r2, #0]
 8003e5e:	3b04      	subs	r3, #4
 8003e60:	2a00      	cmp	r2, #0
 8003e62:	d1ca      	bne.n	8003dfa <quorem+0x9a>
 8003e64:	3c01      	subs	r4, #1
 8003e66:	e7c5      	b.n	8003df4 <quorem+0x94>
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	2a00      	cmp	r2, #0
 8003e6e:	d1ef      	bne.n	8003e50 <quorem+0xf0>
 8003e70:	3c01      	subs	r4, #1
 8003e72:	e7ea      	b.n	8003e4a <quorem+0xea>
 8003e74:	2000      	movs	r0, #0
 8003e76:	e7ee      	b.n	8003e56 <quorem+0xf6>

08003e78 <_dtoa_r>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	ec57 6b10 	vmov	r6, r7, d0
 8003e80:	b097      	sub	sp, #92	; 0x5c
 8003e82:	e9cd 6700 	strd	r6, r7, [sp]
 8003e86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003e88:	9107      	str	r1, [sp, #28]
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	920a      	str	r2, [sp, #40]	; 0x28
 8003e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e90:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003e92:	b93e      	cbnz	r6, 8003ea4 <_dtoa_r+0x2c>
 8003e94:	2010      	movs	r0, #16
 8003e96:	f000 fdcb 	bl	8004a30 <malloc>
 8003e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8003e9c:	6046      	str	r6, [r0, #4]
 8003e9e:	6086      	str	r6, [r0, #8]
 8003ea0:	6006      	str	r6, [r0, #0]
 8003ea2:	60c6      	str	r6, [r0, #12]
 8003ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ea6:	6819      	ldr	r1, [r3, #0]
 8003ea8:	b151      	cbz	r1, 8003ec0 <_dtoa_r+0x48>
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	604a      	str	r2, [r1, #4]
 8003eae:	2301      	movs	r3, #1
 8003eb0:	4093      	lsls	r3, r2
 8003eb2:	608b      	str	r3, [r1, #8]
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 fe02 	bl	8004abe <_Bfree>
 8003eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	9b01      	ldr	r3, [sp, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfbf      	itttt	lt
 8003ec6:	2301      	movlt	r3, #1
 8003ec8:	602b      	strlt	r3, [r5, #0]
 8003eca:	9b01      	ldrlt	r3, [sp, #4]
 8003ecc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003ed0:	bfb2      	itee	lt
 8003ed2:	9301      	strlt	r3, [sp, #4]
 8003ed4:	2300      	movge	r3, #0
 8003ed6:	602b      	strge	r3, [r5, #0]
 8003ed8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003edc:	4ba8      	ldr	r3, [pc, #672]	; (8004180 <_dtoa_r+0x308>)
 8003ede:	ea33 0308 	bics.w	r3, r3, r8
 8003ee2:	d11b      	bne.n	8003f1c <_dtoa_r+0xa4>
 8003ee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ee6:	f242 730f 	movw	r3, #9999	; 0x270f
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	9b00      	ldr	r3, [sp, #0]
 8003eee:	b923      	cbnz	r3, 8003efa <_dtoa_r+0x82>
 8003ef0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	f000 8578 	beq.w	80049ea <_dtoa_r+0xb72>
 8003efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003efc:	b953      	cbnz	r3, 8003f14 <_dtoa_r+0x9c>
 8003efe:	4ba1      	ldr	r3, [pc, #644]	; (8004184 <_dtoa_r+0x30c>)
 8003f00:	e021      	b.n	8003f46 <_dtoa_r+0xce>
 8003f02:	4ba1      	ldr	r3, [pc, #644]	; (8004188 <_dtoa_r+0x310>)
 8003f04:	9302      	str	r3, [sp, #8]
 8003f06:	3308      	adds	r3, #8
 8003f08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	9802      	ldr	r0, [sp, #8]
 8003f0e:	b017      	add	sp, #92	; 0x5c
 8003f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f14:	4b9b      	ldr	r3, [pc, #620]	; (8004184 <_dtoa_r+0x30c>)
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	3303      	adds	r3, #3
 8003f1a:	e7f5      	b.n	8003f08 <_dtoa_r+0x90>
 8003f1c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2300      	movs	r3, #0
 8003f24:	4630      	mov	r0, r6
 8003f26:	4639      	mov	r1, r7
 8003f28:	f7fc fdca 	bl	8000ac0 <__aeabi_dcmpeq>
 8003f2c:	4681      	mov	r9, r0
 8003f2e:	b160      	cbz	r0, 8003f4a <_dtoa_r+0xd2>
 8003f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003f32:	2301      	movs	r3, #1
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8553 	beq.w	80049e4 <_dtoa_r+0xb6c>
 8003f3e:	4b93      	ldr	r3, [pc, #588]	; (800418c <_dtoa_r+0x314>)
 8003f40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f42:	6013      	str	r3, [r2, #0]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	9302      	str	r3, [sp, #8]
 8003f48:	e7e0      	b.n	8003f0c <_dtoa_r+0x94>
 8003f4a:	aa14      	add	r2, sp, #80	; 0x50
 8003f4c:	a915      	add	r1, sp, #84	; 0x54
 8003f4e:	ec47 6b10 	vmov	d0, r6, r7
 8003f52:	4620      	mov	r0, r4
 8003f54:	f001 f801 	bl	8004f5a <__d2b>
 8003f58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003f5c:	4682      	mov	sl, r0
 8003f5e:	2d00      	cmp	r5, #0
 8003f60:	d07e      	beq.n	8004060 <_dtoa_r+0x1e8>
 8003f62:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003f66:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003f70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f74:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4b85      	ldr	r3, [pc, #532]	; (8004190 <_dtoa_r+0x318>)
 8003f7c:	f7fc f984 	bl	8000288 <__aeabi_dsub>
 8003f80:	a379      	add	r3, pc, #484	; (adr r3, 8004168 <_dtoa_r+0x2f0>)
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f7fc fb33 	bl	80005f0 <__aeabi_dmul>
 8003f8a:	a379      	add	r3, pc, #484	; (adr r3, 8004170 <_dtoa_r+0x2f8>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	f7fc f97c 	bl	800028c <__adddf3>
 8003f94:	4606      	mov	r6, r0
 8003f96:	4628      	mov	r0, r5
 8003f98:	460f      	mov	r7, r1
 8003f9a:	f7fc fac3 	bl	8000524 <__aeabi_i2d>
 8003f9e:	a376      	add	r3, pc, #472	; (adr r3, 8004178 <_dtoa_r+0x300>)
 8003fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa4:	f7fc fb24 	bl	80005f0 <__aeabi_dmul>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4630      	mov	r0, r6
 8003fae:	4639      	mov	r1, r7
 8003fb0:	f7fc f96c 	bl	800028c <__adddf3>
 8003fb4:	4606      	mov	r6, r0
 8003fb6:	460f      	mov	r7, r1
 8003fb8:	f7fc fdca 	bl	8000b50 <__aeabi_d2iz>
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	4683      	mov	fp, r0
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	4639      	mov	r1, r7
 8003fc6:	f7fc fd85 	bl	8000ad4 <__aeabi_dcmplt>
 8003fca:	b158      	cbz	r0, 8003fe4 <_dtoa_r+0x16c>
 8003fcc:	4658      	mov	r0, fp
 8003fce:	f7fc faa9 	bl	8000524 <__aeabi_i2d>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	4639      	mov	r1, r7
 8003fda:	f7fc fd71 	bl	8000ac0 <__aeabi_dcmpeq>
 8003fde:	b908      	cbnz	r0, 8003fe4 <_dtoa_r+0x16c>
 8003fe0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003fe4:	f1bb 0f16 	cmp.w	fp, #22
 8003fe8:	d859      	bhi.n	800409e <_dtoa_r+0x226>
 8003fea:	496a      	ldr	r1, [pc, #424]	; (8004194 <_dtoa_r+0x31c>)
 8003fec:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ff8:	f7fc fd8a 	bl	8000b10 <__aeabi_dcmpgt>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d050      	beq.n	80040a2 <_dtoa_r+0x22a>
 8004000:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004004:	2300      	movs	r3, #0
 8004006:	930e      	str	r3, [sp, #56]	; 0x38
 8004008:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800400a:	1b5d      	subs	r5, r3, r5
 800400c:	1e6b      	subs	r3, r5, #1
 800400e:	9306      	str	r3, [sp, #24]
 8004010:	bf45      	ittet	mi
 8004012:	f1c5 0301 	rsbmi	r3, r5, #1
 8004016:	9305      	strmi	r3, [sp, #20]
 8004018:	2300      	movpl	r3, #0
 800401a:	2300      	movmi	r3, #0
 800401c:	bf4c      	ite	mi
 800401e:	9306      	strmi	r3, [sp, #24]
 8004020:	9305      	strpl	r3, [sp, #20]
 8004022:	f1bb 0f00 	cmp.w	fp, #0
 8004026:	db3e      	blt.n	80040a6 <_dtoa_r+0x22e>
 8004028:	9b06      	ldr	r3, [sp, #24]
 800402a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800402e:	445b      	add	r3, fp
 8004030:	9306      	str	r3, [sp, #24]
 8004032:	2300      	movs	r3, #0
 8004034:	9308      	str	r3, [sp, #32]
 8004036:	9b07      	ldr	r3, [sp, #28]
 8004038:	2b09      	cmp	r3, #9
 800403a:	f200 80af 	bhi.w	800419c <_dtoa_r+0x324>
 800403e:	2b05      	cmp	r3, #5
 8004040:	bfc4      	itt	gt
 8004042:	3b04      	subgt	r3, #4
 8004044:	9307      	strgt	r3, [sp, #28]
 8004046:	9b07      	ldr	r3, [sp, #28]
 8004048:	f1a3 0302 	sub.w	r3, r3, #2
 800404c:	bfcc      	ite	gt
 800404e:	2600      	movgt	r6, #0
 8004050:	2601      	movle	r6, #1
 8004052:	2b03      	cmp	r3, #3
 8004054:	f200 80ae 	bhi.w	80041b4 <_dtoa_r+0x33c>
 8004058:	e8df f003 	tbb	[pc, r3]
 800405c:	772f8482 	.word	0x772f8482
 8004060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004062:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004064:	441d      	add	r5, r3
 8004066:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800406a:	2b20      	cmp	r3, #32
 800406c:	dd11      	ble.n	8004092 <_dtoa_r+0x21a>
 800406e:	9a00      	ldr	r2, [sp, #0]
 8004070:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004074:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004078:	fa22 f000 	lsr.w	r0, r2, r0
 800407c:	fa08 f303 	lsl.w	r3, r8, r3
 8004080:	4318      	orrs	r0, r3
 8004082:	f7fc fa3f 	bl	8000504 <__aeabi_ui2d>
 8004086:	2301      	movs	r3, #1
 8004088:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800408c:	3d01      	subs	r5, #1
 800408e:	9312      	str	r3, [sp, #72]	; 0x48
 8004090:	e772      	b.n	8003f78 <_dtoa_r+0x100>
 8004092:	f1c3 0020 	rsb	r0, r3, #32
 8004096:	9b00      	ldr	r3, [sp, #0]
 8004098:	fa03 f000 	lsl.w	r0, r3, r0
 800409c:	e7f1      	b.n	8004082 <_dtoa_r+0x20a>
 800409e:	2301      	movs	r3, #1
 80040a0:	e7b1      	b.n	8004006 <_dtoa_r+0x18e>
 80040a2:	900e      	str	r0, [sp, #56]	; 0x38
 80040a4:	e7b0      	b.n	8004008 <_dtoa_r+0x190>
 80040a6:	9b05      	ldr	r3, [sp, #20]
 80040a8:	eba3 030b 	sub.w	r3, r3, fp
 80040ac:	9305      	str	r3, [sp, #20]
 80040ae:	f1cb 0300 	rsb	r3, fp, #0
 80040b2:	9308      	str	r3, [sp, #32]
 80040b4:	2300      	movs	r3, #0
 80040b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040b8:	e7bd      	b.n	8004036 <_dtoa_r+0x1be>
 80040ba:	2301      	movs	r3, #1
 80040bc:	9309      	str	r3, [sp, #36]	; 0x24
 80040be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	dd7a      	ble.n	80041ba <_dtoa_r+0x342>
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	9303      	str	r3, [sp, #12]
 80040c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80040ca:	2200      	movs	r2, #0
 80040cc:	606a      	str	r2, [r5, #4]
 80040ce:	2104      	movs	r1, #4
 80040d0:	f101 0214 	add.w	r2, r1, #20
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d975      	bls.n	80041c4 <_dtoa_r+0x34c>
 80040d8:	6869      	ldr	r1, [r5, #4]
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 fcbb 	bl	8004a56 <_Balloc>
 80040e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040e2:	6028      	str	r0, [r5, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	9302      	str	r3, [sp, #8]
 80040e8:	9b03      	ldr	r3, [sp, #12]
 80040ea:	2b0e      	cmp	r3, #14
 80040ec:	f200 80e5 	bhi.w	80042ba <_dtoa_r+0x442>
 80040f0:	2e00      	cmp	r6, #0
 80040f2:	f000 80e2 	beq.w	80042ba <_dtoa_r+0x442>
 80040f6:	ed9d 7b00 	vldr	d7, [sp]
 80040fa:	f1bb 0f00 	cmp.w	fp, #0
 80040fe:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004102:	dd74      	ble.n	80041ee <_dtoa_r+0x376>
 8004104:	4a23      	ldr	r2, [pc, #140]	; (8004194 <_dtoa_r+0x31c>)
 8004106:	f00b 030f 	and.w	r3, fp, #15
 800410a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800410e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004112:	06f0      	lsls	r0, r6, #27
 8004114:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004118:	d559      	bpl.n	80041ce <_dtoa_r+0x356>
 800411a:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <_dtoa_r+0x320>)
 800411c:	ec51 0b17 	vmov	r0, r1, d7
 8004120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004124:	f7fc fb8e 	bl	8000844 <__aeabi_ddiv>
 8004128:	e9cd 0100 	strd	r0, r1, [sp]
 800412c:	f006 060f 	and.w	r6, r6, #15
 8004130:	2503      	movs	r5, #3
 8004132:	4f19      	ldr	r7, [pc, #100]	; (8004198 <_dtoa_r+0x320>)
 8004134:	2e00      	cmp	r6, #0
 8004136:	d14c      	bne.n	80041d2 <_dtoa_r+0x35a>
 8004138:	4642      	mov	r2, r8
 800413a:	464b      	mov	r3, r9
 800413c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004140:	f7fc fb80 	bl	8000844 <__aeabi_ddiv>
 8004144:	e9cd 0100 	strd	r0, r1, [sp]
 8004148:	e06a      	b.n	8004220 <_dtoa_r+0x3a8>
 800414a:	2301      	movs	r3, #1
 800414c:	9309      	str	r3, [sp, #36]	; 0x24
 800414e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004150:	445b      	add	r3, fp
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	3301      	adds	r3, #1
 8004156:	2b01      	cmp	r3, #1
 8004158:	9303      	str	r3, [sp, #12]
 800415a:	bfb8      	it	lt
 800415c:	2301      	movlt	r3, #1
 800415e:	e7b3      	b.n	80040c8 <_dtoa_r+0x250>
 8004160:	2300      	movs	r3, #0
 8004162:	e7ab      	b.n	80040bc <_dtoa_r+0x244>
 8004164:	2300      	movs	r3, #0
 8004166:	e7f1      	b.n	800414c <_dtoa_r+0x2d4>
 8004168:	636f4361 	.word	0x636f4361
 800416c:	3fd287a7 	.word	0x3fd287a7
 8004170:	8b60c8b3 	.word	0x8b60c8b3
 8004174:	3fc68a28 	.word	0x3fc68a28
 8004178:	509f79fb 	.word	0x509f79fb
 800417c:	3fd34413 	.word	0x3fd34413
 8004180:	7ff00000 	.word	0x7ff00000
 8004184:	08005581 	.word	0x08005581
 8004188:	08005578 	.word	0x08005578
 800418c:	08005555 	.word	0x08005555
 8004190:	3ff80000 	.word	0x3ff80000
 8004194:	080055b0 	.word	0x080055b0
 8004198:	08005588 	.word	0x08005588
 800419c:	2601      	movs	r6, #1
 800419e:	2300      	movs	r3, #0
 80041a0:	9307      	str	r3, [sp, #28]
 80041a2:	9609      	str	r6, [sp, #36]	; 0x24
 80041a4:	f04f 33ff 	mov.w	r3, #4294967295
 80041a8:	9304      	str	r3, [sp, #16]
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2312      	movs	r3, #18
 80041b0:	920a      	str	r2, [sp, #40]	; 0x28
 80041b2:	e789      	b.n	80040c8 <_dtoa_r+0x250>
 80041b4:	2301      	movs	r3, #1
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	e7f4      	b.n	80041a4 <_dtoa_r+0x32c>
 80041ba:	2301      	movs	r3, #1
 80041bc:	9304      	str	r3, [sp, #16]
 80041be:	9303      	str	r3, [sp, #12]
 80041c0:	461a      	mov	r2, r3
 80041c2:	e7f5      	b.n	80041b0 <_dtoa_r+0x338>
 80041c4:	686a      	ldr	r2, [r5, #4]
 80041c6:	3201      	adds	r2, #1
 80041c8:	606a      	str	r2, [r5, #4]
 80041ca:	0049      	lsls	r1, r1, #1
 80041cc:	e780      	b.n	80040d0 <_dtoa_r+0x258>
 80041ce:	2502      	movs	r5, #2
 80041d0:	e7af      	b.n	8004132 <_dtoa_r+0x2ba>
 80041d2:	07f1      	lsls	r1, r6, #31
 80041d4:	d508      	bpl.n	80041e8 <_dtoa_r+0x370>
 80041d6:	4640      	mov	r0, r8
 80041d8:	4649      	mov	r1, r9
 80041da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041de:	f7fc fa07 	bl	80005f0 <__aeabi_dmul>
 80041e2:	3501      	adds	r5, #1
 80041e4:	4680      	mov	r8, r0
 80041e6:	4689      	mov	r9, r1
 80041e8:	1076      	asrs	r6, r6, #1
 80041ea:	3708      	adds	r7, #8
 80041ec:	e7a2      	b.n	8004134 <_dtoa_r+0x2bc>
 80041ee:	f000 809d 	beq.w	800432c <_dtoa_r+0x4b4>
 80041f2:	f1cb 0600 	rsb	r6, fp, #0
 80041f6:	4b9f      	ldr	r3, [pc, #636]	; (8004474 <_dtoa_r+0x5fc>)
 80041f8:	4f9f      	ldr	r7, [pc, #636]	; (8004478 <_dtoa_r+0x600>)
 80041fa:	f006 020f 	and.w	r2, r6, #15
 80041fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800420a:	f7fc f9f1 	bl	80005f0 <__aeabi_dmul>
 800420e:	e9cd 0100 	strd	r0, r1, [sp]
 8004212:	1136      	asrs	r6, r6, #4
 8004214:	2300      	movs	r3, #0
 8004216:	2502      	movs	r5, #2
 8004218:	2e00      	cmp	r6, #0
 800421a:	d17c      	bne.n	8004316 <_dtoa_r+0x49e>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d191      	bne.n	8004144 <_dtoa_r+0x2cc>
 8004220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8084 	beq.w	8004330 <_dtoa_r+0x4b8>
 8004228:	e9dd 8900 	ldrd	r8, r9, [sp]
 800422c:	2200      	movs	r2, #0
 800422e:	4b93      	ldr	r3, [pc, #588]	; (800447c <_dtoa_r+0x604>)
 8004230:	4640      	mov	r0, r8
 8004232:	4649      	mov	r1, r9
 8004234:	f7fc fc4e 	bl	8000ad4 <__aeabi_dcmplt>
 8004238:	2800      	cmp	r0, #0
 800423a:	d079      	beq.n	8004330 <_dtoa_r+0x4b8>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d076      	beq.n	8004330 <_dtoa_r+0x4b8>
 8004242:	9b04      	ldr	r3, [sp, #16]
 8004244:	2b00      	cmp	r3, #0
 8004246:	dd34      	ble.n	80042b2 <_dtoa_r+0x43a>
 8004248:	2200      	movs	r2, #0
 800424a:	4b8d      	ldr	r3, [pc, #564]	; (8004480 <_dtoa_r+0x608>)
 800424c:	4640      	mov	r0, r8
 800424e:	4649      	mov	r1, r9
 8004250:	f7fc f9ce 	bl	80005f0 <__aeabi_dmul>
 8004254:	e9cd 0100 	strd	r0, r1, [sp]
 8004258:	9e04      	ldr	r6, [sp, #16]
 800425a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800425e:	3501      	adds	r5, #1
 8004260:	4628      	mov	r0, r5
 8004262:	f7fc f95f 	bl	8000524 <__aeabi_i2d>
 8004266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800426a:	f7fc f9c1 	bl	80005f0 <__aeabi_dmul>
 800426e:	2200      	movs	r2, #0
 8004270:	4b84      	ldr	r3, [pc, #528]	; (8004484 <_dtoa_r+0x60c>)
 8004272:	f7fc f80b 	bl	800028c <__adddf3>
 8004276:	4680      	mov	r8, r0
 8004278:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800427c:	2e00      	cmp	r6, #0
 800427e:	d15a      	bne.n	8004336 <_dtoa_r+0x4be>
 8004280:	2200      	movs	r2, #0
 8004282:	4b81      	ldr	r3, [pc, #516]	; (8004488 <_dtoa_r+0x610>)
 8004284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004288:	f7fb fffe 	bl	8000288 <__aeabi_dsub>
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	e9cd 0100 	strd	r0, r1, [sp]
 8004294:	f7fc fc3c 	bl	8000b10 <__aeabi_dcmpgt>
 8004298:	2800      	cmp	r0, #0
 800429a:	f040 829b 	bne.w	80047d4 <_dtoa_r+0x95c>
 800429e:	4642      	mov	r2, r8
 80042a0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80042a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042a8:	f7fc fc14 	bl	8000ad4 <__aeabi_dcmplt>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	f040 828f 	bne.w	80047d0 <_dtoa_r+0x958>
 80042b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80042b6:	e9cd 2300 	strd	r2, r3, [sp]
 80042ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f2c0 8150 	blt.w	8004562 <_dtoa_r+0x6ea>
 80042c2:	f1bb 0f0e 	cmp.w	fp, #14
 80042c6:	f300 814c 	bgt.w	8004562 <_dtoa_r+0x6ea>
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <_dtoa_r+0x5fc>)
 80042cc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80042d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f280 80da 	bge.w	8004490 <_dtoa_r+0x618>
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f300 80d6 	bgt.w	8004490 <_dtoa_r+0x618>
 80042e4:	f040 8273 	bne.w	80047ce <_dtoa_r+0x956>
 80042e8:	2200      	movs	r2, #0
 80042ea:	4b67      	ldr	r3, [pc, #412]	; (8004488 <_dtoa_r+0x610>)
 80042ec:	4640      	mov	r0, r8
 80042ee:	4649      	mov	r1, r9
 80042f0:	f7fc f97e 	bl	80005f0 <__aeabi_dmul>
 80042f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042f8:	f7fc fc00 	bl	8000afc <__aeabi_dcmpge>
 80042fc:	9e03      	ldr	r6, [sp, #12]
 80042fe:	4637      	mov	r7, r6
 8004300:	2800      	cmp	r0, #0
 8004302:	f040 824a 	bne.w	800479a <_dtoa_r+0x922>
 8004306:	9b02      	ldr	r3, [sp, #8]
 8004308:	9a02      	ldr	r2, [sp, #8]
 800430a:	1c5d      	adds	r5, r3, #1
 800430c:	2331      	movs	r3, #49	; 0x31
 800430e:	7013      	strb	r3, [r2, #0]
 8004310:	f10b 0b01 	add.w	fp, fp, #1
 8004314:	e245      	b.n	80047a2 <_dtoa_r+0x92a>
 8004316:	07f2      	lsls	r2, r6, #31
 8004318:	d505      	bpl.n	8004326 <_dtoa_r+0x4ae>
 800431a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800431e:	f7fc f967 	bl	80005f0 <__aeabi_dmul>
 8004322:	3501      	adds	r5, #1
 8004324:	2301      	movs	r3, #1
 8004326:	1076      	asrs	r6, r6, #1
 8004328:	3708      	adds	r7, #8
 800432a:	e775      	b.n	8004218 <_dtoa_r+0x3a0>
 800432c:	2502      	movs	r5, #2
 800432e:	e777      	b.n	8004220 <_dtoa_r+0x3a8>
 8004330:	465f      	mov	r7, fp
 8004332:	9e03      	ldr	r6, [sp, #12]
 8004334:	e794      	b.n	8004260 <_dtoa_r+0x3e8>
 8004336:	9a02      	ldr	r2, [sp, #8]
 8004338:	4b4e      	ldr	r3, [pc, #312]	; (8004474 <_dtoa_r+0x5fc>)
 800433a:	4432      	add	r2, r6
 800433c:	9213      	str	r2, [sp, #76]	; 0x4c
 800433e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004340:	1e71      	subs	r1, r6, #1
 8004342:	2a00      	cmp	r2, #0
 8004344:	d048      	beq.n	80043d8 <_dtoa_r+0x560>
 8004346:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	2000      	movs	r0, #0
 8004350:	494e      	ldr	r1, [pc, #312]	; (800448c <_dtoa_r+0x614>)
 8004352:	f7fc fa77 	bl	8000844 <__aeabi_ddiv>
 8004356:	4642      	mov	r2, r8
 8004358:	464b      	mov	r3, r9
 800435a:	f7fb ff95 	bl	8000288 <__aeabi_dsub>
 800435e:	9d02      	ldr	r5, [sp, #8]
 8004360:	4680      	mov	r8, r0
 8004362:	4689      	mov	r9, r1
 8004364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004368:	f7fc fbf2 	bl	8000b50 <__aeabi_d2iz>
 800436c:	4606      	mov	r6, r0
 800436e:	f7fc f8d9 	bl	8000524 <__aeabi_i2d>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800437a:	f7fb ff85 	bl	8000288 <__aeabi_dsub>
 800437e:	3630      	adds	r6, #48	; 0x30
 8004380:	f805 6b01 	strb.w	r6, [r5], #1
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	e9cd 0100 	strd	r0, r1, [sp]
 800438c:	f7fc fba2 	bl	8000ad4 <__aeabi_dcmplt>
 8004390:	2800      	cmp	r0, #0
 8004392:	d165      	bne.n	8004460 <_dtoa_r+0x5e8>
 8004394:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004398:	2000      	movs	r0, #0
 800439a:	4938      	ldr	r1, [pc, #224]	; (800447c <_dtoa_r+0x604>)
 800439c:	f7fb ff74 	bl	8000288 <__aeabi_dsub>
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	f7fc fb96 	bl	8000ad4 <__aeabi_dcmplt>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	f040 80ba 	bne.w	8004522 <_dtoa_r+0x6aa>
 80043ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80043b0:	429d      	cmp	r5, r3
 80043b2:	f43f af7e 	beq.w	80042b2 <_dtoa_r+0x43a>
 80043b6:	2200      	movs	r2, #0
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <_dtoa_r+0x608>)
 80043ba:	4640      	mov	r0, r8
 80043bc:	4649      	mov	r1, r9
 80043be:	f7fc f917 	bl	80005f0 <__aeabi_dmul>
 80043c2:	2200      	movs	r2, #0
 80043c4:	4680      	mov	r8, r0
 80043c6:	4689      	mov	r9, r1
 80043c8:	4b2d      	ldr	r3, [pc, #180]	; (8004480 <_dtoa_r+0x608>)
 80043ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043ce:	f7fc f90f 	bl	80005f0 <__aeabi_dmul>
 80043d2:	e9cd 0100 	strd	r0, r1, [sp]
 80043d6:	e7c5      	b.n	8004364 <_dtoa_r+0x4ec>
 80043d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043e4:	f7fc f904 	bl	80005f0 <__aeabi_dmul>
 80043e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043ec:	9d02      	ldr	r5, [sp, #8]
 80043ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043f2:	f7fc fbad 	bl	8000b50 <__aeabi_d2iz>
 80043f6:	4606      	mov	r6, r0
 80043f8:	f7fc f894 	bl	8000524 <__aeabi_i2d>
 80043fc:	3630      	adds	r6, #48	; 0x30
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004406:	f7fb ff3f 	bl	8000288 <__aeabi_dsub>
 800440a:	f805 6b01 	strb.w	r6, [r5], #1
 800440e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004410:	42ab      	cmp	r3, r5
 8004412:	4680      	mov	r8, r0
 8004414:	4689      	mov	r9, r1
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	d125      	bne.n	8004468 <_dtoa_r+0x5f0>
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <_dtoa_r+0x614>)
 800441e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004422:	f7fb ff33 	bl	800028c <__adddf3>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4640      	mov	r0, r8
 800442c:	4649      	mov	r1, r9
 800442e:	f7fc fb6f 	bl	8000b10 <__aeabi_dcmpgt>
 8004432:	2800      	cmp	r0, #0
 8004434:	d175      	bne.n	8004522 <_dtoa_r+0x6aa>
 8004436:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800443a:	2000      	movs	r0, #0
 800443c:	4913      	ldr	r1, [pc, #76]	; (800448c <_dtoa_r+0x614>)
 800443e:	f7fb ff23 	bl	8000288 <__aeabi_dsub>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4640      	mov	r0, r8
 8004448:	4649      	mov	r1, r9
 800444a:	f7fc fb43 	bl	8000ad4 <__aeabi_dcmplt>
 800444e:	2800      	cmp	r0, #0
 8004450:	f43f af2f 	beq.w	80042b2 <_dtoa_r+0x43a>
 8004454:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004458:	2b30      	cmp	r3, #48	; 0x30
 800445a:	f105 32ff 	add.w	r2, r5, #4294967295
 800445e:	d001      	beq.n	8004464 <_dtoa_r+0x5ec>
 8004460:	46bb      	mov	fp, r7
 8004462:	e04d      	b.n	8004500 <_dtoa_r+0x688>
 8004464:	4615      	mov	r5, r2
 8004466:	e7f5      	b.n	8004454 <_dtoa_r+0x5dc>
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <_dtoa_r+0x608>)
 800446a:	f7fc f8c1 	bl	80005f0 <__aeabi_dmul>
 800446e:	e9cd 0100 	strd	r0, r1, [sp]
 8004472:	e7bc      	b.n	80043ee <_dtoa_r+0x576>
 8004474:	080055b0 	.word	0x080055b0
 8004478:	08005588 	.word	0x08005588
 800447c:	3ff00000 	.word	0x3ff00000
 8004480:	40240000 	.word	0x40240000
 8004484:	401c0000 	.word	0x401c0000
 8004488:	40140000 	.word	0x40140000
 800448c:	3fe00000 	.word	0x3fe00000
 8004490:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004494:	9d02      	ldr	r5, [sp, #8]
 8004496:	4642      	mov	r2, r8
 8004498:	464b      	mov	r3, r9
 800449a:	4630      	mov	r0, r6
 800449c:	4639      	mov	r1, r7
 800449e:	f7fc f9d1 	bl	8000844 <__aeabi_ddiv>
 80044a2:	f7fc fb55 	bl	8000b50 <__aeabi_d2iz>
 80044a6:	9000      	str	r0, [sp, #0]
 80044a8:	f7fc f83c 	bl	8000524 <__aeabi_i2d>
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	f7fc f89e 	bl	80005f0 <__aeabi_dmul>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4630      	mov	r0, r6
 80044ba:	4639      	mov	r1, r7
 80044bc:	f7fb fee4 	bl	8000288 <__aeabi_dsub>
 80044c0:	9e00      	ldr	r6, [sp, #0]
 80044c2:	9f03      	ldr	r7, [sp, #12]
 80044c4:	3630      	adds	r6, #48	; 0x30
 80044c6:	f805 6b01 	strb.w	r6, [r5], #1
 80044ca:	9e02      	ldr	r6, [sp, #8]
 80044cc:	1bae      	subs	r6, r5, r6
 80044ce:	42b7      	cmp	r7, r6
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	d138      	bne.n	8004548 <_dtoa_r+0x6d0>
 80044d6:	f7fb fed9 	bl	800028c <__adddf3>
 80044da:	4606      	mov	r6, r0
 80044dc:	460f      	mov	r7, r1
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4640      	mov	r0, r8
 80044e4:	4649      	mov	r1, r9
 80044e6:	f7fc faf5 	bl	8000ad4 <__aeabi_dcmplt>
 80044ea:	b9c8      	cbnz	r0, 8004520 <_dtoa_r+0x6a8>
 80044ec:	4632      	mov	r2, r6
 80044ee:	463b      	mov	r3, r7
 80044f0:	4640      	mov	r0, r8
 80044f2:	4649      	mov	r1, r9
 80044f4:	f7fc fae4 	bl	8000ac0 <__aeabi_dcmpeq>
 80044f8:	b110      	cbz	r0, 8004500 <_dtoa_r+0x688>
 80044fa:	9b00      	ldr	r3, [sp, #0]
 80044fc:	07db      	lsls	r3, r3, #31
 80044fe:	d40f      	bmi.n	8004520 <_dtoa_r+0x6a8>
 8004500:	4651      	mov	r1, sl
 8004502:	4620      	mov	r0, r4
 8004504:	f000 fadb 	bl	8004abe <_Bfree>
 8004508:	2300      	movs	r3, #0
 800450a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800450c:	702b      	strb	r3, [r5, #0]
 800450e:	f10b 0301 	add.w	r3, fp, #1
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004516:	2b00      	cmp	r3, #0
 8004518:	f43f acf8 	beq.w	8003f0c <_dtoa_r+0x94>
 800451c:	601d      	str	r5, [r3, #0]
 800451e:	e4f5      	b.n	8003f0c <_dtoa_r+0x94>
 8004520:	465f      	mov	r7, fp
 8004522:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004526:	2a39      	cmp	r2, #57	; 0x39
 8004528:	f105 33ff 	add.w	r3, r5, #4294967295
 800452c:	d106      	bne.n	800453c <_dtoa_r+0x6c4>
 800452e:	9a02      	ldr	r2, [sp, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <_dtoa_r+0x6cc>
 8004534:	2330      	movs	r3, #48	; 0x30
 8004536:	7013      	strb	r3, [r2, #0]
 8004538:	3701      	adds	r7, #1
 800453a:	4613      	mov	r3, r2
 800453c:	781a      	ldrb	r2, [r3, #0]
 800453e:	3201      	adds	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
 8004542:	e78d      	b.n	8004460 <_dtoa_r+0x5e8>
 8004544:	461d      	mov	r5, r3
 8004546:	e7ec      	b.n	8004522 <_dtoa_r+0x6aa>
 8004548:	2200      	movs	r2, #0
 800454a:	4ba4      	ldr	r3, [pc, #656]	; (80047dc <_dtoa_r+0x964>)
 800454c:	f7fc f850 	bl	80005f0 <__aeabi_dmul>
 8004550:	2200      	movs	r2, #0
 8004552:	2300      	movs	r3, #0
 8004554:	4606      	mov	r6, r0
 8004556:	460f      	mov	r7, r1
 8004558:	f7fc fab2 	bl	8000ac0 <__aeabi_dcmpeq>
 800455c:	2800      	cmp	r0, #0
 800455e:	d09a      	beq.n	8004496 <_dtoa_r+0x61e>
 8004560:	e7ce      	b.n	8004500 <_dtoa_r+0x688>
 8004562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004564:	2a00      	cmp	r2, #0
 8004566:	f000 80cd 	beq.w	8004704 <_dtoa_r+0x88c>
 800456a:	9a07      	ldr	r2, [sp, #28]
 800456c:	2a01      	cmp	r2, #1
 800456e:	f300 80af 	bgt.w	80046d0 <_dtoa_r+0x858>
 8004572:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004574:	2a00      	cmp	r2, #0
 8004576:	f000 80a7 	beq.w	80046c8 <_dtoa_r+0x850>
 800457a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800457e:	9e08      	ldr	r6, [sp, #32]
 8004580:	9d05      	ldr	r5, [sp, #20]
 8004582:	9a05      	ldr	r2, [sp, #20]
 8004584:	441a      	add	r2, r3
 8004586:	9205      	str	r2, [sp, #20]
 8004588:	9a06      	ldr	r2, [sp, #24]
 800458a:	2101      	movs	r1, #1
 800458c:	441a      	add	r2, r3
 800458e:	4620      	mov	r0, r4
 8004590:	9206      	str	r2, [sp, #24]
 8004592:	f000 fb34 	bl	8004bfe <__i2b>
 8004596:	4607      	mov	r7, r0
 8004598:	2d00      	cmp	r5, #0
 800459a:	dd0c      	ble.n	80045b6 <_dtoa_r+0x73e>
 800459c:	9b06      	ldr	r3, [sp, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	dd09      	ble.n	80045b6 <_dtoa_r+0x73e>
 80045a2:	42ab      	cmp	r3, r5
 80045a4:	9a05      	ldr	r2, [sp, #20]
 80045a6:	bfa8      	it	ge
 80045a8:	462b      	movge	r3, r5
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	9205      	str	r2, [sp, #20]
 80045ae:	9a06      	ldr	r2, [sp, #24]
 80045b0:	1aed      	subs	r5, r5, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	9306      	str	r3, [sp, #24]
 80045b6:	9b08      	ldr	r3, [sp, #32]
 80045b8:	b1f3      	cbz	r3, 80045f8 <_dtoa_r+0x780>
 80045ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a5 	beq.w	800470c <_dtoa_r+0x894>
 80045c2:	2e00      	cmp	r6, #0
 80045c4:	dd10      	ble.n	80045e8 <_dtoa_r+0x770>
 80045c6:	4639      	mov	r1, r7
 80045c8:	4632      	mov	r2, r6
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 fbae 	bl	8004d2c <__pow5mult>
 80045d0:	4652      	mov	r2, sl
 80045d2:	4601      	mov	r1, r0
 80045d4:	4607      	mov	r7, r0
 80045d6:	4620      	mov	r0, r4
 80045d8:	f000 fb1a 	bl	8004c10 <__multiply>
 80045dc:	4651      	mov	r1, sl
 80045de:	4680      	mov	r8, r0
 80045e0:	4620      	mov	r0, r4
 80045e2:	f000 fa6c 	bl	8004abe <_Bfree>
 80045e6:	46c2      	mov	sl, r8
 80045e8:	9b08      	ldr	r3, [sp, #32]
 80045ea:	1b9a      	subs	r2, r3, r6
 80045ec:	d004      	beq.n	80045f8 <_dtoa_r+0x780>
 80045ee:	4651      	mov	r1, sl
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 fb9b 	bl	8004d2c <__pow5mult>
 80045f6:	4682      	mov	sl, r0
 80045f8:	2101      	movs	r1, #1
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 faff 	bl	8004bfe <__i2b>
 8004600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004602:	2b00      	cmp	r3, #0
 8004604:	4606      	mov	r6, r0
 8004606:	f340 8083 	ble.w	8004710 <_dtoa_r+0x898>
 800460a:	461a      	mov	r2, r3
 800460c:	4601      	mov	r1, r0
 800460e:	4620      	mov	r0, r4
 8004610:	f000 fb8c 	bl	8004d2c <__pow5mult>
 8004614:	9b07      	ldr	r3, [sp, #28]
 8004616:	2b01      	cmp	r3, #1
 8004618:	4606      	mov	r6, r0
 800461a:	dd7c      	ble.n	8004716 <_dtoa_r+0x89e>
 800461c:	f04f 0800 	mov.w	r8, #0
 8004620:	6933      	ldr	r3, [r6, #16]
 8004622:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004626:	6918      	ldr	r0, [r3, #16]
 8004628:	f000 fa9b 	bl	8004b62 <__hi0bits>
 800462c:	f1c0 0020 	rsb	r0, r0, #32
 8004630:	9b06      	ldr	r3, [sp, #24]
 8004632:	4418      	add	r0, r3
 8004634:	f010 001f 	ands.w	r0, r0, #31
 8004638:	f000 8096 	beq.w	8004768 <_dtoa_r+0x8f0>
 800463c:	f1c0 0320 	rsb	r3, r0, #32
 8004640:	2b04      	cmp	r3, #4
 8004642:	f340 8087 	ble.w	8004754 <_dtoa_r+0x8dc>
 8004646:	9b05      	ldr	r3, [sp, #20]
 8004648:	f1c0 001c 	rsb	r0, r0, #28
 800464c:	4403      	add	r3, r0
 800464e:	9305      	str	r3, [sp, #20]
 8004650:	9b06      	ldr	r3, [sp, #24]
 8004652:	4405      	add	r5, r0
 8004654:	4403      	add	r3, r0
 8004656:	9306      	str	r3, [sp, #24]
 8004658:	9b05      	ldr	r3, [sp, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	dd05      	ble.n	800466a <_dtoa_r+0x7f2>
 800465e:	4651      	mov	r1, sl
 8004660:	461a      	mov	r2, r3
 8004662:	4620      	mov	r0, r4
 8004664:	f000 fbb0 	bl	8004dc8 <__lshift>
 8004668:	4682      	mov	sl, r0
 800466a:	9b06      	ldr	r3, [sp, #24]
 800466c:	2b00      	cmp	r3, #0
 800466e:	dd05      	ble.n	800467c <_dtoa_r+0x804>
 8004670:	4631      	mov	r1, r6
 8004672:	461a      	mov	r2, r3
 8004674:	4620      	mov	r0, r4
 8004676:	f000 fba7 	bl	8004dc8 <__lshift>
 800467a:	4606      	mov	r6, r0
 800467c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800467e:	2b00      	cmp	r3, #0
 8004680:	d074      	beq.n	800476c <_dtoa_r+0x8f4>
 8004682:	4631      	mov	r1, r6
 8004684:	4650      	mov	r0, sl
 8004686:	f000 fbf0 	bl	8004e6a <__mcmp>
 800468a:	2800      	cmp	r0, #0
 800468c:	da6e      	bge.n	800476c <_dtoa_r+0x8f4>
 800468e:	2300      	movs	r3, #0
 8004690:	4651      	mov	r1, sl
 8004692:	220a      	movs	r2, #10
 8004694:	4620      	mov	r0, r4
 8004696:	f000 fa29 	bl	8004aec <__multadd>
 800469a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046a0:	4682      	mov	sl, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 81a8 	beq.w	80049f8 <_dtoa_r+0xb80>
 80046a8:	2300      	movs	r3, #0
 80046aa:	4639      	mov	r1, r7
 80046ac:	220a      	movs	r2, #10
 80046ae:	4620      	mov	r0, r4
 80046b0:	f000 fa1c 	bl	8004aec <__multadd>
 80046b4:	9b04      	ldr	r3, [sp, #16]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	4607      	mov	r7, r0
 80046ba:	f300 80c8 	bgt.w	800484e <_dtoa_r+0x9d6>
 80046be:	9b07      	ldr	r3, [sp, #28]
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	f340 80c4 	ble.w	800484e <_dtoa_r+0x9d6>
 80046c6:	e059      	b.n	800477c <_dtoa_r+0x904>
 80046c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80046ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80046ce:	e756      	b.n	800457e <_dtoa_r+0x706>
 80046d0:	9b03      	ldr	r3, [sp, #12]
 80046d2:	1e5e      	subs	r6, r3, #1
 80046d4:	9b08      	ldr	r3, [sp, #32]
 80046d6:	42b3      	cmp	r3, r6
 80046d8:	bfbf      	itttt	lt
 80046da:	9b08      	ldrlt	r3, [sp, #32]
 80046dc:	9608      	strlt	r6, [sp, #32]
 80046de:	1af2      	sublt	r2, r6, r3
 80046e0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80046e2:	bfb6      	itet	lt
 80046e4:	189b      	addlt	r3, r3, r2
 80046e6:	1b9e      	subge	r6, r3, r6
 80046e8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80046ea:	9b03      	ldr	r3, [sp, #12]
 80046ec:	bfb8      	it	lt
 80046ee:	2600      	movlt	r6, #0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bfb9      	ittee	lt
 80046f4:	9b05      	ldrlt	r3, [sp, #20]
 80046f6:	9a03      	ldrlt	r2, [sp, #12]
 80046f8:	9d05      	ldrge	r5, [sp, #20]
 80046fa:	9b03      	ldrge	r3, [sp, #12]
 80046fc:	bfbc      	itt	lt
 80046fe:	1a9d      	sublt	r5, r3, r2
 8004700:	2300      	movlt	r3, #0
 8004702:	e73e      	b.n	8004582 <_dtoa_r+0x70a>
 8004704:	9e08      	ldr	r6, [sp, #32]
 8004706:	9d05      	ldr	r5, [sp, #20]
 8004708:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800470a:	e745      	b.n	8004598 <_dtoa_r+0x720>
 800470c:	9a08      	ldr	r2, [sp, #32]
 800470e:	e76e      	b.n	80045ee <_dtoa_r+0x776>
 8004710:	9b07      	ldr	r3, [sp, #28]
 8004712:	2b01      	cmp	r3, #1
 8004714:	dc19      	bgt.n	800474a <_dtoa_r+0x8d2>
 8004716:	9b00      	ldr	r3, [sp, #0]
 8004718:	b9bb      	cbnz	r3, 800474a <_dtoa_r+0x8d2>
 800471a:	9b01      	ldr	r3, [sp, #4]
 800471c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004720:	b99b      	cbnz	r3, 800474a <_dtoa_r+0x8d2>
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004728:	0d1b      	lsrs	r3, r3, #20
 800472a:	051b      	lsls	r3, r3, #20
 800472c:	b183      	cbz	r3, 8004750 <_dtoa_r+0x8d8>
 800472e:	9b05      	ldr	r3, [sp, #20]
 8004730:	3301      	adds	r3, #1
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	9b06      	ldr	r3, [sp, #24]
 8004736:	3301      	adds	r3, #1
 8004738:	9306      	str	r3, [sp, #24]
 800473a:	f04f 0801 	mov.w	r8, #1
 800473e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004740:	2b00      	cmp	r3, #0
 8004742:	f47f af6d 	bne.w	8004620 <_dtoa_r+0x7a8>
 8004746:	2001      	movs	r0, #1
 8004748:	e772      	b.n	8004630 <_dtoa_r+0x7b8>
 800474a:	f04f 0800 	mov.w	r8, #0
 800474e:	e7f6      	b.n	800473e <_dtoa_r+0x8c6>
 8004750:	4698      	mov	r8, r3
 8004752:	e7f4      	b.n	800473e <_dtoa_r+0x8c6>
 8004754:	d080      	beq.n	8004658 <_dtoa_r+0x7e0>
 8004756:	9a05      	ldr	r2, [sp, #20]
 8004758:	331c      	adds	r3, #28
 800475a:	441a      	add	r2, r3
 800475c:	9205      	str	r2, [sp, #20]
 800475e:	9a06      	ldr	r2, [sp, #24]
 8004760:	441a      	add	r2, r3
 8004762:	441d      	add	r5, r3
 8004764:	4613      	mov	r3, r2
 8004766:	e776      	b.n	8004656 <_dtoa_r+0x7de>
 8004768:	4603      	mov	r3, r0
 800476a:	e7f4      	b.n	8004756 <_dtoa_r+0x8de>
 800476c:	9b03      	ldr	r3, [sp, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	dc36      	bgt.n	80047e0 <_dtoa_r+0x968>
 8004772:	9b07      	ldr	r3, [sp, #28]
 8004774:	2b02      	cmp	r3, #2
 8004776:	dd33      	ble.n	80047e0 <_dtoa_r+0x968>
 8004778:	9b03      	ldr	r3, [sp, #12]
 800477a:	9304      	str	r3, [sp, #16]
 800477c:	9b04      	ldr	r3, [sp, #16]
 800477e:	b963      	cbnz	r3, 800479a <_dtoa_r+0x922>
 8004780:	4631      	mov	r1, r6
 8004782:	2205      	movs	r2, #5
 8004784:	4620      	mov	r0, r4
 8004786:	f000 f9b1 	bl	8004aec <__multadd>
 800478a:	4601      	mov	r1, r0
 800478c:	4606      	mov	r6, r0
 800478e:	4650      	mov	r0, sl
 8004790:	f000 fb6b 	bl	8004e6a <__mcmp>
 8004794:	2800      	cmp	r0, #0
 8004796:	f73f adb6 	bgt.w	8004306 <_dtoa_r+0x48e>
 800479a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800479c:	9d02      	ldr	r5, [sp, #8]
 800479e:	ea6f 0b03 	mvn.w	fp, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	4631      	mov	r1, r6
 80047a8:	4620      	mov	r0, r4
 80047aa:	f000 f988 	bl	8004abe <_Bfree>
 80047ae:	2f00      	cmp	r7, #0
 80047b0:	f43f aea6 	beq.w	8004500 <_dtoa_r+0x688>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	b12b      	cbz	r3, 80047c4 <_dtoa_r+0x94c>
 80047b8:	42bb      	cmp	r3, r7
 80047ba:	d003      	beq.n	80047c4 <_dtoa_r+0x94c>
 80047bc:	4619      	mov	r1, r3
 80047be:	4620      	mov	r0, r4
 80047c0:	f000 f97d 	bl	8004abe <_Bfree>
 80047c4:	4639      	mov	r1, r7
 80047c6:	4620      	mov	r0, r4
 80047c8:	f000 f979 	bl	8004abe <_Bfree>
 80047cc:	e698      	b.n	8004500 <_dtoa_r+0x688>
 80047ce:	2600      	movs	r6, #0
 80047d0:	4637      	mov	r7, r6
 80047d2:	e7e2      	b.n	800479a <_dtoa_r+0x922>
 80047d4:	46bb      	mov	fp, r7
 80047d6:	4637      	mov	r7, r6
 80047d8:	e595      	b.n	8004306 <_dtoa_r+0x48e>
 80047da:	bf00      	nop
 80047dc:	40240000 	.word	0x40240000
 80047e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047e2:	bb93      	cbnz	r3, 800484a <_dtoa_r+0x9d2>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	9304      	str	r3, [sp, #16]
 80047e8:	9d02      	ldr	r5, [sp, #8]
 80047ea:	4631      	mov	r1, r6
 80047ec:	4650      	mov	r0, sl
 80047ee:	f7ff fab7 	bl	8003d60 <quorem>
 80047f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047f6:	f805 9b01 	strb.w	r9, [r5], #1
 80047fa:	9b02      	ldr	r3, [sp, #8]
 80047fc:	9a04      	ldr	r2, [sp, #16]
 80047fe:	1aeb      	subs	r3, r5, r3
 8004800:	429a      	cmp	r2, r3
 8004802:	f300 80dc 	bgt.w	80049be <_dtoa_r+0xb46>
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	2a01      	cmp	r2, #1
 800480a:	bfac      	ite	ge
 800480c:	189b      	addge	r3, r3, r2
 800480e:	3301      	addlt	r3, #1
 8004810:	4698      	mov	r8, r3
 8004812:	2300      	movs	r3, #0
 8004814:	9303      	str	r3, [sp, #12]
 8004816:	4651      	mov	r1, sl
 8004818:	2201      	movs	r2, #1
 800481a:	4620      	mov	r0, r4
 800481c:	f000 fad4 	bl	8004dc8 <__lshift>
 8004820:	4631      	mov	r1, r6
 8004822:	4682      	mov	sl, r0
 8004824:	f000 fb21 	bl	8004e6a <__mcmp>
 8004828:	2800      	cmp	r0, #0
 800482a:	f300 808d 	bgt.w	8004948 <_dtoa_r+0xad0>
 800482e:	d103      	bne.n	8004838 <_dtoa_r+0x9c0>
 8004830:	f019 0f01 	tst.w	r9, #1
 8004834:	f040 8088 	bne.w	8004948 <_dtoa_r+0xad0>
 8004838:	4645      	mov	r5, r8
 800483a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800483e:	2b30      	cmp	r3, #48	; 0x30
 8004840:	f105 32ff 	add.w	r2, r5, #4294967295
 8004844:	d1af      	bne.n	80047a6 <_dtoa_r+0x92e>
 8004846:	4615      	mov	r5, r2
 8004848:	e7f7      	b.n	800483a <_dtoa_r+0x9c2>
 800484a:	9b03      	ldr	r3, [sp, #12]
 800484c:	9304      	str	r3, [sp, #16]
 800484e:	2d00      	cmp	r5, #0
 8004850:	dd05      	ble.n	800485e <_dtoa_r+0x9e6>
 8004852:	4639      	mov	r1, r7
 8004854:	462a      	mov	r2, r5
 8004856:	4620      	mov	r0, r4
 8004858:	f000 fab6 	bl	8004dc8 <__lshift>
 800485c:	4607      	mov	r7, r0
 800485e:	f1b8 0f00 	cmp.w	r8, #0
 8004862:	d04c      	beq.n	80048fe <_dtoa_r+0xa86>
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	4620      	mov	r0, r4
 8004868:	f000 f8f5 	bl	8004a56 <_Balloc>
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	3202      	adds	r2, #2
 8004870:	4605      	mov	r5, r0
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	f107 010c 	add.w	r1, r7, #12
 8004878:	300c      	adds	r0, #12
 800487a:	f000 f8e1 	bl	8004a40 <memcpy>
 800487e:	2201      	movs	r2, #1
 8004880:	4629      	mov	r1, r5
 8004882:	4620      	mov	r0, r4
 8004884:	f000 faa0 	bl	8004dc8 <__lshift>
 8004888:	9b00      	ldr	r3, [sp, #0]
 800488a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800488e:	9703      	str	r7, [sp, #12]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	4607      	mov	r7, r0
 8004896:	9305      	str	r3, [sp, #20]
 8004898:	4631      	mov	r1, r6
 800489a:	4650      	mov	r0, sl
 800489c:	f7ff fa60 	bl	8003d60 <quorem>
 80048a0:	9903      	ldr	r1, [sp, #12]
 80048a2:	4605      	mov	r5, r0
 80048a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80048a8:	4650      	mov	r0, sl
 80048aa:	f000 fade 	bl	8004e6a <__mcmp>
 80048ae:	463a      	mov	r2, r7
 80048b0:	9000      	str	r0, [sp, #0]
 80048b2:	4631      	mov	r1, r6
 80048b4:	4620      	mov	r0, r4
 80048b6:	f000 faf2 	bl	8004e9e <__mdiff>
 80048ba:	68c3      	ldr	r3, [r0, #12]
 80048bc:	4602      	mov	r2, r0
 80048be:	bb03      	cbnz	r3, 8004902 <_dtoa_r+0xa8a>
 80048c0:	4601      	mov	r1, r0
 80048c2:	9006      	str	r0, [sp, #24]
 80048c4:	4650      	mov	r0, sl
 80048c6:	f000 fad0 	bl	8004e6a <__mcmp>
 80048ca:	9a06      	ldr	r2, [sp, #24]
 80048cc:	4603      	mov	r3, r0
 80048ce:	4611      	mov	r1, r2
 80048d0:	4620      	mov	r0, r4
 80048d2:	9306      	str	r3, [sp, #24]
 80048d4:	f000 f8f3 	bl	8004abe <_Bfree>
 80048d8:	9b06      	ldr	r3, [sp, #24]
 80048da:	b9a3      	cbnz	r3, 8004906 <_dtoa_r+0xa8e>
 80048dc:	9a07      	ldr	r2, [sp, #28]
 80048de:	b992      	cbnz	r2, 8004906 <_dtoa_r+0xa8e>
 80048e0:	9a05      	ldr	r2, [sp, #20]
 80048e2:	b982      	cbnz	r2, 8004906 <_dtoa_r+0xa8e>
 80048e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80048e8:	d029      	beq.n	800493e <_dtoa_r+0xac6>
 80048ea:	9b00      	ldr	r3, [sp, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	dd01      	ble.n	80048f4 <_dtoa_r+0xa7c>
 80048f0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80048f4:	f108 0501 	add.w	r5, r8, #1
 80048f8:	f888 9000 	strb.w	r9, [r8]
 80048fc:	e753      	b.n	80047a6 <_dtoa_r+0x92e>
 80048fe:	4638      	mov	r0, r7
 8004900:	e7c2      	b.n	8004888 <_dtoa_r+0xa10>
 8004902:	2301      	movs	r3, #1
 8004904:	e7e3      	b.n	80048ce <_dtoa_r+0xa56>
 8004906:	9a00      	ldr	r2, [sp, #0]
 8004908:	2a00      	cmp	r2, #0
 800490a:	db04      	blt.n	8004916 <_dtoa_r+0xa9e>
 800490c:	d125      	bne.n	800495a <_dtoa_r+0xae2>
 800490e:	9a07      	ldr	r2, [sp, #28]
 8004910:	bb1a      	cbnz	r2, 800495a <_dtoa_r+0xae2>
 8004912:	9a05      	ldr	r2, [sp, #20]
 8004914:	bb0a      	cbnz	r2, 800495a <_dtoa_r+0xae2>
 8004916:	2b00      	cmp	r3, #0
 8004918:	ddec      	ble.n	80048f4 <_dtoa_r+0xa7c>
 800491a:	4651      	mov	r1, sl
 800491c:	2201      	movs	r2, #1
 800491e:	4620      	mov	r0, r4
 8004920:	f000 fa52 	bl	8004dc8 <__lshift>
 8004924:	4631      	mov	r1, r6
 8004926:	4682      	mov	sl, r0
 8004928:	f000 fa9f 	bl	8004e6a <__mcmp>
 800492c:	2800      	cmp	r0, #0
 800492e:	dc03      	bgt.n	8004938 <_dtoa_r+0xac0>
 8004930:	d1e0      	bne.n	80048f4 <_dtoa_r+0xa7c>
 8004932:	f019 0f01 	tst.w	r9, #1
 8004936:	d0dd      	beq.n	80048f4 <_dtoa_r+0xa7c>
 8004938:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800493c:	d1d8      	bne.n	80048f0 <_dtoa_r+0xa78>
 800493e:	2339      	movs	r3, #57	; 0x39
 8004940:	f888 3000 	strb.w	r3, [r8]
 8004944:	f108 0801 	add.w	r8, r8, #1
 8004948:	4645      	mov	r5, r8
 800494a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800494e:	2b39      	cmp	r3, #57	; 0x39
 8004950:	f105 32ff 	add.w	r2, r5, #4294967295
 8004954:	d03b      	beq.n	80049ce <_dtoa_r+0xb56>
 8004956:	3301      	adds	r3, #1
 8004958:	e040      	b.n	80049dc <_dtoa_r+0xb64>
 800495a:	2b00      	cmp	r3, #0
 800495c:	f108 0501 	add.w	r5, r8, #1
 8004960:	dd05      	ble.n	800496e <_dtoa_r+0xaf6>
 8004962:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004966:	d0ea      	beq.n	800493e <_dtoa_r+0xac6>
 8004968:	f109 0901 	add.w	r9, r9, #1
 800496c:	e7c4      	b.n	80048f8 <_dtoa_r+0xa80>
 800496e:	9b02      	ldr	r3, [sp, #8]
 8004970:	9a04      	ldr	r2, [sp, #16]
 8004972:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004976:	1aeb      	subs	r3, r5, r3
 8004978:	4293      	cmp	r3, r2
 800497a:	46a8      	mov	r8, r5
 800497c:	f43f af4b 	beq.w	8004816 <_dtoa_r+0x99e>
 8004980:	4651      	mov	r1, sl
 8004982:	2300      	movs	r3, #0
 8004984:	220a      	movs	r2, #10
 8004986:	4620      	mov	r0, r4
 8004988:	f000 f8b0 	bl	8004aec <__multadd>
 800498c:	9b03      	ldr	r3, [sp, #12]
 800498e:	9903      	ldr	r1, [sp, #12]
 8004990:	42bb      	cmp	r3, r7
 8004992:	4682      	mov	sl, r0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	f04f 020a 	mov.w	r2, #10
 800499c:	4620      	mov	r0, r4
 800499e:	d104      	bne.n	80049aa <_dtoa_r+0xb32>
 80049a0:	f000 f8a4 	bl	8004aec <__multadd>
 80049a4:	9003      	str	r0, [sp, #12]
 80049a6:	4607      	mov	r7, r0
 80049a8:	e776      	b.n	8004898 <_dtoa_r+0xa20>
 80049aa:	f000 f89f 	bl	8004aec <__multadd>
 80049ae:	2300      	movs	r3, #0
 80049b0:	9003      	str	r0, [sp, #12]
 80049b2:	220a      	movs	r2, #10
 80049b4:	4639      	mov	r1, r7
 80049b6:	4620      	mov	r0, r4
 80049b8:	f000 f898 	bl	8004aec <__multadd>
 80049bc:	e7f3      	b.n	80049a6 <_dtoa_r+0xb2e>
 80049be:	4651      	mov	r1, sl
 80049c0:	2300      	movs	r3, #0
 80049c2:	220a      	movs	r2, #10
 80049c4:	4620      	mov	r0, r4
 80049c6:	f000 f891 	bl	8004aec <__multadd>
 80049ca:	4682      	mov	sl, r0
 80049cc:	e70d      	b.n	80047ea <_dtoa_r+0x972>
 80049ce:	9b02      	ldr	r3, [sp, #8]
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d105      	bne.n	80049e0 <_dtoa_r+0xb68>
 80049d4:	9a02      	ldr	r2, [sp, #8]
 80049d6:	f10b 0b01 	add.w	fp, fp, #1
 80049da:	2331      	movs	r3, #49	; 0x31
 80049dc:	7013      	strb	r3, [r2, #0]
 80049de:	e6e2      	b.n	80047a6 <_dtoa_r+0x92e>
 80049e0:	4615      	mov	r5, r2
 80049e2:	e7b2      	b.n	800494a <_dtoa_r+0xad2>
 80049e4:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <_dtoa_r+0xb94>)
 80049e6:	f7ff baae 	b.w	8003f46 <_dtoa_r+0xce>
 80049ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f47f aa88 	bne.w	8003f02 <_dtoa_r+0x8a>
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <_dtoa_r+0xb98>)
 80049f4:	f7ff baa7 	b.w	8003f46 <_dtoa_r+0xce>
 80049f8:	9b04      	ldr	r3, [sp, #16]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f73f aef4 	bgt.w	80047e8 <_dtoa_r+0x970>
 8004a00:	9b07      	ldr	r3, [sp, #28]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	f77f aef0 	ble.w	80047e8 <_dtoa_r+0x970>
 8004a08:	e6b8      	b.n	800477c <_dtoa_r+0x904>
 8004a0a:	bf00      	nop
 8004a0c:	08005554 	.word	0x08005554
 8004a10:	08005578 	.word	0x08005578

08004a14 <_localeconv_r>:
 8004a14:	4b04      	ldr	r3, [pc, #16]	; (8004a28 <_localeconv_r+0x14>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6a18      	ldr	r0, [r3, #32]
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <_localeconv_r+0x18>)
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	bf08      	it	eq
 8004a20:	4618      	moveq	r0, r3
 8004a22:	30f0      	adds	r0, #240	; 0xf0
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	2000002c 	.word	0x2000002c
 8004a2c:	20000090 	.word	0x20000090

08004a30 <malloc>:
 8004a30:	4b02      	ldr	r3, [pc, #8]	; (8004a3c <malloc+0xc>)
 8004a32:	4601      	mov	r1, r0
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	f000 bb3b 	b.w	80050b0 <_malloc_r>
 8004a3a:	bf00      	nop
 8004a3c:	2000002c 	.word	0x2000002c

08004a40 <memcpy>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	1e43      	subs	r3, r0, #1
 8004a44:	440a      	add	r2, r1
 8004a46:	4291      	cmp	r1, r2
 8004a48:	d100      	bne.n	8004a4c <memcpy+0xc>
 8004a4a:	bd10      	pop	{r4, pc}
 8004a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a54:	e7f7      	b.n	8004a46 <memcpy+0x6>

08004a56 <_Balloc>:
 8004a56:	b570      	push	{r4, r5, r6, lr}
 8004a58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	460e      	mov	r6, r1
 8004a5e:	b93d      	cbnz	r5, 8004a70 <_Balloc+0x1a>
 8004a60:	2010      	movs	r0, #16
 8004a62:	f7ff ffe5 	bl	8004a30 <malloc>
 8004a66:	6260      	str	r0, [r4, #36]	; 0x24
 8004a68:	6045      	str	r5, [r0, #4]
 8004a6a:	6085      	str	r5, [r0, #8]
 8004a6c:	6005      	str	r5, [r0, #0]
 8004a6e:	60c5      	str	r5, [r0, #12]
 8004a70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a72:	68eb      	ldr	r3, [r5, #12]
 8004a74:	b183      	cbz	r3, 8004a98 <_Balloc+0x42>
 8004a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004a7e:	b9b8      	cbnz	r0, 8004ab0 <_Balloc+0x5a>
 8004a80:	2101      	movs	r1, #1
 8004a82:	fa01 f506 	lsl.w	r5, r1, r6
 8004a86:	1d6a      	adds	r2, r5, #5
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f000 fab4 	bl	8004ff8 <_calloc_r>
 8004a90:	b160      	cbz	r0, 8004aac <_Balloc+0x56>
 8004a92:	6046      	str	r6, [r0, #4]
 8004a94:	6085      	str	r5, [r0, #8]
 8004a96:	e00e      	b.n	8004ab6 <_Balloc+0x60>
 8004a98:	2221      	movs	r2, #33	; 0x21
 8004a9a:	2104      	movs	r1, #4
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 faab 	bl	8004ff8 <_calloc_r>
 8004aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aa4:	60e8      	str	r0, [r5, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e4      	bne.n	8004a76 <_Balloc+0x20>
 8004aac:	2000      	movs	r0, #0
 8004aae:	bd70      	pop	{r4, r5, r6, pc}
 8004ab0:	6802      	ldr	r2, [r0, #0]
 8004ab2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	6103      	str	r3, [r0, #16]
 8004aba:	60c3      	str	r3, [r0, #12]
 8004abc:	bd70      	pop	{r4, r5, r6, pc}

08004abe <_Bfree>:
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460d      	mov	r5, r1
 8004ac6:	b93c      	cbnz	r4, 8004ad8 <_Bfree+0x1a>
 8004ac8:	2010      	movs	r0, #16
 8004aca:	f7ff ffb1 	bl	8004a30 <malloc>
 8004ace:	6270      	str	r0, [r6, #36]	; 0x24
 8004ad0:	6044      	str	r4, [r0, #4]
 8004ad2:	6084      	str	r4, [r0, #8]
 8004ad4:	6004      	str	r4, [r0, #0]
 8004ad6:	60c4      	str	r4, [r0, #12]
 8004ad8:	b13d      	cbz	r5, 8004aea <_Bfree+0x2c>
 8004ada:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004adc:	686a      	ldr	r2, [r5, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ae4:	6029      	str	r1, [r5, #0]
 8004ae6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004aea:	bd70      	pop	{r4, r5, r6, pc}

08004aec <__multadd>:
 8004aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af0:	690d      	ldr	r5, [r1, #16]
 8004af2:	461f      	mov	r7, r3
 8004af4:	4606      	mov	r6, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	f101 0e14 	add.w	lr, r1, #20
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8de 0000 	ldr.w	r0, [lr]
 8004b02:	b281      	uxth	r1, r0
 8004b04:	fb02 7101 	mla	r1, r2, r1, r7
 8004b08:	0c0f      	lsrs	r7, r1, #16
 8004b0a:	0c00      	lsrs	r0, r0, #16
 8004b0c:	fb02 7000 	mla	r0, r2, r0, r7
 8004b10:	b289      	uxth	r1, r1
 8004b12:	3301      	adds	r3, #1
 8004b14:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004b18:	429d      	cmp	r5, r3
 8004b1a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004b1e:	f84e 1b04 	str.w	r1, [lr], #4
 8004b22:	dcec      	bgt.n	8004afe <__multadd+0x12>
 8004b24:	b1d7      	cbz	r7, 8004b5c <__multadd+0x70>
 8004b26:	68a3      	ldr	r3, [r4, #8]
 8004b28:	429d      	cmp	r5, r3
 8004b2a:	db12      	blt.n	8004b52 <__multadd+0x66>
 8004b2c:	6861      	ldr	r1, [r4, #4]
 8004b2e:	4630      	mov	r0, r6
 8004b30:	3101      	adds	r1, #1
 8004b32:	f7ff ff90 	bl	8004a56 <_Balloc>
 8004b36:	6922      	ldr	r2, [r4, #16]
 8004b38:	3202      	adds	r2, #2
 8004b3a:	f104 010c 	add.w	r1, r4, #12
 8004b3e:	4680      	mov	r8, r0
 8004b40:	0092      	lsls	r2, r2, #2
 8004b42:	300c      	adds	r0, #12
 8004b44:	f7ff ff7c 	bl	8004a40 <memcpy>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff ffb7 	bl	8004abe <_Bfree>
 8004b50:	4644      	mov	r4, r8
 8004b52:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004b56:	3501      	adds	r5, #1
 8004b58:	615f      	str	r7, [r3, #20]
 8004b5a:	6125      	str	r5, [r4, #16]
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004b62 <__hi0bits>:
 8004b62:	0c02      	lsrs	r2, r0, #16
 8004b64:	0412      	lsls	r2, r2, #16
 8004b66:	4603      	mov	r3, r0
 8004b68:	b9b2      	cbnz	r2, 8004b98 <__hi0bits+0x36>
 8004b6a:	0403      	lsls	r3, r0, #16
 8004b6c:	2010      	movs	r0, #16
 8004b6e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004b72:	bf04      	itt	eq
 8004b74:	021b      	lsleq	r3, r3, #8
 8004b76:	3008      	addeq	r0, #8
 8004b78:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004b7c:	bf04      	itt	eq
 8004b7e:	011b      	lsleq	r3, r3, #4
 8004b80:	3004      	addeq	r0, #4
 8004b82:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004b86:	bf04      	itt	eq
 8004b88:	009b      	lsleq	r3, r3, #2
 8004b8a:	3002      	addeq	r0, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	db06      	blt.n	8004b9e <__hi0bits+0x3c>
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	d503      	bpl.n	8004b9c <__hi0bits+0x3a>
 8004b94:	3001      	adds	r0, #1
 8004b96:	4770      	bx	lr
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e7e8      	b.n	8004b6e <__hi0bits+0xc>
 8004b9c:	2020      	movs	r0, #32
 8004b9e:	4770      	bx	lr

08004ba0 <__lo0bits>:
 8004ba0:	6803      	ldr	r3, [r0, #0]
 8004ba2:	f013 0207 	ands.w	r2, r3, #7
 8004ba6:	4601      	mov	r1, r0
 8004ba8:	d00b      	beq.n	8004bc2 <__lo0bits+0x22>
 8004baa:	07da      	lsls	r2, r3, #31
 8004bac:	d423      	bmi.n	8004bf6 <__lo0bits+0x56>
 8004bae:	0798      	lsls	r0, r3, #30
 8004bb0:	bf49      	itett	mi
 8004bb2:	085b      	lsrmi	r3, r3, #1
 8004bb4:	089b      	lsrpl	r3, r3, #2
 8004bb6:	2001      	movmi	r0, #1
 8004bb8:	600b      	strmi	r3, [r1, #0]
 8004bba:	bf5c      	itt	pl
 8004bbc:	600b      	strpl	r3, [r1, #0]
 8004bbe:	2002      	movpl	r0, #2
 8004bc0:	4770      	bx	lr
 8004bc2:	b298      	uxth	r0, r3
 8004bc4:	b9a8      	cbnz	r0, 8004bf2 <__lo0bits+0x52>
 8004bc6:	0c1b      	lsrs	r3, r3, #16
 8004bc8:	2010      	movs	r0, #16
 8004bca:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004bce:	bf04      	itt	eq
 8004bd0:	0a1b      	lsreq	r3, r3, #8
 8004bd2:	3008      	addeq	r0, #8
 8004bd4:	071a      	lsls	r2, r3, #28
 8004bd6:	bf04      	itt	eq
 8004bd8:	091b      	lsreq	r3, r3, #4
 8004bda:	3004      	addeq	r0, #4
 8004bdc:	079a      	lsls	r2, r3, #30
 8004bde:	bf04      	itt	eq
 8004be0:	089b      	lsreq	r3, r3, #2
 8004be2:	3002      	addeq	r0, #2
 8004be4:	07da      	lsls	r2, r3, #31
 8004be6:	d402      	bmi.n	8004bee <__lo0bits+0x4e>
 8004be8:	085b      	lsrs	r3, r3, #1
 8004bea:	d006      	beq.n	8004bfa <__lo0bits+0x5a>
 8004bec:	3001      	adds	r0, #1
 8004bee:	600b      	str	r3, [r1, #0]
 8004bf0:	4770      	bx	lr
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	e7e9      	b.n	8004bca <__lo0bits+0x2a>
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	4770      	bx	lr
 8004bfa:	2020      	movs	r0, #32
 8004bfc:	4770      	bx	lr

08004bfe <__i2b>:
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	460c      	mov	r4, r1
 8004c02:	2101      	movs	r1, #1
 8004c04:	f7ff ff27 	bl	8004a56 <_Balloc>
 8004c08:	2201      	movs	r2, #1
 8004c0a:	6144      	str	r4, [r0, #20]
 8004c0c:	6102      	str	r2, [r0, #16]
 8004c0e:	bd10      	pop	{r4, pc}

08004c10 <__multiply>:
 8004c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	4614      	mov	r4, r2
 8004c16:	690a      	ldr	r2, [r1, #16]
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	bfb8      	it	lt
 8004c1e:	460b      	movlt	r3, r1
 8004c20:	4689      	mov	r9, r1
 8004c22:	bfbc      	itt	lt
 8004c24:	46a1      	movlt	r9, r4
 8004c26:	461c      	movlt	r4, r3
 8004c28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004c2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004c30:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004c34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004c38:	eb07 060a 	add.w	r6, r7, sl
 8004c3c:	429e      	cmp	r6, r3
 8004c3e:	bfc8      	it	gt
 8004c40:	3101      	addgt	r1, #1
 8004c42:	f7ff ff08 	bl	8004a56 <_Balloc>
 8004c46:	f100 0514 	add.w	r5, r0, #20
 8004c4a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004c4e:	462b      	mov	r3, r5
 8004c50:	2200      	movs	r2, #0
 8004c52:	4543      	cmp	r3, r8
 8004c54:	d316      	bcc.n	8004c84 <__multiply+0x74>
 8004c56:	f104 0214 	add.w	r2, r4, #20
 8004c5a:	f109 0114 	add.w	r1, r9, #20
 8004c5e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004c62:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	9c01      	ldr	r4, [sp, #4]
 8004c6a:	4294      	cmp	r4, r2
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	d80c      	bhi.n	8004c8a <__multiply+0x7a>
 8004c70:	2e00      	cmp	r6, #0
 8004c72:	dd03      	ble.n	8004c7c <__multiply+0x6c>
 8004c74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d054      	beq.n	8004d26 <__multiply+0x116>
 8004c7c:	6106      	str	r6, [r0, #16]
 8004c7e:	b003      	add	sp, #12
 8004c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c84:	f843 2b04 	str.w	r2, [r3], #4
 8004c88:	e7e3      	b.n	8004c52 <__multiply+0x42>
 8004c8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8004c8e:	3204      	adds	r2, #4
 8004c90:	f1ba 0f00 	cmp.w	sl, #0
 8004c94:	d020      	beq.n	8004cd8 <__multiply+0xc8>
 8004c96:	46ae      	mov	lr, r5
 8004c98:	4689      	mov	r9, r1
 8004c9a:	f04f 0c00 	mov.w	ip, #0
 8004c9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004ca2:	f8be b000 	ldrh.w	fp, [lr]
 8004ca6:	b2a3      	uxth	r3, r4
 8004ca8:	fb0a b303 	mla	r3, sl, r3, fp
 8004cac:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004cb0:	f8de 4000 	ldr.w	r4, [lr]
 8004cb4:	4463      	add	r3, ip
 8004cb6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004cba:	fb0a c40b 	mla	r4, sl, fp, ip
 8004cbe:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004cc8:	454f      	cmp	r7, r9
 8004cca:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004cce:	f84e 3b04 	str.w	r3, [lr], #4
 8004cd2:	d8e4      	bhi.n	8004c9e <__multiply+0x8e>
 8004cd4:	f8ce c000 	str.w	ip, [lr]
 8004cd8:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004cdc:	f1b9 0f00 	cmp.w	r9, #0
 8004ce0:	d01f      	beq.n	8004d22 <__multiply+0x112>
 8004ce2:	682b      	ldr	r3, [r5, #0]
 8004ce4:	46ae      	mov	lr, r5
 8004ce6:	468c      	mov	ip, r1
 8004ce8:	f04f 0a00 	mov.w	sl, #0
 8004cec:	f8bc 4000 	ldrh.w	r4, [ip]
 8004cf0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004cf4:	fb09 b404 	mla	r4, r9, r4, fp
 8004cf8:	44a2      	add	sl, r4
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004d00:	f84e 3b04 	str.w	r3, [lr], #4
 8004d04:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d08:	f8be 4000 	ldrh.w	r4, [lr]
 8004d0c:	0c1b      	lsrs	r3, r3, #16
 8004d0e:	fb09 4303 	mla	r3, r9, r3, r4
 8004d12:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004d16:	4567      	cmp	r7, ip
 8004d18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d1c:	d8e6      	bhi.n	8004cec <__multiply+0xdc>
 8004d1e:	f8ce 3000 	str.w	r3, [lr]
 8004d22:	3504      	adds	r5, #4
 8004d24:	e7a0      	b.n	8004c68 <__multiply+0x58>
 8004d26:	3e01      	subs	r6, #1
 8004d28:	e7a2      	b.n	8004c70 <__multiply+0x60>
	...

08004d2c <__pow5mult>:
 8004d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d30:	4615      	mov	r5, r2
 8004d32:	f012 0203 	ands.w	r2, r2, #3
 8004d36:	4606      	mov	r6, r0
 8004d38:	460f      	mov	r7, r1
 8004d3a:	d007      	beq.n	8004d4c <__pow5mult+0x20>
 8004d3c:	3a01      	subs	r2, #1
 8004d3e:	4c21      	ldr	r4, [pc, #132]	; (8004dc4 <__pow5mult+0x98>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004d46:	f7ff fed1 	bl	8004aec <__multadd>
 8004d4a:	4607      	mov	r7, r0
 8004d4c:	10ad      	asrs	r5, r5, #2
 8004d4e:	d035      	beq.n	8004dbc <__pow5mult+0x90>
 8004d50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004d52:	b93c      	cbnz	r4, 8004d64 <__pow5mult+0x38>
 8004d54:	2010      	movs	r0, #16
 8004d56:	f7ff fe6b 	bl	8004a30 <malloc>
 8004d5a:	6270      	str	r0, [r6, #36]	; 0x24
 8004d5c:	6044      	str	r4, [r0, #4]
 8004d5e:	6084      	str	r4, [r0, #8]
 8004d60:	6004      	str	r4, [r0, #0]
 8004d62:	60c4      	str	r4, [r0, #12]
 8004d64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004d6c:	b94c      	cbnz	r4, 8004d82 <__pow5mult+0x56>
 8004d6e:	f240 2171 	movw	r1, #625	; 0x271
 8004d72:	4630      	mov	r0, r6
 8004d74:	f7ff ff43 	bl	8004bfe <__i2b>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8004d7e:	4604      	mov	r4, r0
 8004d80:	6003      	str	r3, [r0, #0]
 8004d82:	f04f 0800 	mov.w	r8, #0
 8004d86:	07eb      	lsls	r3, r5, #31
 8004d88:	d50a      	bpl.n	8004da0 <__pow5mult+0x74>
 8004d8a:	4639      	mov	r1, r7
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f7ff ff3e 	bl	8004c10 <__multiply>
 8004d94:	4639      	mov	r1, r7
 8004d96:	4681      	mov	r9, r0
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f7ff fe90 	bl	8004abe <_Bfree>
 8004d9e:	464f      	mov	r7, r9
 8004da0:	106d      	asrs	r5, r5, #1
 8004da2:	d00b      	beq.n	8004dbc <__pow5mult+0x90>
 8004da4:	6820      	ldr	r0, [r4, #0]
 8004da6:	b938      	cbnz	r0, 8004db8 <__pow5mult+0x8c>
 8004da8:	4622      	mov	r2, r4
 8004daa:	4621      	mov	r1, r4
 8004dac:	4630      	mov	r0, r6
 8004dae:	f7ff ff2f 	bl	8004c10 <__multiply>
 8004db2:	6020      	str	r0, [r4, #0]
 8004db4:	f8c0 8000 	str.w	r8, [r0]
 8004db8:	4604      	mov	r4, r0
 8004dba:	e7e4      	b.n	8004d86 <__pow5mult+0x5a>
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc2:	bf00      	nop
 8004dc4:	08005678 	.word	0x08005678

08004dc8 <__lshift>:
 8004dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	460c      	mov	r4, r1
 8004dce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	6849      	ldr	r1, [r1, #4]
 8004dd6:	eb0a 0903 	add.w	r9, sl, r3
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	4607      	mov	r7, r0
 8004dde:	4616      	mov	r6, r2
 8004de0:	f109 0501 	add.w	r5, r9, #1
 8004de4:	42ab      	cmp	r3, r5
 8004de6:	db31      	blt.n	8004e4c <__lshift+0x84>
 8004de8:	4638      	mov	r0, r7
 8004dea:	f7ff fe34 	bl	8004a56 <_Balloc>
 8004dee:	2200      	movs	r2, #0
 8004df0:	4680      	mov	r8, r0
 8004df2:	f100 0314 	add.w	r3, r0, #20
 8004df6:	4611      	mov	r1, r2
 8004df8:	4552      	cmp	r2, sl
 8004dfa:	db2a      	blt.n	8004e52 <__lshift+0x8a>
 8004dfc:	6920      	ldr	r0, [r4, #16]
 8004dfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004e02:	f104 0114 	add.w	r1, r4, #20
 8004e06:	f016 021f 	ands.w	r2, r6, #31
 8004e0a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004e0e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004e12:	d022      	beq.n	8004e5a <__lshift+0x92>
 8004e14:	f1c2 0c20 	rsb	ip, r2, #32
 8004e18:	2000      	movs	r0, #0
 8004e1a:	680e      	ldr	r6, [r1, #0]
 8004e1c:	4096      	lsls	r6, r2
 8004e1e:	4330      	orrs	r0, r6
 8004e20:	f843 0b04 	str.w	r0, [r3], #4
 8004e24:	f851 0b04 	ldr.w	r0, [r1], #4
 8004e28:	458e      	cmp	lr, r1
 8004e2a:	fa20 f00c 	lsr.w	r0, r0, ip
 8004e2e:	d8f4      	bhi.n	8004e1a <__lshift+0x52>
 8004e30:	6018      	str	r0, [r3, #0]
 8004e32:	b108      	cbz	r0, 8004e38 <__lshift+0x70>
 8004e34:	f109 0502 	add.w	r5, r9, #2
 8004e38:	3d01      	subs	r5, #1
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	f8c8 5010 	str.w	r5, [r8, #16]
 8004e40:	4621      	mov	r1, r4
 8004e42:	f7ff fe3c 	bl	8004abe <_Bfree>
 8004e46:	4640      	mov	r0, r8
 8004e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4c:	3101      	adds	r1, #1
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	e7c8      	b.n	8004de4 <__lshift+0x1c>
 8004e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e56:	3201      	adds	r2, #1
 8004e58:	e7ce      	b.n	8004df8 <__lshift+0x30>
 8004e5a:	3b04      	subs	r3, #4
 8004e5c:	f851 2b04 	ldr.w	r2, [r1], #4
 8004e60:	f843 2f04 	str.w	r2, [r3, #4]!
 8004e64:	458e      	cmp	lr, r1
 8004e66:	d8f9      	bhi.n	8004e5c <__lshift+0x94>
 8004e68:	e7e6      	b.n	8004e38 <__lshift+0x70>

08004e6a <__mcmp>:
 8004e6a:	6903      	ldr	r3, [r0, #16]
 8004e6c:	690a      	ldr	r2, [r1, #16]
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	b530      	push	{r4, r5, lr}
 8004e72:	d10c      	bne.n	8004e8e <__mcmp+0x24>
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	3014      	adds	r0, #20
 8004e78:	3114      	adds	r1, #20
 8004e7a:	1884      	adds	r4, r0, r2
 8004e7c:	4411      	add	r1, r2
 8004e7e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004e82:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004e86:	4295      	cmp	r5, r2
 8004e88:	d003      	beq.n	8004e92 <__mcmp+0x28>
 8004e8a:	d305      	bcc.n	8004e98 <__mcmp+0x2e>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	bd30      	pop	{r4, r5, pc}
 8004e92:	42a0      	cmp	r0, r4
 8004e94:	d3f3      	bcc.n	8004e7e <__mcmp+0x14>
 8004e96:	e7fa      	b.n	8004e8e <__mcmp+0x24>
 8004e98:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9c:	e7f7      	b.n	8004e8e <__mcmp+0x24>

08004e9e <__mdiff>:
 8004e9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea2:	460d      	mov	r5, r1
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	4614      	mov	r4, r2
 8004eac:	f7ff ffdd 	bl	8004e6a <__mcmp>
 8004eb0:	1e06      	subs	r6, r0, #0
 8004eb2:	d108      	bne.n	8004ec6 <__mdiff+0x28>
 8004eb4:	4631      	mov	r1, r6
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff fdcd 	bl	8004a56 <_Balloc>
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	6103      	str	r3, [r0, #16]
 8004ec0:	6146      	str	r6, [r0, #20]
 8004ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec6:	bfa4      	itt	ge
 8004ec8:	4623      	movge	r3, r4
 8004eca:	462c      	movge	r4, r5
 8004ecc:	4638      	mov	r0, r7
 8004ece:	6861      	ldr	r1, [r4, #4]
 8004ed0:	bfa6      	itte	ge
 8004ed2:	461d      	movge	r5, r3
 8004ed4:	2600      	movge	r6, #0
 8004ed6:	2601      	movlt	r6, #1
 8004ed8:	f7ff fdbd 	bl	8004a56 <_Balloc>
 8004edc:	692b      	ldr	r3, [r5, #16]
 8004ede:	60c6      	str	r6, [r0, #12]
 8004ee0:	6926      	ldr	r6, [r4, #16]
 8004ee2:	f105 0914 	add.w	r9, r5, #20
 8004ee6:	f104 0214 	add.w	r2, r4, #20
 8004eea:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004eee:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004ef2:	f100 0514 	add.w	r5, r0, #20
 8004ef6:	f04f 0c00 	mov.w	ip, #0
 8004efa:	f852 ab04 	ldr.w	sl, [r2], #4
 8004efe:	f859 4b04 	ldr.w	r4, [r9], #4
 8004f02:	fa1c f18a 	uxtah	r1, ip, sl
 8004f06:	b2a3      	uxth	r3, r4
 8004f08:	1ac9      	subs	r1, r1, r3
 8004f0a:	0c23      	lsrs	r3, r4, #16
 8004f0c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004f10:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004f14:	b289      	uxth	r1, r1
 8004f16:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004f1a:	45c8      	cmp	r8, r9
 8004f1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004f20:	4696      	mov	lr, r2
 8004f22:	f845 3b04 	str.w	r3, [r5], #4
 8004f26:	d8e8      	bhi.n	8004efa <__mdiff+0x5c>
 8004f28:	45be      	cmp	lr, r7
 8004f2a:	d305      	bcc.n	8004f38 <__mdiff+0x9a>
 8004f2c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004f30:	b18b      	cbz	r3, 8004f56 <__mdiff+0xb8>
 8004f32:	6106      	str	r6, [r0, #16]
 8004f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f38:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004f3c:	fa1c f381 	uxtah	r3, ip, r1
 8004f40:	141a      	asrs	r2, r3, #16
 8004f42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f50:	f845 3b04 	str.w	r3, [r5], #4
 8004f54:	e7e8      	b.n	8004f28 <__mdiff+0x8a>
 8004f56:	3e01      	subs	r6, #1
 8004f58:	e7e8      	b.n	8004f2c <__mdiff+0x8e>

08004f5a <__d2b>:
 8004f5a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004f5e:	460e      	mov	r6, r1
 8004f60:	2101      	movs	r1, #1
 8004f62:	ec59 8b10 	vmov	r8, r9, d0
 8004f66:	4615      	mov	r5, r2
 8004f68:	f7ff fd75 	bl	8004a56 <_Balloc>
 8004f6c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004f70:	4607      	mov	r7, r0
 8004f72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004f76:	bb34      	cbnz	r4, 8004fc6 <__d2b+0x6c>
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	f1b8 0f00 	cmp.w	r8, #0
 8004f7e:	d027      	beq.n	8004fd0 <__d2b+0x76>
 8004f80:	a802      	add	r0, sp, #8
 8004f82:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004f86:	f7ff fe0b 	bl	8004ba0 <__lo0bits>
 8004f8a:	9900      	ldr	r1, [sp, #0]
 8004f8c:	b1f0      	cbz	r0, 8004fcc <__d2b+0x72>
 8004f8e:	9a01      	ldr	r2, [sp, #4]
 8004f90:	f1c0 0320 	rsb	r3, r0, #32
 8004f94:	fa02 f303 	lsl.w	r3, r2, r3
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	40c2      	lsrs	r2, r0
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	9201      	str	r2, [sp, #4]
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf14      	ite	ne
 8004fa8:	2102      	movne	r1, #2
 8004faa:	2101      	moveq	r1, #1
 8004fac:	6139      	str	r1, [r7, #16]
 8004fae:	b1c4      	cbz	r4, 8004fe2 <__d2b+0x88>
 8004fb0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004fb4:	4404      	add	r4, r0
 8004fb6:	6034      	str	r4, [r6, #0]
 8004fb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004fbc:	6028      	str	r0, [r5, #0]
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	b003      	add	sp, #12
 8004fc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fca:	e7d5      	b.n	8004f78 <__d2b+0x1e>
 8004fcc:	6179      	str	r1, [r7, #20]
 8004fce:	e7e7      	b.n	8004fa0 <__d2b+0x46>
 8004fd0:	a801      	add	r0, sp, #4
 8004fd2:	f7ff fde5 	bl	8004ba0 <__lo0bits>
 8004fd6:	9b01      	ldr	r3, [sp, #4]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	2101      	movs	r1, #1
 8004fdc:	6139      	str	r1, [r7, #16]
 8004fde:	3020      	adds	r0, #32
 8004fe0:	e7e5      	b.n	8004fae <__d2b+0x54>
 8004fe2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004fe6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004fea:	6030      	str	r0, [r6, #0]
 8004fec:	6918      	ldr	r0, [r3, #16]
 8004fee:	f7ff fdb8 	bl	8004b62 <__hi0bits>
 8004ff2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004ff6:	e7e1      	b.n	8004fbc <__d2b+0x62>

08004ff8 <_calloc_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	fb02 f401 	mul.w	r4, r2, r1
 8004ffe:	4621      	mov	r1, r4
 8005000:	f000 f856 	bl	80050b0 <_malloc_r>
 8005004:	4605      	mov	r5, r0
 8005006:	b118      	cbz	r0, 8005010 <_calloc_r+0x18>
 8005008:	4622      	mov	r2, r4
 800500a:	2100      	movs	r1, #0
 800500c:	f7fe fa10 	bl	8003430 <memset>
 8005010:	4628      	mov	r0, r5
 8005012:	bd38      	pop	{r3, r4, r5, pc}

08005014 <_free_r>:
 8005014:	b538      	push	{r3, r4, r5, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	2900      	cmp	r1, #0
 800501a:	d045      	beq.n	80050a8 <_free_r+0x94>
 800501c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005020:	1f0c      	subs	r4, r1, #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	bfb8      	it	lt
 8005026:	18e4      	addlt	r4, r4, r3
 8005028:	f000 fa2c 	bl	8005484 <__malloc_lock>
 800502c:	4a1f      	ldr	r2, [pc, #124]	; (80050ac <_free_r+0x98>)
 800502e:	6813      	ldr	r3, [r2, #0]
 8005030:	4610      	mov	r0, r2
 8005032:	b933      	cbnz	r3, 8005042 <_free_r+0x2e>
 8005034:	6063      	str	r3, [r4, #4]
 8005036:	6014      	str	r4, [r2, #0]
 8005038:	4628      	mov	r0, r5
 800503a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800503e:	f000 ba22 	b.w	8005486 <__malloc_unlock>
 8005042:	42a3      	cmp	r3, r4
 8005044:	d90c      	bls.n	8005060 <_free_r+0x4c>
 8005046:	6821      	ldr	r1, [r4, #0]
 8005048:	1862      	adds	r2, r4, r1
 800504a:	4293      	cmp	r3, r2
 800504c:	bf04      	itt	eq
 800504e:	681a      	ldreq	r2, [r3, #0]
 8005050:	685b      	ldreq	r3, [r3, #4]
 8005052:	6063      	str	r3, [r4, #4]
 8005054:	bf04      	itt	eq
 8005056:	1852      	addeq	r2, r2, r1
 8005058:	6022      	streq	r2, [r4, #0]
 800505a:	6004      	str	r4, [r0, #0]
 800505c:	e7ec      	b.n	8005038 <_free_r+0x24>
 800505e:	4613      	mov	r3, r2
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	b10a      	cbz	r2, 8005068 <_free_r+0x54>
 8005064:	42a2      	cmp	r2, r4
 8005066:	d9fa      	bls.n	800505e <_free_r+0x4a>
 8005068:	6819      	ldr	r1, [r3, #0]
 800506a:	1858      	adds	r0, r3, r1
 800506c:	42a0      	cmp	r0, r4
 800506e:	d10b      	bne.n	8005088 <_free_r+0x74>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	4401      	add	r1, r0
 8005074:	1858      	adds	r0, r3, r1
 8005076:	4282      	cmp	r2, r0
 8005078:	6019      	str	r1, [r3, #0]
 800507a:	d1dd      	bne.n	8005038 <_free_r+0x24>
 800507c:	6810      	ldr	r0, [r2, #0]
 800507e:	6852      	ldr	r2, [r2, #4]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	4401      	add	r1, r0
 8005084:	6019      	str	r1, [r3, #0]
 8005086:	e7d7      	b.n	8005038 <_free_r+0x24>
 8005088:	d902      	bls.n	8005090 <_free_r+0x7c>
 800508a:	230c      	movs	r3, #12
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	e7d3      	b.n	8005038 <_free_r+0x24>
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	1821      	adds	r1, r4, r0
 8005094:	428a      	cmp	r2, r1
 8005096:	bf04      	itt	eq
 8005098:	6811      	ldreq	r1, [r2, #0]
 800509a:	6852      	ldreq	r2, [r2, #4]
 800509c:	6062      	str	r2, [r4, #4]
 800509e:	bf04      	itt	eq
 80050a0:	1809      	addeq	r1, r1, r0
 80050a2:	6021      	streq	r1, [r4, #0]
 80050a4:	605c      	str	r4, [r3, #4]
 80050a6:	e7c7      	b.n	8005038 <_free_r+0x24>
 80050a8:	bd38      	pop	{r3, r4, r5, pc}
 80050aa:	bf00      	nop
 80050ac:	2000022c 	.word	0x2000022c

080050b0 <_malloc_r>:
 80050b0:	b570      	push	{r4, r5, r6, lr}
 80050b2:	1ccd      	adds	r5, r1, #3
 80050b4:	f025 0503 	bic.w	r5, r5, #3
 80050b8:	3508      	adds	r5, #8
 80050ba:	2d0c      	cmp	r5, #12
 80050bc:	bf38      	it	cc
 80050be:	250c      	movcc	r5, #12
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	4606      	mov	r6, r0
 80050c4:	db01      	blt.n	80050ca <_malloc_r+0x1a>
 80050c6:	42a9      	cmp	r1, r5
 80050c8:	d903      	bls.n	80050d2 <_malloc_r+0x22>
 80050ca:	230c      	movs	r3, #12
 80050cc:	6033      	str	r3, [r6, #0]
 80050ce:	2000      	movs	r0, #0
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
 80050d2:	f000 f9d7 	bl	8005484 <__malloc_lock>
 80050d6:	4a23      	ldr	r2, [pc, #140]	; (8005164 <_malloc_r+0xb4>)
 80050d8:	6814      	ldr	r4, [r2, #0]
 80050da:	4621      	mov	r1, r4
 80050dc:	b991      	cbnz	r1, 8005104 <_malloc_r+0x54>
 80050de:	4c22      	ldr	r4, [pc, #136]	; (8005168 <_malloc_r+0xb8>)
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	b91b      	cbnz	r3, 80050ec <_malloc_r+0x3c>
 80050e4:	4630      	mov	r0, r6
 80050e6:	f000 f991 	bl	800540c <_sbrk_r>
 80050ea:	6020      	str	r0, [r4, #0]
 80050ec:	4629      	mov	r1, r5
 80050ee:	4630      	mov	r0, r6
 80050f0:	f000 f98c 	bl	800540c <_sbrk_r>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d126      	bne.n	8005146 <_malloc_r+0x96>
 80050f8:	230c      	movs	r3, #12
 80050fa:	6033      	str	r3, [r6, #0]
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 f9c2 	bl	8005486 <__malloc_unlock>
 8005102:	e7e4      	b.n	80050ce <_malloc_r+0x1e>
 8005104:	680b      	ldr	r3, [r1, #0]
 8005106:	1b5b      	subs	r3, r3, r5
 8005108:	d41a      	bmi.n	8005140 <_malloc_r+0x90>
 800510a:	2b0b      	cmp	r3, #11
 800510c:	d90f      	bls.n	800512e <_malloc_r+0x7e>
 800510e:	600b      	str	r3, [r1, #0]
 8005110:	50cd      	str	r5, [r1, r3]
 8005112:	18cc      	adds	r4, r1, r3
 8005114:	4630      	mov	r0, r6
 8005116:	f000 f9b6 	bl	8005486 <__malloc_unlock>
 800511a:	f104 000b 	add.w	r0, r4, #11
 800511e:	1d23      	adds	r3, r4, #4
 8005120:	f020 0007 	bic.w	r0, r0, #7
 8005124:	1ac3      	subs	r3, r0, r3
 8005126:	d01b      	beq.n	8005160 <_malloc_r+0xb0>
 8005128:	425a      	negs	r2, r3
 800512a:	50e2      	str	r2, [r4, r3]
 800512c:	bd70      	pop	{r4, r5, r6, pc}
 800512e:	428c      	cmp	r4, r1
 8005130:	bf0d      	iteet	eq
 8005132:	6863      	ldreq	r3, [r4, #4]
 8005134:	684b      	ldrne	r3, [r1, #4]
 8005136:	6063      	strne	r3, [r4, #4]
 8005138:	6013      	streq	r3, [r2, #0]
 800513a:	bf18      	it	ne
 800513c:	460c      	movne	r4, r1
 800513e:	e7e9      	b.n	8005114 <_malloc_r+0x64>
 8005140:	460c      	mov	r4, r1
 8005142:	6849      	ldr	r1, [r1, #4]
 8005144:	e7ca      	b.n	80050dc <_malloc_r+0x2c>
 8005146:	1cc4      	adds	r4, r0, #3
 8005148:	f024 0403 	bic.w	r4, r4, #3
 800514c:	42a0      	cmp	r0, r4
 800514e:	d005      	beq.n	800515c <_malloc_r+0xac>
 8005150:	1a21      	subs	r1, r4, r0
 8005152:	4630      	mov	r0, r6
 8005154:	f000 f95a 	bl	800540c <_sbrk_r>
 8005158:	3001      	adds	r0, #1
 800515a:	d0cd      	beq.n	80050f8 <_malloc_r+0x48>
 800515c:	6025      	str	r5, [r4, #0]
 800515e:	e7d9      	b.n	8005114 <_malloc_r+0x64>
 8005160:	bd70      	pop	{r4, r5, r6, pc}
 8005162:	bf00      	nop
 8005164:	2000022c 	.word	0x2000022c
 8005168:	20000230 	.word	0x20000230

0800516c <__ssputs_r>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	688e      	ldr	r6, [r1, #8]
 8005172:	429e      	cmp	r6, r3
 8005174:	4682      	mov	sl, r0
 8005176:	460c      	mov	r4, r1
 8005178:	4691      	mov	r9, r2
 800517a:	4698      	mov	r8, r3
 800517c:	d835      	bhi.n	80051ea <__ssputs_r+0x7e>
 800517e:	898a      	ldrh	r2, [r1, #12]
 8005180:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005184:	d031      	beq.n	80051ea <__ssputs_r+0x7e>
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	6909      	ldr	r1, [r1, #16]
 800518a:	1a6f      	subs	r7, r5, r1
 800518c:	6965      	ldr	r5, [r4, #20]
 800518e:	2302      	movs	r3, #2
 8005190:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005194:	fb95 f5f3 	sdiv	r5, r5, r3
 8005198:	f108 0301 	add.w	r3, r8, #1
 800519c:	443b      	add	r3, r7
 800519e:	429d      	cmp	r5, r3
 80051a0:	bf38      	it	cc
 80051a2:	461d      	movcc	r5, r3
 80051a4:	0553      	lsls	r3, r2, #21
 80051a6:	d531      	bpl.n	800520c <__ssputs_r+0xa0>
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7ff ff81 	bl	80050b0 <_malloc_r>
 80051ae:	4606      	mov	r6, r0
 80051b0:	b950      	cbnz	r0, 80051c8 <__ssputs_r+0x5c>
 80051b2:	230c      	movs	r3, #12
 80051b4:	f8ca 3000 	str.w	r3, [sl]
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c8:	463a      	mov	r2, r7
 80051ca:	6921      	ldr	r1, [r4, #16]
 80051cc:	f7ff fc38 	bl	8004a40 <memcpy>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	6126      	str	r6, [r4, #16]
 80051de:	6165      	str	r5, [r4, #20]
 80051e0:	443e      	add	r6, r7
 80051e2:	1bed      	subs	r5, r5, r7
 80051e4:	6026      	str	r6, [r4, #0]
 80051e6:	60a5      	str	r5, [r4, #8]
 80051e8:	4646      	mov	r6, r8
 80051ea:	4546      	cmp	r6, r8
 80051ec:	bf28      	it	cs
 80051ee:	4646      	movcs	r6, r8
 80051f0:	4632      	mov	r2, r6
 80051f2:	4649      	mov	r1, r9
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	f000 f92b 	bl	8005450 <memmove>
 80051fa:	68a3      	ldr	r3, [r4, #8]
 80051fc:	1b9b      	subs	r3, r3, r6
 80051fe:	60a3      	str	r3, [r4, #8]
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	441e      	add	r6, r3
 8005204:	6026      	str	r6, [r4, #0]
 8005206:	2000      	movs	r0, #0
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	462a      	mov	r2, r5
 800520e:	f000 f93b 	bl	8005488 <_realloc_r>
 8005212:	4606      	mov	r6, r0
 8005214:	2800      	cmp	r0, #0
 8005216:	d1e1      	bne.n	80051dc <__ssputs_r+0x70>
 8005218:	6921      	ldr	r1, [r4, #16]
 800521a:	4650      	mov	r0, sl
 800521c:	f7ff fefa 	bl	8005014 <_free_r>
 8005220:	e7c7      	b.n	80051b2 <__ssputs_r+0x46>
	...

08005224 <_svfiprintf_r>:
 8005224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	b09d      	sub	sp, #116	; 0x74
 800522a:	4680      	mov	r8, r0
 800522c:	9303      	str	r3, [sp, #12]
 800522e:	898b      	ldrh	r3, [r1, #12]
 8005230:	061c      	lsls	r4, r3, #24
 8005232:	460d      	mov	r5, r1
 8005234:	4616      	mov	r6, r2
 8005236:	d50f      	bpl.n	8005258 <_svfiprintf_r+0x34>
 8005238:	690b      	ldr	r3, [r1, #16]
 800523a:	b96b      	cbnz	r3, 8005258 <_svfiprintf_r+0x34>
 800523c:	2140      	movs	r1, #64	; 0x40
 800523e:	f7ff ff37 	bl	80050b0 <_malloc_r>
 8005242:	6028      	str	r0, [r5, #0]
 8005244:	6128      	str	r0, [r5, #16]
 8005246:	b928      	cbnz	r0, 8005254 <_svfiprintf_r+0x30>
 8005248:	230c      	movs	r3, #12
 800524a:	f8c8 3000 	str.w	r3, [r8]
 800524e:	f04f 30ff 	mov.w	r0, #4294967295
 8005252:	e0c5      	b.n	80053e0 <_svfiprintf_r+0x1bc>
 8005254:	2340      	movs	r3, #64	; 0x40
 8005256:	616b      	str	r3, [r5, #20]
 8005258:	2300      	movs	r3, #0
 800525a:	9309      	str	r3, [sp, #36]	; 0x24
 800525c:	2320      	movs	r3, #32
 800525e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005262:	2330      	movs	r3, #48	; 0x30
 8005264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005268:	f04f 0b01 	mov.w	fp, #1
 800526c:	4637      	mov	r7, r6
 800526e:	463c      	mov	r4, r7
 8005270:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d13c      	bne.n	80052f2 <_svfiprintf_r+0xce>
 8005278:	ebb7 0a06 	subs.w	sl, r7, r6
 800527c:	d00b      	beq.n	8005296 <_svfiprintf_r+0x72>
 800527e:	4653      	mov	r3, sl
 8005280:	4632      	mov	r2, r6
 8005282:	4629      	mov	r1, r5
 8005284:	4640      	mov	r0, r8
 8005286:	f7ff ff71 	bl	800516c <__ssputs_r>
 800528a:	3001      	adds	r0, #1
 800528c:	f000 80a3 	beq.w	80053d6 <_svfiprintf_r+0x1b2>
 8005290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005292:	4453      	add	r3, sl
 8005294:	9309      	str	r3, [sp, #36]	; 0x24
 8005296:	783b      	ldrb	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 809c 	beq.w	80053d6 <_svfiprintf_r+0x1b2>
 800529e:	2300      	movs	r3, #0
 80052a0:	f04f 32ff 	mov.w	r2, #4294967295
 80052a4:	9304      	str	r3, [sp, #16]
 80052a6:	9307      	str	r3, [sp, #28]
 80052a8:	9205      	str	r2, [sp, #20]
 80052aa:	9306      	str	r3, [sp, #24]
 80052ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052b0:	931a      	str	r3, [sp, #104]	; 0x68
 80052b2:	2205      	movs	r2, #5
 80052b4:	7821      	ldrb	r1, [r4, #0]
 80052b6:	4850      	ldr	r0, [pc, #320]	; (80053f8 <_svfiprintf_r+0x1d4>)
 80052b8:	f7fa ff92 	bl	80001e0 <memchr>
 80052bc:	1c67      	adds	r7, r4, #1
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	b9d8      	cbnz	r0, 80052fa <_svfiprintf_r+0xd6>
 80052c2:	06d9      	lsls	r1, r3, #27
 80052c4:	bf44      	itt	mi
 80052c6:	2220      	movmi	r2, #32
 80052c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052cc:	071a      	lsls	r2, r3, #28
 80052ce:	bf44      	itt	mi
 80052d0:	222b      	movmi	r2, #43	; 0x2b
 80052d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052d6:	7822      	ldrb	r2, [r4, #0]
 80052d8:	2a2a      	cmp	r2, #42	; 0x2a
 80052da:	d016      	beq.n	800530a <_svfiprintf_r+0xe6>
 80052dc:	9a07      	ldr	r2, [sp, #28]
 80052de:	2100      	movs	r1, #0
 80052e0:	200a      	movs	r0, #10
 80052e2:	4627      	mov	r7, r4
 80052e4:	3401      	adds	r4, #1
 80052e6:	783b      	ldrb	r3, [r7, #0]
 80052e8:	3b30      	subs	r3, #48	; 0x30
 80052ea:	2b09      	cmp	r3, #9
 80052ec:	d951      	bls.n	8005392 <_svfiprintf_r+0x16e>
 80052ee:	b1c9      	cbz	r1, 8005324 <_svfiprintf_r+0x100>
 80052f0:	e011      	b.n	8005316 <_svfiprintf_r+0xf2>
 80052f2:	2b25      	cmp	r3, #37	; 0x25
 80052f4:	d0c0      	beq.n	8005278 <_svfiprintf_r+0x54>
 80052f6:	4627      	mov	r7, r4
 80052f8:	e7b9      	b.n	800526e <_svfiprintf_r+0x4a>
 80052fa:	4a3f      	ldr	r2, [pc, #252]	; (80053f8 <_svfiprintf_r+0x1d4>)
 80052fc:	1a80      	subs	r0, r0, r2
 80052fe:	fa0b f000 	lsl.w	r0, fp, r0
 8005302:	4318      	orrs	r0, r3
 8005304:	9004      	str	r0, [sp, #16]
 8005306:	463c      	mov	r4, r7
 8005308:	e7d3      	b.n	80052b2 <_svfiprintf_r+0x8e>
 800530a:	9a03      	ldr	r2, [sp, #12]
 800530c:	1d11      	adds	r1, r2, #4
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	9103      	str	r1, [sp, #12]
 8005312:	2a00      	cmp	r2, #0
 8005314:	db01      	blt.n	800531a <_svfiprintf_r+0xf6>
 8005316:	9207      	str	r2, [sp, #28]
 8005318:	e004      	b.n	8005324 <_svfiprintf_r+0x100>
 800531a:	4252      	negs	r2, r2
 800531c:	f043 0302 	orr.w	r3, r3, #2
 8005320:	9207      	str	r2, [sp, #28]
 8005322:	9304      	str	r3, [sp, #16]
 8005324:	783b      	ldrb	r3, [r7, #0]
 8005326:	2b2e      	cmp	r3, #46	; 0x2e
 8005328:	d10e      	bne.n	8005348 <_svfiprintf_r+0x124>
 800532a:	787b      	ldrb	r3, [r7, #1]
 800532c:	2b2a      	cmp	r3, #42	; 0x2a
 800532e:	f107 0101 	add.w	r1, r7, #1
 8005332:	d132      	bne.n	800539a <_svfiprintf_r+0x176>
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	9203      	str	r2, [sp, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	bfb8      	it	lt
 8005340:	f04f 33ff 	movlt.w	r3, #4294967295
 8005344:	3702      	adds	r7, #2
 8005346:	9305      	str	r3, [sp, #20]
 8005348:	4c2c      	ldr	r4, [pc, #176]	; (80053fc <_svfiprintf_r+0x1d8>)
 800534a:	7839      	ldrb	r1, [r7, #0]
 800534c:	2203      	movs	r2, #3
 800534e:	4620      	mov	r0, r4
 8005350:	f7fa ff46 	bl	80001e0 <memchr>
 8005354:	b138      	cbz	r0, 8005366 <_svfiprintf_r+0x142>
 8005356:	2340      	movs	r3, #64	; 0x40
 8005358:	1b00      	subs	r0, r0, r4
 800535a:	fa03 f000 	lsl.w	r0, r3, r0
 800535e:	9b04      	ldr	r3, [sp, #16]
 8005360:	4303      	orrs	r3, r0
 8005362:	9304      	str	r3, [sp, #16]
 8005364:	3701      	adds	r7, #1
 8005366:	7839      	ldrb	r1, [r7, #0]
 8005368:	4825      	ldr	r0, [pc, #148]	; (8005400 <_svfiprintf_r+0x1dc>)
 800536a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800536e:	2206      	movs	r2, #6
 8005370:	1c7e      	adds	r6, r7, #1
 8005372:	f7fa ff35 	bl	80001e0 <memchr>
 8005376:	2800      	cmp	r0, #0
 8005378:	d035      	beq.n	80053e6 <_svfiprintf_r+0x1c2>
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <_svfiprintf_r+0x1e0>)
 800537c:	b9fb      	cbnz	r3, 80053be <_svfiprintf_r+0x19a>
 800537e:	9b03      	ldr	r3, [sp, #12]
 8005380:	3307      	adds	r3, #7
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	3308      	adds	r3, #8
 8005388:	9303      	str	r3, [sp, #12]
 800538a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800538c:	444b      	add	r3, r9
 800538e:	9309      	str	r3, [sp, #36]	; 0x24
 8005390:	e76c      	b.n	800526c <_svfiprintf_r+0x48>
 8005392:	fb00 3202 	mla	r2, r0, r2, r3
 8005396:	2101      	movs	r1, #1
 8005398:	e7a3      	b.n	80052e2 <_svfiprintf_r+0xbe>
 800539a:	2300      	movs	r3, #0
 800539c:	9305      	str	r3, [sp, #20]
 800539e:	4618      	mov	r0, r3
 80053a0:	240a      	movs	r4, #10
 80053a2:	460f      	mov	r7, r1
 80053a4:	3101      	adds	r1, #1
 80053a6:	783a      	ldrb	r2, [r7, #0]
 80053a8:	3a30      	subs	r2, #48	; 0x30
 80053aa:	2a09      	cmp	r2, #9
 80053ac:	d903      	bls.n	80053b6 <_svfiprintf_r+0x192>
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0ca      	beq.n	8005348 <_svfiprintf_r+0x124>
 80053b2:	9005      	str	r0, [sp, #20]
 80053b4:	e7c8      	b.n	8005348 <_svfiprintf_r+0x124>
 80053b6:	fb04 2000 	mla	r0, r4, r0, r2
 80053ba:	2301      	movs	r3, #1
 80053bc:	e7f1      	b.n	80053a2 <_svfiprintf_r+0x17e>
 80053be:	ab03      	add	r3, sp, #12
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	462a      	mov	r2, r5
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <_svfiprintf_r+0x1e4>)
 80053c6:	a904      	add	r1, sp, #16
 80053c8:	4640      	mov	r0, r8
 80053ca:	f7fe f8cf 	bl	800356c <_printf_float>
 80053ce:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053d2:	4681      	mov	r9, r0
 80053d4:	d1d9      	bne.n	800538a <_svfiprintf_r+0x166>
 80053d6:	89ab      	ldrh	r3, [r5, #12]
 80053d8:	065b      	lsls	r3, r3, #25
 80053da:	f53f af38 	bmi.w	800524e <_svfiprintf_r+0x2a>
 80053de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053e0:	b01d      	add	sp, #116	; 0x74
 80053e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e6:	ab03      	add	r3, sp, #12
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	462a      	mov	r2, r5
 80053ec:	4b06      	ldr	r3, [pc, #24]	; (8005408 <_svfiprintf_r+0x1e4>)
 80053ee:	a904      	add	r1, sp, #16
 80053f0:	4640      	mov	r0, r8
 80053f2:	f7fe fb71 	bl	8003ad8 <_printf_i>
 80053f6:	e7ea      	b.n	80053ce <_svfiprintf_r+0x1aa>
 80053f8:	08005684 	.word	0x08005684
 80053fc:	0800568a 	.word	0x0800568a
 8005400:	0800568e 	.word	0x0800568e
 8005404:	0800356d 	.word	0x0800356d
 8005408:	0800516d 	.word	0x0800516d

0800540c <_sbrk_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4c06      	ldr	r4, [pc, #24]	; (8005428 <_sbrk_r+0x1c>)
 8005410:	2300      	movs	r3, #0
 8005412:	4605      	mov	r5, r0
 8005414:	4608      	mov	r0, r1
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	f7fc f854 	bl	80014c4 <_sbrk>
 800541c:	1c43      	adds	r3, r0, #1
 800541e:	d102      	bne.n	8005426 <_sbrk_r+0x1a>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	b103      	cbz	r3, 8005426 <_sbrk_r+0x1a>
 8005424:	602b      	str	r3, [r5, #0]
 8005426:	bd38      	pop	{r3, r4, r5, pc}
 8005428:	200002c8 	.word	0x200002c8

0800542c <__ascii_mbtowc>:
 800542c:	b082      	sub	sp, #8
 800542e:	b901      	cbnz	r1, 8005432 <__ascii_mbtowc+0x6>
 8005430:	a901      	add	r1, sp, #4
 8005432:	b142      	cbz	r2, 8005446 <__ascii_mbtowc+0x1a>
 8005434:	b14b      	cbz	r3, 800544a <__ascii_mbtowc+0x1e>
 8005436:	7813      	ldrb	r3, [r2, #0]
 8005438:	600b      	str	r3, [r1, #0]
 800543a:	7812      	ldrb	r2, [r2, #0]
 800543c:	1c10      	adds	r0, r2, #0
 800543e:	bf18      	it	ne
 8005440:	2001      	movne	r0, #1
 8005442:	b002      	add	sp, #8
 8005444:	4770      	bx	lr
 8005446:	4610      	mov	r0, r2
 8005448:	e7fb      	b.n	8005442 <__ascii_mbtowc+0x16>
 800544a:	f06f 0001 	mvn.w	r0, #1
 800544e:	e7f8      	b.n	8005442 <__ascii_mbtowc+0x16>

08005450 <memmove>:
 8005450:	4288      	cmp	r0, r1
 8005452:	b510      	push	{r4, lr}
 8005454:	eb01 0302 	add.w	r3, r1, r2
 8005458:	d803      	bhi.n	8005462 <memmove+0x12>
 800545a:	1e42      	subs	r2, r0, #1
 800545c:	4299      	cmp	r1, r3
 800545e:	d10c      	bne.n	800547a <memmove+0x2a>
 8005460:	bd10      	pop	{r4, pc}
 8005462:	4298      	cmp	r0, r3
 8005464:	d2f9      	bcs.n	800545a <memmove+0xa>
 8005466:	1881      	adds	r1, r0, r2
 8005468:	1ad2      	subs	r2, r2, r3
 800546a:	42d3      	cmn	r3, r2
 800546c:	d100      	bne.n	8005470 <memmove+0x20>
 800546e:	bd10      	pop	{r4, pc}
 8005470:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005474:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005478:	e7f7      	b.n	800546a <memmove+0x1a>
 800547a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800547e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005482:	e7eb      	b.n	800545c <memmove+0xc>

08005484 <__malloc_lock>:
 8005484:	4770      	bx	lr

08005486 <__malloc_unlock>:
 8005486:	4770      	bx	lr

08005488 <_realloc_r>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	4607      	mov	r7, r0
 800548c:	4614      	mov	r4, r2
 800548e:	460e      	mov	r6, r1
 8005490:	b921      	cbnz	r1, 800549c <_realloc_r+0x14>
 8005492:	4611      	mov	r1, r2
 8005494:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005498:	f7ff be0a 	b.w	80050b0 <_malloc_r>
 800549c:	b922      	cbnz	r2, 80054a8 <_realloc_r+0x20>
 800549e:	f7ff fdb9 	bl	8005014 <_free_r>
 80054a2:	4625      	mov	r5, r4
 80054a4:	4628      	mov	r0, r5
 80054a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a8:	f000 f821 	bl	80054ee <_malloc_usable_size_r>
 80054ac:	4284      	cmp	r4, r0
 80054ae:	d90f      	bls.n	80054d0 <_realloc_r+0x48>
 80054b0:	4621      	mov	r1, r4
 80054b2:	4638      	mov	r0, r7
 80054b4:	f7ff fdfc 	bl	80050b0 <_malloc_r>
 80054b8:	4605      	mov	r5, r0
 80054ba:	2800      	cmp	r0, #0
 80054bc:	d0f2      	beq.n	80054a4 <_realloc_r+0x1c>
 80054be:	4631      	mov	r1, r6
 80054c0:	4622      	mov	r2, r4
 80054c2:	f7ff fabd 	bl	8004a40 <memcpy>
 80054c6:	4631      	mov	r1, r6
 80054c8:	4638      	mov	r0, r7
 80054ca:	f7ff fda3 	bl	8005014 <_free_r>
 80054ce:	e7e9      	b.n	80054a4 <_realloc_r+0x1c>
 80054d0:	4635      	mov	r5, r6
 80054d2:	e7e7      	b.n	80054a4 <_realloc_r+0x1c>

080054d4 <__ascii_wctomb>:
 80054d4:	b149      	cbz	r1, 80054ea <__ascii_wctomb+0x16>
 80054d6:	2aff      	cmp	r2, #255	; 0xff
 80054d8:	bf85      	ittet	hi
 80054da:	238a      	movhi	r3, #138	; 0x8a
 80054dc:	6003      	strhi	r3, [r0, #0]
 80054de:	700a      	strbls	r2, [r1, #0]
 80054e0:	f04f 30ff 	movhi.w	r0, #4294967295
 80054e4:	bf98      	it	ls
 80054e6:	2001      	movls	r0, #1
 80054e8:	4770      	bx	lr
 80054ea:	4608      	mov	r0, r1
 80054ec:	4770      	bx	lr

080054ee <_malloc_usable_size_r>:
 80054ee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80054f2:	2800      	cmp	r0, #0
 80054f4:	f1a0 0004 	sub.w	r0, r0, #4
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
