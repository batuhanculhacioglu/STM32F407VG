
HC-SR04_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080026b4  080026b4  000126b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002708  08002708  00012708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800270c  0800270c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  8 .bss          00000058  20000070  20000070  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000c8  200000c8  00020070  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 11 .debug_info   00005aaa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000129d  00000000  00000000  00025b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000548  00000000  00000000  00026de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000490  00000000  00000000  00027330  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000267c  00000000  00000000  000277c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001e42  00000000  00000000  00029e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002bc7e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001654  00000000  00000000  0002bcfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800269c 	.word	0x0800269c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800269c 	.word	0x0800269c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b97a 	b.w	800057c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Delay>:
#include "stm32f4xx_hal.h"
#include "main.h"
#include "LCD.h"

void Delay(uint32_t nCount)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000588:	e002      	b.n	8000590 <Delay+0x10>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3b01      	subs	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1f9      	bne.n	800058a <Delay+0xa>
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <lcd_delay>:
void lcd_delay(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
 Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f7ff ffe9 	bl	8000580 <Delay>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->BSRR  = (uint32_t)LCD_RS_Pin << 16;
 80005be:	4b5f      	ldr	r3, [pc, #380]	; (800073c <lcd_cmd+0x188>)
 80005c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80005c4:	619a      	str	r2, [r3, #24]

 LCD_EN_GPIO_Port->BSRR  = (uint32_t)LCD_EN_Pin << 16;
 80005c6:	4b5d      	ldr	r3, [pc, #372]	; (800073c <lcd_cmd+0x188>)
 80005c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005cc:	619a      	str	r2, [r3, #24]
 LCD_D4_GPIO_Port->BSRR  = (uint32_t)LCD_D4_Pin << 16;
 80005ce:	4b5b      	ldr	r3, [pc, #364]	; (800073c <lcd_cmd+0x188>)
 80005d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005d4:	619a      	str	r2, [r3, #24]
 LCD_D5_GPIO_Port->BSRR  = (uint32_t)LCD_D5_Pin << 16;
 80005d6:	4b59      	ldr	r3, [pc, #356]	; (800073c <lcd_cmd+0x188>)
 80005d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005dc:	619a      	str	r2, [r3, #24]
 LCD_D6_GPIO_Port->BSRR  = (uint32_t)LCD_D6_Pin << 16;
 80005de:	4b57      	ldr	r3, [pc, #348]	; (800073c <lcd_cmd+0x188>)
 80005e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005e4:	619a      	str	r2, [r3, #24]
 LCD_D7_GPIO_Port->BSRR  = (uint32_t)LCD_D7_Pin << 16;
 80005e6:	4b55      	ldr	r3, [pc, #340]	; (800073c <lcd_cmd+0x188>)
 80005e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005ec:	619a      	str	r2, [r3, #24]

 lcd_delay();
 80005ee:	f7ff ffd8 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80005f2:	4a52      	ldr	r2, [pc, #328]	; (800073c <lcd_cmd+0x188>)
 80005f4:	4b51      	ldr	r3, [pc, #324]	; (800073c <lcd_cmd+0x188>)
 80005f6:	695b      	ldr	r3, [r3, #20]
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6153      	str	r3, [r2, #20]

 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	2b00      	cmp	r3, #0
 8000606:	d003      	beq.n	8000610 <lcd_cmd+0x5c>
 8000608:	4b4c      	ldr	r3, [pc, #304]	; (800073c <lcd_cmd+0x188>)
 800060a:	2210      	movs	r2, #16
 800060c:	619a      	str	r2, [r3, #24]
 800060e:	e003      	b.n	8000618 <lcd_cmd+0x64>
 8000610:	4b4a      	ldr	r3, [pc, #296]	; (800073c <lcd_cmd+0x188>)
 8000612:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000616:	619a      	str	r2, [r3, #24]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	f003 0320 	and.w	r3, r3, #32
 800061e:	2b00      	cmp	r3, #0
 8000620:	d003      	beq.n	800062a <lcd_cmd+0x76>
 8000622:	4b46      	ldr	r3, [pc, #280]	; (800073c <lcd_cmd+0x188>)
 8000624:	2220      	movs	r2, #32
 8000626:	619a      	str	r2, [r3, #24]
 8000628:	e003      	b.n	8000632 <lcd_cmd+0x7e>
 800062a:	4b44      	ldr	r3, [pc, #272]	; (800073c <lcd_cmd+0x188>)
 800062c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000630:	619a      	str	r2, [r3, #24]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <lcd_cmd+0x90>
 800063c:	4b3f      	ldr	r3, [pc, #252]	; (800073c <lcd_cmd+0x188>)
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	619a      	str	r2, [r3, #24]
 8000642:	e003      	b.n	800064c <lcd_cmd+0x98>
 8000644:	4b3d      	ldr	r3, [pc, #244]	; (800073c <lcd_cmd+0x188>)
 8000646:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800064a:	619a      	str	r2, [r3, #24]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800064c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	da03      	bge.n	800065c <lcd_cmd+0xa8>
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <lcd_cmd+0x188>)
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	619a      	str	r2, [r3, #24]
 800065a:	e003      	b.n	8000664 <lcd_cmd+0xb0>
 800065c:	4b37      	ldr	r3, [pc, #220]	; (800073c <lcd_cmd+0x188>)
 800065e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000662:	619a      	str	r2, [r3, #24]

 lcd_delay();
 8000664:	f7ff ff9d 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->BSRR  = (uint32_t)LCD_EN_Pin << 16;
 8000668:	4b34      	ldr	r3, [pc, #208]	; (800073c <lcd_cmd+0x188>)
 800066a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800066e:	619a      	str	r2, [r3, #24]
 LCD_D4_GPIO_Port->BSRR  = (uint32_t)LCD_D4_Pin << 16;
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <lcd_cmd+0x188>)
 8000672:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000676:	619a      	str	r2, [r3, #24]
 LCD_D5_GPIO_Port->BSRR  = (uint32_t)LCD_D5_Pin << 16;
 8000678:	4b30      	ldr	r3, [pc, #192]	; (800073c <lcd_cmd+0x188>)
 800067a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800067e:	619a      	str	r2, [r3, #24]
 LCD_D6_GPIO_Port->BSRR  = (uint32_t)LCD_D6_Pin << 16;
 8000680:	4b2e      	ldr	r3, [pc, #184]	; (800073c <lcd_cmd+0x188>)
 8000682:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000686:	619a      	str	r2, [r3, #24]
 LCD_D7_GPIO_Port->BSRR  = (uint32_t)LCD_D7_Pin << 16;
 8000688:	4b2c      	ldr	r3, [pc, #176]	; (800073c <lcd_cmd+0x188>)
 800068a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800068e:	619a      	str	r2, [r3, #24]

 lcd_delay();
 8000690:	f7ff ff87 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000694:	4a29      	ldr	r2, [pc, #164]	; (800073c <lcd_cmd+0x188>)
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <lcd_cmd+0x188>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	6153      	str	r3, [r2, #20]

 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <lcd_cmd+0xfe>
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <lcd_cmd+0x188>)
 80006ac:	2210      	movs	r2, #16
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	e003      	b.n	80006ba <lcd_cmd+0x106>
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <lcd_cmd+0x188>)
 80006b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006b8:	619a      	str	r2, [r3, #24]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <lcd_cmd+0x118>
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <lcd_cmd+0x188>)
 80006c6:	2220      	movs	r2, #32
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	e003      	b.n	80006d4 <lcd_cmd+0x120>
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <lcd_cmd+0x188>)
 80006ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80006d2:	619a      	str	r2, [r3, #24]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f003 0304 	and.w	r3, r3, #4
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <lcd_cmd+0x132>
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <lcd_cmd+0x188>)
 80006e0:	2240      	movs	r2, #64	; 0x40
 80006e2:	619a      	str	r2, [r3, #24]
 80006e4:	e003      	b.n	80006ee <lcd_cmd+0x13a>
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <lcd_cmd+0x188>)
 80006e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80006ec:	619a      	str	r2, [r3, #24]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	f003 0308 	and.w	r3, r3, #8
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d003      	beq.n	8000700 <lcd_cmd+0x14c>
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <lcd_cmd+0x188>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	619a      	str	r2, [r3, #24]
 80006fe:	e003      	b.n	8000708 <lcd_cmd+0x154>
 8000700:	4b0e      	ldr	r3, [pc, #56]	; (800073c <lcd_cmd+0x188>)
 8000702:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000706:	619a      	str	r2, [r3, #24]

 lcd_delay();
 8000708:	f7ff ff4b 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->BSRR  = (uint32_t)LCD_EN_Pin << 16;
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <lcd_cmd+0x188>)
 800070e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000712:	619a      	str	r2, [r3, #24]
 LCD_D4_GPIO_Port->BSRR  = (uint32_t)LCD_D4_Pin << 16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <lcd_cmd+0x188>)
 8000716:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800071a:	619a      	str	r2, [r3, #24]
 LCD_D5_GPIO_Port->BSRR  = (uint32_t)LCD_D5_Pin << 16;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <lcd_cmd+0x188>)
 800071e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000722:	619a      	str	r2, [r3, #24]
 LCD_D6_GPIO_Port->BSRR  = (uint32_t)LCD_D6_Pin << 16;
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <lcd_cmd+0x188>)
 8000726:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800072a:	619a      	str	r2, [r3, #24]
 LCD_D7_GPIO_Port->BSRR  = (uint32_t)LCD_D7_Pin << 16;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <lcd_cmd+0x188>)
 800072e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000732:	619a      	str	r2, [r3, #24]
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020000 	.word	0x40020000

08000740 <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 800074a:	4a60      	ldr	r2, [pc, #384]	; (80008cc <lcd_char_cp+0x18c>)
 800074c:	4b5f      	ldr	r3, [pc, #380]	; (80008cc <lcd_char_cp+0x18c>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6153      	str	r3, [r2, #20]

 LCD_EN_GPIO_Port->BSRR  = (uint32_t)LCD_EN_Pin << 16;
 8000756:	4b5d      	ldr	r3, [pc, #372]	; (80008cc <lcd_char_cp+0x18c>)
 8000758:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800075c:	619a      	str	r2, [r3, #24]
 LCD_D4_GPIO_Port->BSRR  = (uint32_t)LCD_D4_Pin << 16;
 800075e:	4b5b      	ldr	r3, [pc, #364]	; (80008cc <lcd_char_cp+0x18c>)
 8000760:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000764:	619a      	str	r2, [r3, #24]
 LCD_D5_GPIO_Port->BSRR  = (uint32_t)LCD_D5_Pin << 16;
 8000766:	4b59      	ldr	r3, [pc, #356]	; (80008cc <lcd_char_cp+0x18c>)
 8000768:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800076c:	619a      	str	r2, [r3, #24]
 LCD_D6_GPIO_Port->BSRR  = (uint32_t)LCD_D6_Pin << 16;
 800076e:	4b57      	ldr	r3, [pc, #348]	; (80008cc <lcd_char_cp+0x18c>)
 8000770:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000774:	619a      	str	r2, [r3, #24]
 LCD_D7_GPIO_Port->BSRR  = (uint32_t)LCD_D7_Pin << 16;
 8000776:	4b55      	ldr	r3, [pc, #340]	; (80008cc <lcd_char_cp+0x18c>)
 8000778:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800077c:	619a      	str	r2, [r3, #24]

 lcd_delay();
 800077e:	f7ff ff10 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000782:	4a52      	ldr	r2, [pc, #328]	; (80008cc <lcd_char_cp+0x18c>)
 8000784:	4b51      	ldr	r3, [pc, #324]	; (80008cc <lcd_char_cp+0x18c>)
 8000786:	695b      	ldr	r3, [r3, #20]
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6153      	str	r3, [r2, #20]

 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 0310 	and.w	r3, r3, #16
 8000794:	2b00      	cmp	r3, #0
 8000796:	d003      	beq.n	80007a0 <lcd_char_cp+0x60>
 8000798:	4b4c      	ldr	r3, [pc, #304]	; (80008cc <lcd_char_cp+0x18c>)
 800079a:	2210      	movs	r2, #16
 800079c:	619a      	str	r2, [r3, #24]
 800079e:	e003      	b.n	80007a8 <lcd_char_cp+0x68>
 80007a0:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <lcd_char_cp+0x18c>)
 80007a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80007a6:	619a      	str	r2, [r3, #24]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 0320 	and.w	r3, r3, #32
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <lcd_char_cp+0x7a>
 80007b2:	4b46      	ldr	r3, [pc, #280]	; (80008cc <lcd_char_cp+0x18c>)
 80007b4:	2220      	movs	r2, #32
 80007b6:	619a      	str	r2, [r3, #24]
 80007b8:	e003      	b.n	80007c2 <lcd_char_cp+0x82>
 80007ba:	4b44      	ldr	r3, [pc, #272]	; (80008cc <lcd_char_cp+0x18c>)
 80007bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007c0:	619a      	str	r2, [r3, #24]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d003      	beq.n	80007d4 <lcd_char_cp+0x94>
 80007cc:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <lcd_char_cp+0x18c>)
 80007ce:	2240      	movs	r2, #64	; 0x40
 80007d0:	619a      	str	r2, [r3, #24]
 80007d2:	e003      	b.n	80007dc <lcd_char_cp+0x9c>
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <lcd_char_cp+0x18c>)
 80007d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007da:	619a      	str	r2, [r3, #24]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	da03      	bge.n	80007ec <lcd_char_cp+0xac>
 80007e4:	4b39      	ldr	r3, [pc, #228]	; (80008cc <lcd_char_cp+0x18c>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	619a      	str	r2, [r3, #24]
 80007ea:	e003      	b.n	80007f4 <lcd_char_cp+0xb4>
 80007ec:	4b37      	ldr	r3, [pc, #220]	; (80008cc <lcd_char_cp+0x18c>)
 80007ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80007f2:	619a      	str	r2, [r3, #24]

 lcd_delay();
 80007f4:	f7ff fed5 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->BSRR  = (uint32_t)LCD_EN_Pin << 16;
 80007f8:	4b34      	ldr	r3, [pc, #208]	; (80008cc <lcd_char_cp+0x18c>)
 80007fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007fe:	619a      	str	r2, [r3, #24]
 LCD_D4_GPIO_Port->BSRR  = (uint32_t)LCD_D4_Pin << 16;
 8000800:	4b32      	ldr	r3, [pc, #200]	; (80008cc <lcd_char_cp+0x18c>)
 8000802:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000806:	619a      	str	r2, [r3, #24]
 LCD_D5_GPIO_Port->BSRR  = (uint32_t)LCD_D5_Pin << 16;
 8000808:	4b30      	ldr	r3, [pc, #192]	; (80008cc <lcd_char_cp+0x18c>)
 800080a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800080e:	619a      	str	r2, [r3, #24]
 LCD_D6_GPIO_Port->BSRR  = (uint32_t)LCD_D6_Pin << 16;
 8000810:	4b2e      	ldr	r3, [pc, #184]	; (80008cc <lcd_char_cp+0x18c>)
 8000812:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000816:	619a      	str	r2, [r3, #24]
 LCD_D7_GPIO_Port->BSRR  = (uint32_t)LCD_D7_Pin << 16;
 8000818:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <lcd_char_cp+0x18c>)
 800081a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800081e:	619a      	str	r2, [r3, #24]

 lcd_delay();
 8000820:	f7ff febf 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000824:	4a29      	ldr	r2, [pc, #164]	; (80008cc <lcd_char_cp+0x18c>)
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <lcd_char_cp+0x18c>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	6153      	str	r3, [r2, #20]

 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <lcd_char_cp+0x102>
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <lcd_char_cp+0x18c>)
 800083c:	2210      	movs	r2, #16
 800083e:	619a      	str	r2, [r3, #24]
 8000840:	e003      	b.n	800084a <lcd_char_cp+0x10a>
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <lcd_char_cp+0x18c>)
 8000844:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000848:	619a      	str	r2, [r3, #24]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f003 0302 	and.w	r3, r3, #2
 8000850:	2b00      	cmp	r3, #0
 8000852:	d003      	beq.n	800085c <lcd_char_cp+0x11c>
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <lcd_char_cp+0x18c>)
 8000856:	2220      	movs	r2, #32
 8000858:	619a      	str	r2, [r3, #24]
 800085a:	e003      	b.n	8000864 <lcd_char_cp+0x124>
 800085c:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <lcd_char_cp+0x18c>)
 800085e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000862:	619a      	str	r2, [r3, #24]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	2b00      	cmp	r3, #0
 800086c:	d003      	beq.n	8000876 <lcd_char_cp+0x136>
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <lcd_char_cp+0x18c>)
 8000870:	2240      	movs	r2, #64	; 0x40
 8000872:	619a      	str	r2, [r3, #24]
 8000874:	e003      	b.n	800087e <lcd_char_cp+0x13e>
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <lcd_char_cp+0x18c>)
 8000878:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800087c:	619a      	str	r2, [r3, #24]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	2b00      	cmp	r3, #0
 8000886:	d003      	beq.n	8000890 <lcd_char_cp+0x150>
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <lcd_char_cp+0x18c>)
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	619a      	str	r2, [r3, #24]
 800088e:	e003      	b.n	8000898 <lcd_char_cp+0x158>
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <lcd_char_cp+0x18c>)
 8000892:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000896:	619a      	str	r2, [r3, #24]

 lcd_delay();
 8000898:	f7ff fe83 	bl	80005a2 <lcd_delay>

 LCD_EN_GPIO_Port->BSRR  = (uint32_t)LCD_EN_Pin << 16;
 800089c:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <lcd_char_cp+0x18c>)
 800089e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008a2:	619a      	str	r2, [r3, #24]
 LCD_D4_GPIO_Port->BSRR  = (uint32_t)LCD_D4_Pin << 16;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <lcd_char_cp+0x18c>)
 80008a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008aa:	619a      	str	r2, [r3, #24]
 LCD_D5_GPIO_Port->BSRR  = (uint32_t)LCD_D5_Pin << 16;
 80008ac:	4b07      	ldr	r3, [pc, #28]	; (80008cc <lcd_char_cp+0x18c>)
 80008ae:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80008b2:	619a      	str	r2, [r3, #24]
 LCD_D6_GPIO_Port->BSRR  = (uint32_t)LCD_D6_Pin << 16;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <lcd_char_cp+0x18c>)
 80008b6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008ba:	619a      	str	r2, [r3, #24]
 LCD_D7_GPIO_Port->BSRR  = (uint32_t)LCD_D7_Pin << 16;
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <lcd_char_cp+0x18c>)
 80008be:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008c2:	619a      	str	r2, [r3, #24]
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40020000 	.word	0x40020000

080008d0 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 while(*out_char)
 80008d8:	e008      	b.n	80008ec <lcd_out_cp+0x1c>
 {
  lcd_delay();
 80008da:	f7ff fe62 	bl	80005a2 <lcd_delay>
  lcd_char_cp(*out_char++);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff ff2a 	bl	8000740 <lcd_char_cp>
 while(*out_char)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1f2      	bne.n	80008da <lcd_out_cp+0xa>
 }
 lcd_delay();
 80008f4:	f7ff fe55 	bl	80005a2 <lcd_delay>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
 800090a:	460b      	mov	r3, r1
 800090c:	71bb      	strb	r3, [r7, #6]
 800090e:	4613      	mov	r3, r2
 8000910:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000912:	20fa      	movs	r0, #250	; 0xfa
 8000914:	f000 fb34 	bl	8000f80 <HAL_Delay>
 lcd_cmd(_RETURN_HOME);
 8000918:	2002      	movs	r0, #2
 800091a:	f7ff fe4b 	bl	80005b4 <lcd_cmd>
    HAL_Delay(50);
 800091e:	2032      	movs	r0, #50	; 0x32
 8000920:	f000 fb2e 	bl	8000f80 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000924:	79fa      	ldrb	r2, [r7, #7]
 8000926:	79bb      	ldrb	r3, [r7, #6]
 8000928:	4313      	orrs	r3, r2
 800092a:	b2da      	uxtb	r2, r3
 800092c:	797b      	ldrb	r3, [r7, #5]
 800092e:	4313      	orrs	r3, r2
 8000930:	b2db      	uxtb	r3, r3
 8000932:	f043 0320 	orr.w	r3, r3, #32
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe3b 	bl	80005b4 <lcd_cmd>
    HAL_Delay(50);
 800093e:	2032      	movs	r0, #50	; 0x32
 8000940:	f000 fb1e 	bl	8000f80 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000944:	2006      	movs	r0, #6
 8000946:	f7ff fe35 	bl	80005b4 <lcd_cmd>
    HAL_Delay(50);
 800094a:	2032      	movs	r0, #50	; 0x32
 800094c:	f000 fb18 	bl	8000f80 <HAL_Delay>
    lcd_cmd(0x0E);
 8000950:	200e      	movs	r0, #14
 8000952:	f7ff fe2f 	bl	80005b4 <lcd_cmd>
    HAL_Delay(50);
 8000956:	2032      	movs	r0, #50	; 0x32
 8000958:	f000 fb12 	bl	8000f80 <HAL_Delay>
    lcd_cmd(0x0C);
 800095c:	200c      	movs	r0, #12
 800095e:	f7ff fe29 	bl	80005b4 <lcd_cmd>
    HAL_Delay(50);
 8000962:	2032      	movs	r0, #50	; 0x32
 8000964:	f000 fb0c 	bl	8000f80 <HAL_Delay>
    lcd_cmd(0x01);
 8000968:	2001      	movs	r0, #1
 800096a:	f7ff fe23 	bl	80005b4 <lcd_cmd>
    HAL_Delay(100);
 800096e:	2064      	movs	r0, #100	; 0x64
 8000970:	f000 fb06 	bl	8000f80 <HAL_Delay>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <lcd_gotoxy+0x24>
 {
  lcd_cmd(0x80 + (column - 1));
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	337f      	adds	r3, #127	; 0x7f
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe0b 	bl	80005b4 <lcd_cmd>
 }
 else if(row == 2)
 {
  lcd_cmd(0xC0 + (column - 1));
 }
}
 800099e:	e008      	b.n	80009b2 <lcd_gotoxy+0x36>
 else if(row == 2)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	2b02      	cmp	r3, #2
 80009a4:	d105      	bne.n	80009b2 <lcd_gotoxy+0x36>
  lcd_cmd(0xC0 + (column - 1));
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	3b41      	subs	r3, #65	; 0x41
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe01 	bl	80005b4 <lcd_cmd>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <lcd_print>:
 lcd_gotoxy(row, column);
 lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	603a      	str	r2, [r7, #0]
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	460b      	mov	r3, r1
 80009c8:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 80009ca:	79ba      	ldrb	r2, [r7, #6]
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffd3 	bl	800097c <lcd_gotoxy>
 lcd_out_cp(out_char);
 80009d6:	6838      	ldr	r0, [r7, #0]
 80009d8:	f7ff ff7a 	bl	80008d0 <lcd_out_cp>
}
 80009dc:	bf00      	nop
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <DWT_Delay_Init+0x58>)
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <DWT_Delay_Init+0x58>)
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80009f2:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80009f4:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <DWT_Delay_Init+0x58>)
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <DWT_Delay_Init+0x58>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009fe:	60d3      	str	r3, [r2, #12]
     
  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000a00:	4a0f      	ldr	r2, [pc, #60]	; (8000a40 <DWT_Delay_Init+0x5c>)
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <DWT_Delay_Init+0x5c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f023 0301 	bic.w	r3, r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000a0c:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <DWT_Delay_Init+0x5c>)
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <DWT_Delay_Init+0x5c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6013      	str	r3, [r2, #0]
     
  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <DWT_Delay_Init+0x5c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
     
     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000a1e:	bf00      	nop
     __ASM volatile ("NOP");
 8000a20:	bf00      	nop
  __ASM volatile ("NOP");
 8000a22:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <DWT_Delay_Init+0x5c>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	e000      	b.n	8000a32 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000a30:	2301      	movs	r3, #1
  }
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000edf0 	.word	0xe000edf0
 8000a40:	e0001000 	.word	0xe0001000

08000a44 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <DWT_Delay_us+0x3c>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000a52:	f001 f99d 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8000a56:	4602      	mov	r2, r0
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <DWT_Delay_us+0x40>)
 8000a5a:	fba3 2302 	umull	r2, r3, r3, r2
 8000a5e:	0c9b      	lsrs	r3, r3, #18
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	fb02 f303 	mul.w	r3, r2, r3
 8000a66:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000a68:	bf00      	nop
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <DWT_Delay_us+0x3c>)
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1ad2      	subs	r2, r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d3f8      	bcc.n	8000a6a <DWT_Delay_us+0x26>
}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	e0001000 	.word	0xe0001000
 8000a84:	431bde83 	.word	0x431bde83

08000a88 <Sensor_Read>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Sensor_Read()
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB,Trigger_Pin,GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2110      	movs	r1, #16
 8000a96:	481a      	ldr	r0, [pc, #104]	; (8000b00 <Sensor_Read+0x78>)
 8000a98:	f000 fd2a 	bl	80014f0 <HAL_GPIO_WritePin>
    DWT_Delay_us(10);
 8000a9c:	200a      	movs	r0, #10
 8000a9e:	f7ff ffd1 	bl	8000a44 <DWT_Delay_us>

	HAL_GPIO_WritePin(GPIOB,Trigger_Pin,GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2110      	movs	r1, #16
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <Sensor_Read+0x78>)
 8000aa8:	f000 fd22 	bl	80014f0 <HAL_GPIO_WritePin>
    DWT_Delay_us(10);
 8000aac:	200a      	movs	r0, #10
 8000aae:	f7ff ffc9 	bl	8000a44 <DWT_Delay_us>

	HAL_GPIO_WritePin(GPIOB,Trigger_Pin,GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2110      	movs	r1, #16
 8000ab6:	4812      	ldr	r0, [pc, #72]	; (8000b00 <Sensor_Read+0x78>)
 8000ab8:	f000 fd1a 	bl	80014f0 <HAL_GPIO_WritePin>
    DWT_Delay_us(10);
 8000abc:	200a      	movs	r0, #10
 8000abe:	f7ff ffc1 	bl	8000a44 <DWT_Delay_us>

    while(!HAL_GPIO_ReadPin(GPIOB,Echo_Pin));
 8000ac2:	bf00      	nop
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <Sensor_Read+0x78>)
 8000ac8:	f000 fcfa 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f8      	beq.n	8000ac4 <Sensor_Read+0x3c>

    while(HAL_GPIO_ReadPin(GPIOB,Echo_Pin))
 8000ad2:	e005      	b.n	8000ae0 <Sensor_Read+0x58>
    {
    	local_time++;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	607b      	str	r3, [r7, #4]
    	DWT_Delay_us(1);
 8000ada:	2001      	movs	r0, #1
 8000adc:	f7ff ffb2 	bl	8000a44 <DWT_Delay_us>
    while(HAL_GPIO_ReadPin(GPIOB,Echo_Pin))
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4807      	ldr	r0, [pc, #28]	; (8000b00 <Sensor_Read+0x78>)
 8000ae4:	f000 fcec 	bl	80014c0 <HAL_GPIO_ReadPin>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f2      	bne.n	8000ad4 <Sensor_Read+0x4c>
    }
    HAL_Delay(50);
 8000aee:	2032      	movs	r0, #50	; 0x32
 8000af0:	f000 fa46 	bl	8000f80 <HAL_Delay>
    return local_time;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40020400 	.word	0x40020400

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 f9c8 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f832 	bl	8000b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 f89a 	bl	8000c48 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_Delay_Init();
 8000b14:	f7ff ff66 	bl	80009e4 <DWT_Delay_Init>
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE);
 8000b18:	2208      	movs	r2, #8
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff feef 	bl	8000900 <lcd_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  time = Sensor_Read();
 8000b22:	f7ff ffb1 	bl	8000a88 <Sensor_Read>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <main+0x5c>)
 8000b2a:	601a      	str	r2, [r3, #0]
	  distance = time / 58;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <main+0x5c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0c      	ldr	r2, [pc, #48]	; (8000b64 <main+0x60>)
 8000b32:	fba2 2303 	umull	r2, r3, r2, r3
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <main+0x64>)
 8000b3c:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(200);
 8000b3e:	20c8      	movs	r0, #200	; 0xc8
 8000b40:	f000 fa1e 	bl	8000f80 <HAL_Delay>
	  sprintf(line1,"%d cm",distance);
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <main+0x64>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <main+0x68>)
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <main+0x6c>)
 8000b4e:	f001 f987 	bl	8001e60 <siprintf>
	  lcd_print(1,1,line1);
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <main+0x6c>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff ff2f 	bl	80009ba <lcd_print>
	  time = Sensor_Read();
 8000b5c:	e7e1      	b.n	8000b22 <main+0x1e>
 8000b5e:	bf00      	nop
 8000b60:	200000bc 	.word	0x200000bc
 8000b64:	8d3dcb09 	.word	0x8d3dcb09
 8000b68:	20000098 	.word	0x20000098
 8000b6c:	080026b4 	.word	0x080026b4
 8000b70:	2000009c 	.word	0x2000009c

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b094      	sub	sp, #80	; 0x50
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 0320 	add.w	r3, r7, #32
 8000b7e:	2230      	movs	r2, #48	; 0x30
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f964 	bl	8001e50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4a28      	ldr	r2, [pc, #160]	; (8000c40 <SystemClock_Config+0xcc>)
 8000b9e:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <SystemClock_Config+0xcc>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemClock_Config+0xcc>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	4a22      	ldr	r2, [pc, #136]	; (8000c44 <SystemClock_Config+0xd0>)
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <SystemClock_Config+0xd0>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <SystemClock_Config+0xd0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bde:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be4:	2304      	movs	r3, #4
 8000be6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000be8:	23a8      	movs	r3, #168	; 0xa8
 8000bea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bec:	2302      	movs	r3, #2
 8000bee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf4:	f107 0320 	add.w	r3, r7, #32
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 fc93 	bl	8001524 <HAL_RCC_OscConfig>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c04:	f000 f8b6 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c08:	230f      	movs	r3, #15
 8000c0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2105      	movs	r1, #5
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fef4 	bl	8001a14 <HAL_RCC_ClockConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c32:	f000 f89f 	bl	8000d74 <Error_Handler>
  }
}
 8000c36:	bf00      	nop
 8000c38:	3750      	adds	r7, #80	; 0x50
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40007000 	.word	0x40007000

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4a40      	ldr	r2, [pc, #256]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c64:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c80:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4a32      	ldr	r2, [pc, #200]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c9c:	4b31      	ldr	r3, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4a2b      	ldr	r2, [pc, #172]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <MX_GPIO_Init+0x11c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000cce:	2200      	movs	r2, #0
 8000cd0:	21f6      	movs	r1, #246	; 0xf6
 8000cd2:	4825      	ldr	r0, [pc, #148]	; (8000d68 <MX_GPIO_Init+0x120>)
 8000cd4:	f000 fc0c 	bl	80014f0 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000cde:	4823      	ldr	r0, [pc, #140]	; (8000d6c <MX_GPIO_Init+0x124>)
 8000ce0:	f000 fc06 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4821      	ldr	r0, [pc, #132]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000cea:	f000 fc01 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000cee:	23f6      	movs	r3, #246	; 0xf6
 8000cf0:	617b      	str	r3, [r7, #20]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_GPIO_Init+0x120>)
 8000d06:	f000 fa41 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d0a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <MX_GPIO_Init+0x124>)
 8000d24:	f000 fa32 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000d3c:	f000 fa26 	bl	800118c <HAL_GPIO_Init>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 8000d40:	2310      	movs	r3, #16
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_GPIO_Init+0x128>)
 8000d58:	f000 fa18 	bl	800118c <HAL_GPIO_Init>

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	40020400 	.word	0x40020400

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <Error_Handler+0x6>

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f892 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x50>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x16>
		heap_end = &end;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <_sbrk+0x50>)
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <_sbrk+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <_sbrk+0x50>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <_sbrk+0x50>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	466a      	mov	r2, sp
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d907      	bls.n	8000e5a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000e4a:	f000 ffd7 	bl	8001dfc <__errno>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	230c      	movs	r3, #12
 8000e52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	e006      	b.n	8000e68 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <_sbrk+0x50>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <_sbrk+0x50>)
 8000e64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000008c 	.word	0x2000008c
 8000e74:	200000c8 	.word	0x200000c8

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f92d 	bl	8001124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff ff54 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f937 	bl	8001172 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f90d 	bl	800113a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	200000c0 	.word	0x200000c0

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200000c0 	.word	0x200000c0

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <HAL_Delay+0x40>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d3f7      	bcc.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	490d      	ldr	r1, [pc, #52]	; (8001074 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	4909      	ldr	r1, [pc, #36]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	2201      	movs	r2, #1
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	401a      	ands	r2, r3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c2:	2101      	movs	r1, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ca:	1e59      	subs	r1, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	4313      	orrs	r3, r2
         );
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3724      	adds	r7, #36	; 0x24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f0:	d301      	bcc.n	80010f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f2:	2301      	movs	r3, #1
 80010f4:	e00f      	b.n	8001116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <SysTick_Config+0x40>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fe:	210f      	movs	r1, #15
 8001100:	f04f 30ff 	mov.w	r0, #4294967295
 8001104:	f7ff ff90 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <SysTick_Config+0x40>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110e:	4b04      	ldr	r3, [pc, #16]	; (8001120 <SysTick_Config+0x40>)
 8001110:	2207      	movs	r2, #7
 8001112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010

08001124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ff49 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800114c:	f7ff ff5e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	68b9      	ldr	r1, [r7, #8]
 8001156:	6978      	ldr	r0, [r7, #20]
 8001158:	f7ff ff90 	bl	800107c <NVIC_EncodePriority>
 800115c:	4602      	mov	r2, r0
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff5f 	bl	8001028 <__NVIC_SetPriority>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffb0 	bl	80010e0 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e16b      	b.n	8001480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 815a 	bne.w	800147a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80b4 	beq.w	800147a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4a5f      	ldr	r2, [pc, #380]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <HAL_GPIO_Init+0x308>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <HAL_GPIO_Init+0x308>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <HAL_GPIO_Init+0x30c>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x310>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d02b      	beq.n	80013b2 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a50      	ldr	r2, [pc, #320]	; (80014a0 <HAL_GPIO_Init+0x314>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x318>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x31c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x21a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x320>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x216>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x324>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x212>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x328>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x20e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x32c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x20a>
 8001392:	2307      	movs	r3, #7
 8001394:	e00e      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 8001396:	2308      	movs	r3, #8
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139a:	2306      	movs	r3, #6
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x228>
 80013b2:	2300      	movs	r3, #0
 80013b4:	69fa      	ldr	r2, [r7, #28]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	4934      	ldr	r1, [pc, #208]	; (8001498 <HAL_GPIO_Init+0x30c>)
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d2:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f6:	4a31      	ldr	r2, [pc, #196]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <HAL_GPIO_Init+0x330>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001420:	4a26      	ldr	r2, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <HAL_GPIO_Init+0x330>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a11      	ldr	r2, [pc, #68]	; (80014bc <HAL_GPIO_Init+0x330>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	2b0f      	cmp	r3, #15
 8001484:	f67f ae90 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001488:	bf00      	nop
 800148a:	3724      	adds	r7, #36	; 0x24
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40023800 	.word	0x40023800
 8001498:	40013800 	.word	0x40013800
 800149c:	40020000 	.word	0x40020000
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40020800 	.word	0x40020800
 80014a8:	40020c00 	.word	0x40020c00
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40021400 	.word	0x40021400
 80014b4:	40021800 	.word	0x40021800
 80014b8:	40021c00 	.word	0x40021c00
 80014bc:	40013c00 	.word	0x40013c00

080014c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800150c:	e003      	b.n	8001516 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	887b      	ldrh	r3, [r7, #2]
 8001510:	041a      	lsls	r2, r3, #16
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e264      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d075      	beq.n	800162e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001542:	4ba3      	ldr	r3, [pc, #652]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d00c      	beq.n	8001568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4ba0      	ldr	r3, [pc, #640]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	2b08      	cmp	r3, #8
 8001558:	d112      	bne.n	8001580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155a:	4b9d      	ldr	r3, [pc, #628]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001566:	d10b      	bne.n	8001580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	4b99      	ldr	r3, [pc, #612]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d05b      	beq.n	800162c <HAL_RCC_OscConfig+0x108>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d157      	bne.n	800162c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e23f      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d106      	bne.n	8001598 <HAL_RCC_OscConfig+0x74>
 800158a:	4a91      	ldr	r2, [pc, #580]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 800158c:	4b90      	ldr	r3, [pc, #576]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e01d      	b.n	80015d4 <HAL_RCC_OscConfig+0xb0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x98>
 80015a2:	4a8b      	ldr	r2, [pc, #556]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	4b8a      	ldr	r3, [pc, #552]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4a88      	ldr	r2, [pc, #544]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	4b87      	ldr	r3, [pc, #540]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0xb0>
 80015bc:	4a84      	ldr	r2, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	4b84      	ldr	r3, [pc, #528]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4a81      	ldr	r2, [pc, #516]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	4b81      	ldr	r3, [pc, #516]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fcc4 	bl	8000f68 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fcc0 	bl	8000f68 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e204      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b76      	ldr	r3, [pc, #472]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0xc0>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fcb0 	bl	8000f68 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fcac 	bl	8000f68 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1f0      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	4b6c      	ldr	r3, [pc, #432]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0xe8>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d063      	beq.n	8001702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163a:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b62      	ldr	r3, [pc, #392]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	2b08      	cmp	r3, #8
 8001650:	d11c      	bne.n	800168c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	4b5f      	ldr	r3, [pc, #380]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d116      	bne.n	800168c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	4b5c      	ldr	r3, [pc, #368]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x152>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e1c4      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4956      	ldr	r1, [pc, #344]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	4b55      	ldr	r3, [pc, #340]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	e03a      	b.n	8001702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001694:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <HAL_RCC_OscConfig+0x2b0>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fc65 	bl	8000f68 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc61 	bl	8000f68 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1a5      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	4b46      	ldr	r3, [pc, #280]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4943      	ldr	r1, [pc, #268]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b3f      	ldr	r3, [pc, #252]	; (80017d4 <HAL_RCC_OscConfig+0x2b0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc44 	bl	8000f68 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fc40 	bl	8000f68 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e184      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d030      	beq.n	8001770 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d016      	beq.n	8001744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <HAL_RCC_OscConfig+0x2b4>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fc24 	bl	8000f68 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fc20 	bl	8000f68 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e164      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	4b26      	ldr	r3, [pc, #152]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x200>
 8001742:	e015      	b.n	8001770 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_RCC_OscConfig+0x2b4>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fc0d 	bl	8000f68 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff fc09 	bl	8000f68 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e14d      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f0      	bne.n	8001752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80a0 	beq.w	80018be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d10f      	bne.n	80017ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001794:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <HAL_RCC_OscConfig+0x2ac>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d121      	bne.n	80017fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_RCC_OscConfig+0x2b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fbcf 	bl	8000f68 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e011      	b.n	80017f2 <HAL_RCC_OscConfig+0x2ce>
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	42470000 	.word	0x42470000
 80017d8:	42470e80 	.word	0x42470e80
 80017dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e0:	f7ff fbc2 	bl	8000f68 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e106      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f2:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_RCC_OscConfig+0x4e4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d106      	bne.n	8001814 <HAL_RCC_OscConfig+0x2f0>
 8001806:	4a81      	ldr	r2, [pc, #516]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001808:	4b80      	ldr	r3, [pc, #512]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 800180a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	; 0x70
 8001812:	e01c      	b.n	800184e <HAL_RCC_OscConfig+0x32a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d10c      	bne.n	8001836 <HAL_RCC_OscConfig+0x312>
 800181c:	4a7b      	ldr	r2, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 800181e:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
 8001828:	4a78      	ldr	r2, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6713      	str	r3, [r2, #112]	; 0x70
 8001834:	e00b      	b.n	800184e <HAL_RCC_OscConfig+0x32a>
 8001836:	4a75      	ldr	r2, [pc, #468]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001838:	4b74      	ldr	r3, [pc, #464]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
 8001842:	4a72      	ldr	r2, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001844:	4b71      	ldr	r3, [pc, #452]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	f023 0304 	bic.w	r3, r3, #4
 800184c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d015      	beq.n	8001882 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001856:	f7ff fb87 	bl	8000f68 <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fb83 	bl	8000f68 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0c5      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001874:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ee      	beq.n	800185e <HAL_RCC_OscConfig+0x33a>
 8001880:	e014      	b.n	80018ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff fb71 	bl	8000f68 <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff fb6d 	bl	8000f68 <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e0af      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a0:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ee      	bne.n	800188a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d105      	bne.n	80018be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b2:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 80018b4:	4b55      	ldr	r3, [pc, #340]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 809b 	beq.w	80019fe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d05c      	beq.n	800198e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d141      	bne.n	8001960 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b4c      	ldr	r3, [pc, #304]	; (8001a10 <HAL_RCC_OscConfig+0x4ec>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb41 	bl	8000f68 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff fb3d 	bl	8000f68 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e081      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001908:	4940      	ldr	r1, [pc, #256]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69da      	ldr	r2, [r3, #28]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	085b      	lsrs	r3, r3, #1
 8001922:	3b01      	subs	r3, #1
 8001924:	041b      	lsls	r3, r3, #16
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001932:	4b37      	ldr	r3, [pc, #220]	; (8001a10 <HAL_RCC_OscConfig+0x4ec>)
 8001934:	2201      	movs	r2, #1
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff fb16 	bl	8000f68 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff fb12 	bl	8000f68 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e056      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x41c>
 800195e:	e04e      	b.n	80019fe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001960:	4b2b      	ldr	r3, [pc, #172]	; (8001a10 <HAL_RCC_OscConfig+0x4ec>)
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff faff 	bl	8000f68 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff fafb 	bl	8000f68 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e03f      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x44a>
 800198c:	e037      	b.n	80019fe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e032      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800199a:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <HAL_RCC_OscConfig+0x4e8>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d028      	beq.n	80019fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d121      	bne.n	80019fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d11a      	bne.n	80019fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ca:	4013      	ands	r3, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d111      	bne.n	80019fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d001      	beq.n	80019fe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	42470060 	.word	0x42470060

08001a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0cc      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0207 	and.w	r2, r3, #7
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d20c      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0207 	and.w	r2, r3, #7
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4a59      	ldr	r2, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4a53      	ldr	r2, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4950      	ldr	r1, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d044      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d119      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e06f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e067      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af2:	4937      	ldr	r1, [pc, #220]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 0203 	bic.w	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b04:	f7ff fa30 	bl	8000f68 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff fa2c 	bl	8000f68 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e04f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 020c 	and.w	r2, r3, #12
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1eb      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0207 	and.w	r2, r3, #7
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d90c      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0207 	and.w	r2, r3, #7
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4919      	ldr	r1, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b86:	4912      	ldr	r1, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4601      	mov	r1, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	4a0a      	ldr	r2, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	5cd3      	ldrb	r3, [r2, r3]
 8001bae:	fa21 f303 	lsr.w	r3, r1, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f990 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	080026bc 	.word	0x080026bc
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be4:	b08f      	sub	sp, #60	; 0x3c
 8001be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bec:	2300      	movs	r3, #0
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf8:	4b62      	ldr	r3, [pc, #392]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d007      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	d008      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f040 80b2 	bne.w	8001d72 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001c12:	e0b1      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c14:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001c16:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c18:	e0ae      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c24:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d04e      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c30:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	099b      	lsrs	r3, r3, #6
 8001c36:	f04f 0400 	mov.w	r4, #0
 8001c3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	ea01 0103 	and.w	r1, r1, r3
 8001c46:	ea02 0204 	and.w	r2, r2, r4
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	0160      	lsls	r0, r4, #5
 8001c50:	6278      	str	r0, [r7, #36]	; 0x24
 8001c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c54:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001c58:	6278      	str	r0, [r7, #36]	; 0x24
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001c62:	1a5b      	subs	r3, r3, r1
 8001c64:	eb64 0402 	sbc.w	r4, r4, r2
 8001c68:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001c6c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001c70:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001c74:	ebb8 0803 	subs.w	r8, r8, r3
 8001c78:	eb69 0904 	sbc.w	r9, r9, r4
 8001c7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c94:	eb18 0801 	adds.w	r8, r8, r1
 8001c98:	eb49 0902 	adc.w	r9, r9, r2
 8001c9c:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cb4:	4640      	mov	r0, r8
 8001cb6:	4649      	mov	r1, r9
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	f04f 0400 	mov.w	r4, #0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4623      	mov	r3, r4
 8001cc2:	f7fe fad5 	bl	8000270 <__aeabi_uldivmod>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
 8001ccc:	e043      	b.n	8001d56 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	f04f 0400 	mov.w	r4, #0
 8001cd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	ea01 0103 	and.w	r1, r1, r3
 8001ce4:	ea02 0204 	and.w	r2, r2, r4
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4614      	mov	r4, r2
 8001cec:	0160      	lsls	r0, r4, #5
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	015b      	lsls	r3, r3, #5
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001d00:	1a5b      	subs	r3, r3, r1
 8001d02:	eb64 0402 	sbc.w	r4, r4, r2
 8001d06:	01a6      	lsls	r6, r4, #6
 8001d08:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001d0c:	019d      	lsls	r5, r3, #6
 8001d0e:	1aed      	subs	r5, r5, r3
 8001d10:	eb66 0604 	sbc.w	r6, r6, r4
 8001d14:	00f3      	lsls	r3, r6, #3
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	00eb      	lsls	r3, r5, #3
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001d28:	186d      	adds	r5, r5, r1
 8001d2a:	eb46 0602 	adc.w	r6, r6, r2
 8001d2e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001d32:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001d36:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001d3a:	4655      	mov	r5, sl
 8001d3c:	465e      	mov	r6, fp
 8001d3e:	4628      	mov	r0, r5
 8001d40:	4631      	mov	r1, r6
 8001d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d44:	f04f 0400 	mov.w	r4, #0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	f7fe fa90 	bl	8000270 <__aeabi_uldivmod>
 8001d50:	4603      	mov	r3, r0
 8001d52:	460c      	mov	r4, r1
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	0c1b      	lsrs	r3, r3, #16
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	3301      	adds	r3, #1
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8001d66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d70:	e002      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	373c      	adds	r7, #60	; 0x3c
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000000 	.word	0x20000000

08001da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dae:	490e      	ldr	r1, [pc, #56]	; (8001de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db0:	4a0e      	ldr	r2, [pc, #56]	; (8001dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db4:	e002      	b.n	8001dbc <LoopCopyDataInit>

08001db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dba:	3304      	adds	r3, #4

08001dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc0:	d3f9      	bcc.n	8001db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc4:	4c0b      	ldr	r4, [pc, #44]	; (8001df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc8:	e001      	b.n	8001dce <LoopFillZerobss>

08001dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dcc:	3204      	adds	r2, #4

08001dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd0:	d3fb      	bcc.n	8001dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dd2:	f7ff f851 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f000 f817 	bl	8001e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dda:	f7fe fe93 	bl	8000b04 <main>
  bx  lr    
 8001dde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001dec:	08002710 	.word	0x08002710
  ldr r2, =_sbss
 8001df0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001df4:	200000c8 	.word	0x200000c8

08001df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df8:	e7fe      	b.n	8001df8 <ADC_IRQHandler>
	...

08001dfc <__errno>:
 8001dfc:	4b01      	ldr	r3, [pc, #4]	; (8001e04 <__errno+0x8>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	2000000c 	.word	0x2000000c

08001e08 <__libc_init_array>:
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	4e0d      	ldr	r6, [pc, #52]	; (8001e40 <__libc_init_array+0x38>)
 8001e0c:	4c0d      	ldr	r4, [pc, #52]	; (8001e44 <__libc_init_array+0x3c>)
 8001e0e:	1ba4      	subs	r4, r4, r6
 8001e10:	10a4      	asrs	r4, r4, #2
 8001e12:	2500      	movs	r5, #0
 8001e14:	42a5      	cmp	r5, r4
 8001e16:	d109      	bne.n	8001e2c <__libc_init_array+0x24>
 8001e18:	4e0b      	ldr	r6, [pc, #44]	; (8001e48 <__libc_init_array+0x40>)
 8001e1a:	4c0c      	ldr	r4, [pc, #48]	; (8001e4c <__libc_init_array+0x44>)
 8001e1c:	f000 fc3e 	bl	800269c <_init>
 8001e20:	1ba4      	subs	r4, r4, r6
 8001e22:	10a4      	asrs	r4, r4, #2
 8001e24:	2500      	movs	r5, #0
 8001e26:	42a5      	cmp	r5, r4
 8001e28:	d105      	bne.n	8001e36 <__libc_init_array+0x2e>
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e30:	4798      	blx	r3
 8001e32:	3501      	adds	r5, #1
 8001e34:	e7ee      	b.n	8001e14 <__libc_init_array+0xc>
 8001e36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e3a:	4798      	blx	r3
 8001e3c:	3501      	adds	r5, #1
 8001e3e:	e7f2      	b.n	8001e26 <__libc_init_array+0x1e>
 8001e40:	08002708 	.word	0x08002708
 8001e44:	08002708 	.word	0x08002708
 8001e48:	08002708 	.word	0x08002708
 8001e4c:	0800270c 	.word	0x0800270c

08001e50 <memset>:
 8001e50:	4402      	add	r2, r0
 8001e52:	4603      	mov	r3, r0
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d100      	bne.n	8001e5a <memset+0xa>
 8001e58:	4770      	bx	lr
 8001e5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e5e:	e7f9      	b.n	8001e54 <memset+0x4>

08001e60 <siprintf>:
 8001e60:	b40e      	push	{r1, r2, r3}
 8001e62:	b500      	push	{lr}
 8001e64:	b09c      	sub	sp, #112	; 0x70
 8001e66:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001e6a:	ab1d      	add	r3, sp, #116	; 0x74
 8001e6c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001e70:	9002      	str	r0, [sp, #8]
 8001e72:	9006      	str	r0, [sp, #24]
 8001e74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <siprintf+0x44>)
 8001e7a:	9104      	str	r1, [sp, #16]
 8001e7c:	9107      	str	r1, [sp, #28]
 8001e7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e82:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e86:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001e8a:	6800      	ldr	r0, [r0, #0]
 8001e8c:	9301      	str	r3, [sp, #4]
 8001e8e:	a902      	add	r1, sp, #8
 8001e90:	f000 f866 	bl	8001f60 <_svfiprintf_r>
 8001e94:	9b02      	ldr	r3, [sp, #8]
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
 8001e9a:	b01c      	add	sp, #112	; 0x70
 8001e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ea0:	b003      	add	sp, #12
 8001ea2:	4770      	bx	lr
 8001ea4:	2000000c 	.word	0x2000000c

08001ea8 <__ssputs_r>:
 8001ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001eac:	688e      	ldr	r6, [r1, #8]
 8001eae:	429e      	cmp	r6, r3
 8001eb0:	4682      	mov	sl, r0
 8001eb2:	460c      	mov	r4, r1
 8001eb4:	4691      	mov	r9, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	d835      	bhi.n	8001f26 <__ssputs_r+0x7e>
 8001eba:	898a      	ldrh	r2, [r1, #12]
 8001ebc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ec0:	d031      	beq.n	8001f26 <__ssputs_r+0x7e>
 8001ec2:	6825      	ldr	r5, [r4, #0]
 8001ec4:	6909      	ldr	r1, [r1, #16]
 8001ec6:	1a6f      	subs	r7, r5, r1
 8001ec8:	6965      	ldr	r5, [r4, #20]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ed0:	fb95 f5f3 	sdiv	r5, r5, r3
 8001ed4:	f108 0301 	add.w	r3, r8, #1
 8001ed8:	443b      	add	r3, r7
 8001eda:	429d      	cmp	r5, r3
 8001edc:	bf38      	it	cc
 8001ede:	461d      	movcc	r5, r3
 8001ee0:	0553      	lsls	r3, r2, #21
 8001ee2:	d531      	bpl.n	8001f48 <__ssputs_r+0xa0>
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f000 fb39 	bl	800255c <_malloc_r>
 8001eea:	4606      	mov	r6, r0
 8001eec:	b950      	cbnz	r0, 8001f04 <__ssputs_r+0x5c>
 8001eee:	230c      	movs	r3, #12
 8001ef0:	f8ca 3000 	str.w	r3, [sl]
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efa:	81a3      	strh	r3, [r4, #12]
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f04:	463a      	mov	r2, r7
 8001f06:	6921      	ldr	r1, [r4, #16]
 8001f08:	f000 fab4 	bl	8002474 <memcpy>
 8001f0c:	89a3      	ldrh	r3, [r4, #12]
 8001f0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f16:	81a3      	strh	r3, [r4, #12]
 8001f18:	6126      	str	r6, [r4, #16]
 8001f1a:	6165      	str	r5, [r4, #20]
 8001f1c:	443e      	add	r6, r7
 8001f1e:	1bed      	subs	r5, r5, r7
 8001f20:	6026      	str	r6, [r4, #0]
 8001f22:	60a5      	str	r5, [r4, #8]
 8001f24:	4646      	mov	r6, r8
 8001f26:	4546      	cmp	r6, r8
 8001f28:	bf28      	it	cs
 8001f2a:	4646      	movcs	r6, r8
 8001f2c:	4632      	mov	r2, r6
 8001f2e:	4649      	mov	r1, r9
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	f000 faaa 	bl	800248a <memmove>
 8001f36:	68a3      	ldr	r3, [r4, #8]
 8001f38:	1b9b      	subs	r3, r3, r6
 8001f3a:	60a3      	str	r3, [r4, #8]
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	441e      	add	r6, r3
 8001f40:	6026      	str	r6, [r4, #0]
 8001f42:	2000      	movs	r0, #0
 8001f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f48:	462a      	mov	r2, r5
 8001f4a:	f000 fb65 	bl	8002618 <_realloc_r>
 8001f4e:	4606      	mov	r6, r0
 8001f50:	2800      	cmp	r0, #0
 8001f52:	d1e1      	bne.n	8001f18 <__ssputs_r+0x70>
 8001f54:	6921      	ldr	r1, [r4, #16]
 8001f56:	4650      	mov	r0, sl
 8001f58:	f000 fab2 	bl	80024c0 <_free_r>
 8001f5c:	e7c7      	b.n	8001eee <__ssputs_r+0x46>
	...

08001f60 <_svfiprintf_r>:
 8001f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f64:	b09d      	sub	sp, #116	; 0x74
 8001f66:	4680      	mov	r8, r0
 8001f68:	9303      	str	r3, [sp, #12]
 8001f6a:	898b      	ldrh	r3, [r1, #12]
 8001f6c:	061c      	lsls	r4, r3, #24
 8001f6e:	460d      	mov	r5, r1
 8001f70:	4616      	mov	r6, r2
 8001f72:	d50f      	bpl.n	8001f94 <_svfiprintf_r+0x34>
 8001f74:	690b      	ldr	r3, [r1, #16]
 8001f76:	b96b      	cbnz	r3, 8001f94 <_svfiprintf_r+0x34>
 8001f78:	2140      	movs	r1, #64	; 0x40
 8001f7a:	f000 faef 	bl	800255c <_malloc_r>
 8001f7e:	6028      	str	r0, [r5, #0]
 8001f80:	6128      	str	r0, [r5, #16]
 8001f82:	b928      	cbnz	r0, 8001f90 <_svfiprintf_r+0x30>
 8001f84:	230c      	movs	r3, #12
 8001f86:	f8c8 3000 	str.w	r3, [r8]
 8001f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8e:	e0c5      	b.n	800211c <_svfiprintf_r+0x1bc>
 8001f90:	2340      	movs	r3, #64	; 0x40
 8001f92:	616b      	str	r3, [r5, #20]
 8001f94:	2300      	movs	r3, #0
 8001f96:	9309      	str	r3, [sp, #36]	; 0x24
 8001f98:	2320      	movs	r3, #32
 8001f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f9e:	2330      	movs	r3, #48	; 0x30
 8001fa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001fa4:	f04f 0b01 	mov.w	fp, #1
 8001fa8:	4637      	mov	r7, r6
 8001faa:	463c      	mov	r4, r7
 8001fac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d13c      	bne.n	800202e <_svfiprintf_r+0xce>
 8001fb4:	ebb7 0a06 	subs.w	sl, r7, r6
 8001fb8:	d00b      	beq.n	8001fd2 <_svfiprintf_r+0x72>
 8001fba:	4653      	mov	r3, sl
 8001fbc:	4632      	mov	r2, r6
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	4640      	mov	r0, r8
 8001fc2:	f7ff ff71 	bl	8001ea8 <__ssputs_r>
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	f000 80a3 	beq.w	8002112 <_svfiprintf_r+0x1b2>
 8001fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fce:	4453      	add	r3, sl
 8001fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8001fd2:	783b      	ldrb	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 809c 	beq.w	8002112 <_svfiprintf_r+0x1b2>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	9304      	str	r3, [sp, #16]
 8001fe2:	9307      	str	r3, [sp, #28]
 8001fe4:	9205      	str	r2, [sp, #20]
 8001fe6:	9306      	str	r3, [sp, #24]
 8001fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fec:	931a      	str	r3, [sp, #104]	; 0x68
 8001fee:	2205      	movs	r2, #5
 8001ff0:	7821      	ldrb	r1, [r4, #0]
 8001ff2:	4850      	ldr	r0, [pc, #320]	; (8002134 <_svfiprintf_r+0x1d4>)
 8001ff4:	f7fe f8ec 	bl	80001d0 <memchr>
 8001ff8:	1c67      	adds	r7, r4, #1
 8001ffa:	9b04      	ldr	r3, [sp, #16]
 8001ffc:	b9d8      	cbnz	r0, 8002036 <_svfiprintf_r+0xd6>
 8001ffe:	06d9      	lsls	r1, r3, #27
 8002000:	bf44      	itt	mi
 8002002:	2220      	movmi	r2, #32
 8002004:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002008:	071a      	lsls	r2, r3, #28
 800200a:	bf44      	itt	mi
 800200c:	222b      	movmi	r2, #43	; 0x2b
 800200e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002012:	7822      	ldrb	r2, [r4, #0]
 8002014:	2a2a      	cmp	r2, #42	; 0x2a
 8002016:	d016      	beq.n	8002046 <_svfiprintf_r+0xe6>
 8002018:	9a07      	ldr	r2, [sp, #28]
 800201a:	2100      	movs	r1, #0
 800201c:	200a      	movs	r0, #10
 800201e:	4627      	mov	r7, r4
 8002020:	3401      	adds	r4, #1
 8002022:	783b      	ldrb	r3, [r7, #0]
 8002024:	3b30      	subs	r3, #48	; 0x30
 8002026:	2b09      	cmp	r3, #9
 8002028:	d951      	bls.n	80020ce <_svfiprintf_r+0x16e>
 800202a:	b1c9      	cbz	r1, 8002060 <_svfiprintf_r+0x100>
 800202c:	e011      	b.n	8002052 <_svfiprintf_r+0xf2>
 800202e:	2b25      	cmp	r3, #37	; 0x25
 8002030:	d0c0      	beq.n	8001fb4 <_svfiprintf_r+0x54>
 8002032:	4627      	mov	r7, r4
 8002034:	e7b9      	b.n	8001faa <_svfiprintf_r+0x4a>
 8002036:	4a3f      	ldr	r2, [pc, #252]	; (8002134 <_svfiprintf_r+0x1d4>)
 8002038:	1a80      	subs	r0, r0, r2
 800203a:	fa0b f000 	lsl.w	r0, fp, r0
 800203e:	4318      	orrs	r0, r3
 8002040:	9004      	str	r0, [sp, #16]
 8002042:	463c      	mov	r4, r7
 8002044:	e7d3      	b.n	8001fee <_svfiprintf_r+0x8e>
 8002046:	9a03      	ldr	r2, [sp, #12]
 8002048:	1d11      	adds	r1, r2, #4
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	9103      	str	r1, [sp, #12]
 800204e:	2a00      	cmp	r2, #0
 8002050:	db01      	blt.n	8002056 <_svfiprintf_r+0xf6>
 8002052:	9207      	str	r2, [sp, #28]
 8002054:	e004      	b.n	8002060 <_svfiprintf_r+0x100>
 8002056:	4252      	negs	r2, r2
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	9207      	str	r2, [sp, #28]
 800205e:	9304      	str	r3, [sp, #16]
 8002060:	783b      	ldrb	r3, [r7, #0]
 8002062:	2b2e      	cmp	r3, #46	; 0x2e
 8002064:	d10e      	bne.n	8002084 <_svfiprintf_r+0x124>
 8002066:	787b      	ldrb	r3, [r7, #1]
 8002068:	2b2a      	cmp	r3, #42	; 0x2a
 800206a:	f107 0101 	add.w	r1, r7, #1
 800206e:	d132      	bne.n	80020d6 <_svfiprintf_r+0x176>
 8002070:	9b03      	ldr	r3, [sp, #12]
 8002072:	1d1a      	adds	r2, r3, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	9203      	str	r2, [sp, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	bfb8      	it	lt
 800207c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002080:	3702      	adds	r7, #2
 8002082:	9305      	str	r3, [sp, #20]
 8002084:	4c2c      	ldr	r4, [pc, #176]	; (8002138 <_svfiprintf_r+0x1d8>)
 8002086:	7839      	ldrb	r1, [r7, #0]
 8002088:	2203      	movs	r2, #3
 800208a:	4620      	mov	r0, r4
 800208c:	f7fe f8a0 	bl	80001d0 <memchr>
 8002090:	b138      	cbz	r0, 80020a2 <_svfiprintf_r+0x142>
 8002092:	2340      	movs	r3, #64	; 0x40
 8002094:	1b00      	subs	r0, r0, r4
 8002096:	fa03 f000 	lsl.w	r0, r3, r0
 800209a:	9b04      	ldr	r3, [sp, #16]
 800209c:	4303      	orrs	r3, r0
 800209e:	9304      	str	r3, [sp, #16]
 80020a0:	3701      	adds	r7, #1
 80020a2:	7839      	ldrb	r1, [r7, #0]
 80020a4:	4825      	ldr	r0, [pc, #148]	; (800213c <_svfiprintf_r+0x1dc>)
 80020a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80020aa:	2206      	movs	r2, #6
 80020ac:	1c7e      	adds	r6, r7, #1
 80020ae:	f7fe f88f 	bl	80001d0 <memchr>
 80020b2:	2800      	cmp	r0, #0
 80020b4:	d035      	beq.n	8002122 <_svfiprintf_r+0x1c2>
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <_svfiprintf_r+0x1e0>)
 80020b8:	b9fb      	cbnz	r3, 80020fa <_svfiprintf_r+0x19a>
 80020ba:	9b03      	ldr	r3, [sp, #12]
 80020bc:	3307      	adds	r3, #7
 80020be:	f023 0307 	bic.w	r3, r3, #7
 80020c2:	3308      	adds	r3, #8
 80020c4:	9303      	str	r3, [sp, #12]
 80020c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020c8:	444b      	add	r3, r9
 80020ca:	9309      	str	r3, [sp, #36]	; 0x24
 80020cc:	e76c      	b.n	8001fa8 <_svfiprintf_r+0x48>
 80020ce:	fb00 3202 	mla	r2, r0, r2, r3
 80020d2:	2101      	movs	r1, #1
 80020d4:	e7a3      	b.n	800201e <_svfiprintf_r+0xbe>
 80020d6:	2300      	movs	r3, #0
 80020d8:	9305      	str	r3, [sp, #20]
 80020da:	4618      	mov	r0, r3
 80020dc:	240a      	movs	r4, #10
 80020de:	460f      	mov	r7, r1
 80020e0:	3101      	adds	r1, #1
 80020e2:	783a      	ldrb	r2, [r7, #0]
 80020e4:	3a30      	subs	r2, #48	; 0x30
 80020e6:	2a09      	cmp	r2, #9
 80020e8:	d903      	bls.n	80020f2 <_svfiprintf_r+0x192>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0ca      	beq.n	8002084 <_svfiprintf_r+0x124>
 80020ee:	9005      	str	r0, [sp, #20]
 80020f0:	e7c8      	b.n	8002084 <_svfiprintf_r+0x124>
 80020f2:	fb04 2000 	mla	r0, r4, r0, r2
 80020f6:	2301      	movs	r3, #1
 80020f8:	e7f1      	b.n	80020de <_svfiprintf_r+0x17e>
 80020fa:	ab03      	add	r3, sp, #12
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	462a      	mov	r2, r5
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_svfiprintf_r+0x1e4>)
 8002102:	a904      	add	r1, sp, #16
 8002104:	4640      	mov	r0, r8
 8002106:	f3af 8000 	nop.w
 800210a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800210e:	4681      	mov	r9, r0
 8002110:	d1d9      	bne.n	80020c6 <_svfiprintf_r+0x166>
 8002112:	89ab      	ldrh	r3, [r5, #12]
 8002114:	065b      	lsls	r3, r3, #25
 8002116:	f53f af38 	bmi.w	8001f8a <_svfiprintf_r+0x2a>
 800211a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800211c:	b01d      	add	sp, #116	; 0x74
 800211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002122:	ab03      	add	r3, sp, #12
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	462a      	mov	r2, r5
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <_svfiprintf_r+0x1e4>)
 800212a:	a904      	add	r1, sp, #16
 800212c:	4640      	mov	r0, r8
 800212e:	f000 f881 	bl	8002234 <_printf_i>
 8002132:	e7ea      	b.n	800210a <_svfiprintf_r+0x1aa>
 8002134:	080026cc 	.word	0x080026cc
 8002138:	080026d2 	.word	0x080026d2
 800213c:	080026d6 	.word	0x080026d6
 8002140:	00000000 	.word	0x00000000
 8002144:	08001ea9 	.word	0x08001ea9

08002148 <_printf_common>:
 8002148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800214c:	4691      	mov	r9, r2
 800214e:	461f      	mov	r7, r3
 8002150:	688a      	ldr	r2, [r1, #8]
 8002152:	690b      	ldr	r3, [r1, #16]
 8002154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002158:	4293      	cmp	r3, r2
 800215a:	bfb8      	it	lt
 800215c:	4613      	movlt	r3, r2
 800215e:	f8c9 3000 	str.w	r3, [r9]
 8002162:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002166:	4606      	mov	r6, r0
 8002168:	460c      	mov	r4, r1
 800216a:	b112      	cbz	r2, 8002172 <_printf_common+0x2a>
 800216c:	3301      	adds	r3, #1
 800216e:	f8c9 3000 	str.w	r3, [r9]
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	0699      	lsls	r1, r3, #26
 8002176:	bf42      	ittt	mi
 8002178:	f8d9 3000 	ldrmi.w	r3, [r9]
 800217c:	3302      	addmi	r3, #2
 800217e:	f8c9 3000 	strmi.w	r3, [r9]
 8002182:	6825      	ldr	r5, [r4, #0]
 8002184:	f015 0506 	ands.w	r5, r5, #6
 8002188:	d107      	bne.n	800219a <_printf_common+0x52>
 800218a:	f104 0a19 	add.w	sl, r4, #25
 800218e:	68e3      	ldr	r3, [r4, #12]
 8002190:	f8d9 2000 	ldr.w	r2, [r9]
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	429d      	cmp	r5, r3
 8002198:	db29      	blt.n	80021ee <_printf_common+0xa6>
 800219a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	3300      	adds	r3, #0
 80021a2:	bf18      	it	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	0692      	lsls	r2, r2, #26
 80021a8:	d42e      	bmi.n	8002208 <_printf_common+0xc0>
 80021aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80021ae:	4639      	mov	r1, r7
 80021b0:	4630      	mov	r0, r6
 80021b2:	47c0      	blx	r8
 80021b4:	3001      	adds	r0, #1
 80021b6:	d021      	beq.n	80021fc <_printf_common+0xb4>
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	68e5      	ldr	r5, [r4, #12]
 80021bc:	f8d9 2000 	ldr.w	r2, [r9]
 80021c0:	f003 0306 	and.w	r3, r3, #6
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	bf08      	it	eq
 80021c8:	1aad      	subeq	r5, r5, r2
 80021ca:	68a3      	ldr	r3, [r4, #8]
 80021cc:	6922      	ldr	r2, [r4, #16]
 80021ce:	bf0c      	ite	eq
 80021d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021d4:	2500      	movne	r5, #0
 80021d6:	4293      	cmp	r3, r2
 80021d8:	bfc4      	itt	gt
 80021da:	1a9b      	subgt	r3, r3, r2
 80021dc:	18ed      	addgt	r5, r5, r3
 80021de:	f04f 0900 	mov.w	r9, #0
 80021e2:	341a      	adds	r4, #26
 80021e4:	454d      	cmp	r5, r9
 80021e6:	d11b      	bne.n	8002220 <_printf_common+0xd8>
 80021e8:	2000      	movs	r0, #0
 80021ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021ee:	2301      	movs	r3, #1
 80021f0:	4652      	mov	r2, sl
 80021f2:	4639      	mov	r1, r7
 80021f4:	4630      	mov	r0, r6
 80021f6:	47c0      	blx	r8
 80021f8:	3001      	adds	r0, #1
 80021fa:	d103      	bne.n	8002204 <_printf_common+0xbc>
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002204:	3501      	adds	r5, #1
 8002206:	e7c2      	b.n	800218e <_printf_common+0x46>
 8002208:	18e1      	adds	r1, r4, r3
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	2030      	movs	r0, #48	; 0x30
 800220e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002212:	4422      	add	r2, r4
 8002214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800221c:	3302      	adds	r3, #2
 800221e:	e7c4      	b.n	80021aa <_printf_common+0x62>
 8002220:	2301      	movs	r3, #1
 8002222:	4622      	mov	r2, r4
 8002224:	4639      	mov	r1, r7
 8002226:	4630      	mov	r0, r6
 8002228:	47c0      	blx	r8
 800222a:	3001      	adds	r0, #1
 800222c:	d0e6      	beq.n	80021fc <_printf_common+0xb4>
 800222e:	f109 0901 	add.w	r9, r9, #1
 8002232:	e7d7      	b.n	80021e4 <_printf_common+0x9c>

08002234 <_printf_i>:
 8002234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002238:	4617      	mov	r7, r2
 800223a:	7e0a      	ldrb	r2, [r1, #24]
 800223c:	b085      	sub	sp, #20
 800223e:	2a6e      	cmp	r2, #110	; 0x6e
 8002240:	4698      	mov	r8, r3
 8002242:	4606      	mov	r6, r0
 8002244:	460c      	mov	r4, r1
 8002246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002248:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800224c:	f000 80bc 	beq.w	80023c8 <_printf_i+0x194>
 8002250:	d81a      	bhi.n	8002288 <_printf_i+0x54>
 8002252:	2a63      	cmp	r2, #99	; 0x63
 8002254:	d02e      	beq.n	80022b4 <_printf_i+0x80>
 8002256:	d80a      	bhi.n	800226e <_printf_i+0x3a>
 8002258:	2a00      	cmp	r2, #0
 800225a:	f000 80c8 	beq.w	80023ee <_printf_i+0x1ba>
 800225e:	2a58      	cmp	r2, #88	; 0x58
 8002260:	f000 808a 	beq.w	8002378 <_printf_i+0x144>
 8002264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002268:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800226c:	e02a      	b.n	80022c4 <_printf_i+0x90>
 800226e:	2a64      	cmp	r2, #100	; 0x64
 8002270:	d001      	beq.n	8002276 <_printf_i+0x42>
 8002272:	2a69      	cmp	r2, #105	; 0x69
 8002274:	d1f6      	bne.n	8002264 <_printf_i+0x30>
 8002276:	6821      	ldr	r1, [r4, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800227e:	d023      	beq.n	80022c8 <_printf_i+0x94>
 8002280:	1d11      	adds	r1, r2, #4
 8002282:	6019      	str	r1, [r3, #0]
 8002284:	6813      	ldr	r3, [r2, #0]
 8002286:	e027      	b.n	80022d8 <_printf_i+0xa4>
 8002288:	2a73      	cmp	r2, #115	; 0x73
 800228a:	f000 80b4 	beq.w	80023f6 <_printf_i+0x1c2>
 800228e:	d808      	bhi.n	80022a2 <_printf_i+0x6e>
 8002290:	2a6f      	cmp	r2, #111	; 0x6f
 8002292:	d02a      	beq.n	80022ea <_printf_i+0xb6>
 8002294:	2a70      	cmp	r2, #112	; 0x70
 8002296:	d1e5      	bne.n	8002264 <_printf_i+0x30>
 8002298:	680a      	ldr	r2, [r1, #0]
 800229a:	f042 0220 	orr.w	r2, r2, #32
 800229e:	600a      	str	r2, [r1, #0]
 80022a0:	e003      	b.n	80022aa <_printf_i+0x76>
 80022a2:	2a75      	cmp	r2, #117	; 0x75
 80022a4:	d021      	beq.n	80022ea <_printf_i+0xb6>
 80022a6:	2a78      	cmp	r2, #120	; 0x78
 80022a8:	d1dc      	bne.n	8002264 <_printf_i+0x30>
 80022aa:	2278      	movs	r2, #120	; 0x78
 80022ac:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80022b0:	496e      	ldr	r1, [pc, #440]	; (800246c <_printf_i+0x238>)
 80022b2:	e064      	b.n	800237e <_printf_i+0x14a>
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80022ba:	1d11      	adds	r1, r2, #4
 80022bc:	6019      	str	r1, [r3, #0]
 80022be:	6813      	ldr	r3, [r2, #0]
 80022c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0a3      	b.n	8002410 <_printf_i+0x1dc>
 80022c8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80022cc:	f102 0104 	add.w	r1, r2, #4
 80022d0:	6019      	str	r1, [r3, #0]
 80022d2:	d0d7      	beq.n	8002284 <_printf_i+0x50>
 80022d4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	da03      	bge.n	80022e4 <_printf_i+0xb0>
 80022dc:	222d      	movs	r2, #45	; 0x2d
 80022de:	425b      	negs	r3, r3
 80022e0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80022e4:	4962      	ldr	r1, [pc, #392]	; (8002470 <_printf_i+0x23c>)
 80022e6:	220a      	movs	r2, #10
 80022e8:	e017      	b.n	800231a <_printf_i+0xe6>
 80022ea:	6820      	ldr	r0, [r4, #0]
 80022ec:	6819      	ldr	r1, [r3, #0]
 80022ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022f2:	d003      	beq.n	80022fc <_printf_i+0xc8>
 80022f4:	1d08      	adds	r0, r1, #4
 80022f6:	6018      	str	r0, [r3, #0]
 80022f8:	680b      	ldr	r3, [r1, #0]
 80022fa:	e006      	b.n	800230a <_printf_i+0xd6>
 80022fc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002300:	f101 0004 	add.w	r0, r1, #4
 8002304:	6018      	str	r0, [r3, #0]
 8002306:	d0f7      	beq.n	80022f8 <_printf_i+0xc4>
 8002308:	880b      	ldrh	r3, [r1, #0]
 800230a:	4959      	ldr	r1, [pc, #356]	; (8002470 <_printf_i+0x23c>)
 800230c:	2a6f      	cmp	r2, #111	; 0x6f
 800230e:	bf14      	ite	ne
 8002310:	220a      	movne	r2, #10
 8002312:	2208      	moveq	r2, #8
 8002314:	2000      	movs	r0, #0
 8002316:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800231a:	6865      	ldr	r5, [r4, #4]
 800231c:	60a5      	str	r5, [r4, #8]
 800231e:	2d00      	cmp	r5, #0
 8002320:	f2c0 809c 	blt.w	800245c <_printf_i+0x228>
 8002324:	6820      	ldr	r0, [r4, #0]
 8002326:	f020 0004 	bic.w	r0, r0, #4
 800232a:	6020      	str	r0, [r4, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d13f      	bne.n	80023b0 <_printf_i+0x17c>
 8002330:	2d00      	cmp	r5, #0
 8002332:	f040 8095 	bne.w	8002460 <_printf_i+0x22c>
 8002336:	4675      	mov	r5, lr
 8002338:	2a08      	cmp	r2, #8
 800233a:	d10b      	bne.n	8002354 <_printf_i+0x120>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	07da      	lsls	r2, r3, #31
 8002340:	d508      	bpl.n	8002354 <_printf_i+0x120>
 8002342:	6923      	ldr	r3, [r4, #16]
 8002344:	6862      	ldr	r2, [r4, #4]
 8002346:	429a      	cmp	r2, r3
 8002348:	bfde      	ittt	le
 800234a:	2330      	movle	r3, #48	; 0x30
 800234c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002350:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002354:	ebae 0305 	sub.w	r3, lr, r5
 8002358:	6123      	str	r3, [r4, #16]
 800235a:	f8cd 8000 	str.w	r8, [sp]
 800235e:	463b      	mov	r3, r7
 8002360:	aa03      	add	r2, sp, #12
 8002362:	4621      	mov	r1, r4
 8002364:	4630      	mov	r0, r6
 8002366:	f7ff feef 	bl	8002148 <_printf_common>
 800236a:	3001      	adds	r0, #1
 800236c:	d155      	bne.n	800241a <_printf_i+0x1e6>
 800236e:	f04f 30ff 	mov.w	r0, #4294967295
 8002372:	b005      	add	sp, #20
 8002374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002378:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800237c:	493c      	ldr	r1, [pc, #240]	; (8002470 <_printf_i+0x23c>)
 800237e:	6822      	ldr	r2, [r4, #0]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002386:	f100 0504 	add.w	r5, r0, #4
 800238a:	601d      	str	r5, [r3, #0]
 800238c:	d001      	beq.n	8002392 <_printf_i+0x15e>
 800238e:	6803      	ldr	r3, [r0, #0]
 8002390:	e002      	b.n	8002398 <_printf_i+0x164>
 8002392:	0655      	lsls	r5, r2, #25
 8002394:	d5fb      	bpl.n	800238e <_printf_i+0x15a>
 8002396:	8803      	ldrh	r3, [r0, #0]
 8002398:	07d0      	lsls	r0, r2, #31
 800239a:	bf44      	itt	mi
 800239c:	f042 0220 	orrmi.w	r2, r2, #32
 80023a0:	6022      	strmi	r2, [r4, #0]
 80023a2:	b91b      	cbnz	r3, 80023ac <_printf_i+0x178>
 80023a4:	6822      	ldr	r2, [r4, #0]
 80023a6:	f022 0220 	bic.w	r2, r2, #32
 80023aa:	6022      	str	r2, [r4, #0]
 80023ac:	2210      	movs	r2, #16
 80023ae:	e7b1      	b.n	8002314 <_printf_i+0xe0>
 80023b0:	4675      	mov	r5, lr
 80023b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80023b6:	fb02 3310 	mls	r3, r2, r0, r3
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80023c0:	4603      	mov	r3, r0
 80023c2:	2800      	cmp	r0, #0
 80023c4:	d1f5      	bne.n	80023b2 <_printf_i+0x17e>
 80023c6:	e7b7      	b.n	8002338 <_printf_i+0x104>
 80023c8:	6808      	ldr	r0, [r1, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	6949      	ldr	r1, [r1, #20]
 80023ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80023d2:	d004      	beq.n	80023de <_printf_i+0x1aa>
 80023d4:	1d10      	adds	r0, r2, #4
 80023d6:	6018      	str	r0, [r3, #0]
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	6019      	str	r1, [r3, #0]
 80023dc:	e007      	b.n	80023ee <_printf_i+0x1ba>
 80023de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023e2:	f102 0004 	add.w	r0, r2, #4
 80023e6:	6018      	str	r0, [r3, #0]
 80023e8:	6813      	ldr	r3, [r2, #0]
 80023ea:	d0f6      	beq.n	80023da <_printf_i+0x1a6>
 80023ec:	8019      	strh	r1, [r3, #0]
 80023ee:	2300      	movs	r3, #0
 80023f0:	6123      	str	r3, [r4, #16]
 80023f2:	4675      	mov	r5, lr
 80023f4:	e7b1      	b.n	800235a <_printf_i+0x126>
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	1d11      	adds	r1, r2, #4
 80023fa:	6019      	str	r1, [r3, #0]
 80023fc:	6815      	ldr	r5, [r2, #0]
 80023fe:	6862      	ldr	r2, [r4, #4]
 8002400:	2100      	movs	r1, #0
 8002402:	4628      	mov	r0, r5
 8002404:	f7fd fee4 	bl	80001d0 <memchr>
 8002408:	b108      	cbz	r0, 800240e <_printf_i+0x1da>
 800240a:	1b40      	subs	r0, r0, r5
 800240c:	6060      	str	r0, [r4, #4]
 800240e:	6863      	ldr	r3, [r4, #4]
 8002410:	6123      	str	r3, [r4, #16]
 8002412:	2300      	movs	r3, #0
 8002414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002418:	e79f      	b.n	800235a <_printf_i+0x126>
 800241a:	6923      	ldr	r3, [r4, #16]
 800241c:	462a      	mov	r2, r5
 800241e:	4639      	mov	r1, r7
 8002420:	4630      	mov	r0, r6
 8002422:	47c0      	blx	r8
 8002424:	3001      	adds	r0, #1
 8002426:	d0a2      	beq.n	800236e <_printf_i+0x13a>
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	079b      	lsls	r3, r3, #30
 800242c:	d507      	bpl.n	800243e <_printf_i+0x20a>
 800242e:	2500      	movs	r5, #0
 8002430:	f104 0919 	add.w	r9, r4, #25
 8002434:	68e3      	ldr	r3, [r4, #12]
 8002436:	9a03      	ldr	r2, [sp, #12]
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	429d      	cmp	r5, r3
 800243c:	db05      	blt.n	800244a <_printf_i+0x216>
 800243e:	68e0      	ldr	r0, [r4, #12]
 8002440:	9b03      	ldr	r3, [sp, #12]
 8002442:	4298      	cmp	r0, r3
 8002444:	bfb8      	it	lt
 8002446:	4618      	movlt	r0, r3
 8002448:	e793      	b.n	8002372 <_printf_i+0x13e>
 800244a:	2301      	movs	r3, #1
 800244c:	464a      	mov	r2, r9
 800244e:	4639      	mov	r1, r7
 8002450:	4630      	mov	r0, r6
 8002452:	47c0      	blx	r8
 8002454:	3001      	adds	r0, #1
 8002456:	d08a      	beq.n	800236e <_printf_i+0x13a>
 8002458:	3501      	adds	r5, #1
 800245a:	e7eb      	b.n	8002434 <_printf_i+0x200>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1a7      	bne.n	80023b0 <_printf_i+0x17c>
 8002460:	780b      	ldrb	r3, [r1, #0]
 8002462:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002466:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800246a:	e765      	b.n	8002338 <_printf_i+0x104>
 800246c:	080026ee 	.word	0x080026ee
 8002470:	080026dd 	.word	0x080026dd

08002474 <memcpy>:
 8002474:	b510      	push	{r4, lr}
 8002476:	1e43      	subs	r3, r0, #1
 8002478:	440a      	add	r2, r1
 800247a:	4291      	cmp	r1, r2
 800247c:	d100      	bne.n	8002480 <memcpy+0xc>
 800247e:	bd10      	pop	{r4, pc}
 8002480:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002484:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002488:	e7f7      	b.n	800247a <memcpy+0x6>

0800248a <memmove>:
 800248a:	4288      	cmp	r0, r1
 800248c:	b510      	push	{r4, lr}
 800248e:	eb01 0302 	add.w	r3, r1, r2
 8002492:	d803      	bhi.n	800249c <memmove+0x12>
 8002494:	1e42      	subs	r2, r0, #1
 8002496:	4299      	cmp	r1, r3
 8002498:	d10c      	bne.n	80024b4 <memmove+0x2a>
 800249a:	bd10      	pop	{r4, pc}
 800249c:	4298      	cmp	r0, r3
 800249e:	d2f9      	bcs.n	8002494 <memmove+0xa>
 80024a0:	1881      	adds	r1, r0, r2
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	42d3      	cmn	r3, r2
 80024a6:	d100      	bne.n	80024aa <memmove+0x20>
 80024a8:	bd10      	pop	{r4, pc}
 80024aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80024ae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80024b2:	e7f7      	b.n	80024a4 <memmove+0x1a>
 80024b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80024b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80024bc:	e7eb      	b.n	8002496 <memmove+0xc>
	...

080024c0 <_free_r>:
 80024c0:	b538      	push	{r3, r4, r5, lr}
 80024c2:	4605      	mov	r5, r0
 80024c4:	2900      	cmp	r1, #0
 80024c6:	d045      	beq.n	8002554 <_free_r+0x94>
 80024c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024cc:	1f0c      	subs	r4, r1, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bfb8      	it	lt
 80024d2:	18e4      	addlt	r4, r4, r3
 80024d4:	f000 f8d6 	bl	8002684 <__malloc_lock>
 80024d8:	4a1f      	ldr	r2, [pc, #124]	; (8002558 <_free_r+0x98>)
 80024da:	6813      	ldr	r3, [r2, #0]
 80024dc:	4610      	mov	r0, r2
 80024de:	b933      	cbnz	r3, 80024ee <_free_r+0x2e>
 80024e0:	6063      	str	r3, [r4, #4]
 80024e2:	6014      	str	r4, [r2, #0]
 80024e4:	4628      	mov	r0, r5
 80024e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80024ea:	f000 b8cc 	b.w	8002686 <__malloc_unlock>
 80024ee:	42a3      	cmp	r3, r4
 80024f0:	d90c      	bls.n	800250c <_free_r+0x4c>
 80024f2:	6821      	ldr	r1, [r4, #0]
 80024f4:	1862      	adds	r2, r4, r1
 80024f6:	4293      	cmp	r3, r2
 80024f8:	bf04      	itt	eq
 80024fa:	681a      	ldreq	r2, [r3, #0]
 80024fc:	685b      	ldreq	r3, [r3, #4]
 80024fe:	6063      	str	r3, [r4, #4]
 8002500:	bf04      	itt	eq
 8002502:	1852      	addeq	r2, r2, r1
 8002504:	6022      	streq	r2, [r4, #0]
 8002506:	6004      	str	r4, [r0, #0]
 8002508:	e7ec      	b.n	80024e4 <_free_r+0x24>
 800250a:	4613      	mov	r3, r2
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	b10a      	cbz	r2, 8002514 <_free_r+0x54>
 8002510:	42a2      	cmp	r2, r4
 8002512:	d9fa      	bls.n	800250a <_free_r+0x4a>
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	1858      	adds	r0, r3, r1
 8002518:	42a0      	cmp	r0, r4
 800251a:	d10b      	bne.n	8002534 <_free_r+0x74>
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	4401      	add	r1, r0
 8002520:	1858      	adds	r0, r3, r1
 8002522:	4282      	cmp	r2, r0
 8002524:	6019      	str	r1, [r3, #0]
 8002526:	d1dd      	bne.n	80024e4 <_free_r+0x24>
 8002528:	6810      	ldr	r0, [r2, #0]
 800252a:	6852      	ldr	r2, [r2, #4]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	4401      	add	r1, r0
 8002530:	6019      	str	r1, [r3, #0]
 8002532:	e7d7      	b.n	80024e4 <_free_r+0x24>
 8002534:	d902      	bls.n	800253c <_free_r+0x7c>
 8002536:	230c      	movs	r3, #12
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	e7d3      	b.n	80024e4 <_free_r+0x24>
 800253c:	6820      	ldr	r0, [r4, #0]
 800253e:	1821      	adds	r1, r4, r0
 8002540:	428a      	cmp	r2, r1
 8002542:	bf04      	itt	eq
 8002544:	6811      	ldreq	r1, [r2, #0]
 8002546:	6852      	ldreq	r2, [r2, #4]
 8002548:	6062      	str	r2, [r4, #4]
 800254a:	bf04      	itt	eq
 800254c:	1809      	addeq	r1, r1, r0
 800254e:	6021      	streq	r1, [r4, #0]
 8002550:	605c      	str	r4, [r3, #4]
 8002552:	e7c7      	b.n	80024e4 <_free_r+0x24>
 8002554:	bd38      	pop	{r3, r4, r5, pc}
 8002556:	bf00      	nop
 8002558:	20000090 	.word	0x20000090

0800255c <_malloc_r>:
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	1ccd      	adds	r5, r1, #3
 8002560:	f025 0503 	bic.w	r5, r5, #3
 8002564:	3508      	adds	r5, #8
 8002566:	2d0c      	cmp	r5, #12
 8002568:	bf38      	it	cc
 800256a:	250c      	movcc	r5, #12
 800256c:	2d00      	cmp	r5, #0
 800256e:	4606      	mov	r6, r0
 8002570:	db01      	blt.n	8002576 <_malloc_r+0x1a>
 8002572:	42a9      	cmp	r1, r5
 8002574:	d903      	bls.n	800257e <_malloc_r+0x22>
 8002576:	230c      	movs	r3, #12
 8002578:	6033      	str	r3, [r6, #0]
 800257a:	2000      	movs	r0, #0
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	f000 f881 	bl	8002684 <__malloc_lock>
 8002582:	4a23      	ldr	r2, [pc, #140]	; (8002610 <_malloc_r+0xb4>)
 8002584:	6814      	ldr	r4, [r2, #0]
 8002586:	4621      	mov	r1, r4
 8002588:	b991      	cbnz	r1, 80025b0 <_malloc_r+0x54>
 800258a:	4c22      	ldr	r4, [pc, #136]	; (8002614 <_malloc_r+0xb8>)
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	b91b      	cbnz	r3, 8002598 <_malloc_r+0x3c>
 8002590:	4630      	mov	r0, r6
 8002592:	f000 f867 	bl	8002664 <_sbrk_r>
 8002596:	6020      	str	r0, [r4, #0]
 8002598:	4629      	mov	r1, r5
 800259a:	4630      	mov	r0, r6
 800259c:	f000 f862 	bl	8002664 <_sbrk_r>
 80025a0:	1c43      	adds	r3, r0, #1
 80025a2:	d126      	bne.n	80025f2 <_malloc_r+0x96>
 80025a4:	230c      	movs	r3, #12
 80025a6:	6033      	str	r3, [r6, #0]
 80025a8:	4630      	mov	r0, r6
 80025aa:	f000 f86c 	bl	8002686 <__malloc_unlock>
 80025ae:	e7e4      	b.n	800257a <_malloc_r+0x1e>
 80025b0:	680b      	ldr	r3, [r1, #0]
 80025b2:	1b5b      	subs	r3, r3, r5
 80025b4:	d41a      	bmi.n	80025ec <_malloc_r+0x90>
 80025b6:	2b0b      	cmp	r3, #11
 80025b8:	d90f      	bls.n	80025da <_malloc_r+0x7e>
 80025ba:	600b      	str	r3, [r1, #0]
 80025bc:	50cd      	str	r5, [r1, r3]
 80025be:	18cc      	adds	r4, r1, r3
 80025c0:	4630      	mov	r0, r6
 80025c2:	f000 f860 	bl	8002686 <__malloc_unlock>
 80025c6:	f104 000b 	add.w	r0, r4, #11
 80025ca:	1d23      	adds	r3, r4, #4
 80025cc:	f020 0007 	bic.w	r0, r0, #7
 80025d0:	1ac3      	subs	r3, r0, r3
 80025d2:	d01b      	beq.n	800260c <_malloc_r+0xb0>
 80025d4:	425a      	negs	r2, r3
 80025d6:	50e2      	str	r2, [r4, r3]
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	428c      	cmp	r4, r1
 80025dc:	bf0d      	iteet	eq
 80025de:	6863      	ldreq	r3, [r4, #4]
 80025e0:	684b      	ldrne	r3, [r1, #4]
 80025e2:	6063      	strne	r3, [r4, #4]
 80025e4:	6013      	streq	r3, [r2, #0]
 80025e6:	bf18      	it	ne
 80025e8:	460c      	movne	r4, r1
 80025ea:	e7e9      	b.n	80025c0 <_malloc_r+0x64>
 80025ec:	460c      	mov	r4, r1
 80025ee:	6849      	ldr	r1, [r1, #4]
 80025f0:	e7ca      	b.n	8002588 <_malloc_r+0x2c>
 80025f2:	1cc4      	adds	r4, r0, #3
 80025f4:	f024 0403 	bic.w	r4, r4, #3
 80025f8:	42a0      	cmp	r0, r4
 80025fa:	d005      	beq.n	8002608 <_malloc_r+0xac>
 80025fc:	1a21      	subs	r1, r4, r0
 80025fe:	4630      	mov	r0, r6
 8002600:	f000 f830 	bl	8002664 <_sbrk_r>
 8002604:	3001      	adds	r0, #1
 8002606:	d0cd      	beq.n	80025a4 <_malloc_r+0x48>
 8002608:	6025      	str	r5, [r4, #0]
 800260a:	e7d9      	b.n	80025c0 <_malloc_r+0x64>
 800260c:	bd70      	pop	{r4, r5, r6, pc}
 800260e:	bf00      	nop
 8002610:	20000090 	.word	0x20000090
 8002614:	20000094 	.word	0x20000094

08002618 <_realloc_r>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	4607      	mov	r7, r0
 800261c:	4614      	mov	r4, r2
 800261e:	460e      	mov	r6, r1
 8002620:	b921      	cbnz	r1, 800262c <_realloc_r+0x14>
 8002622:	4611      	mov	r1, r2
 8002624:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002628:	f7ff bf98 	b.w	800255c <_malloc_r>
 800262c:	b922      	cbnz	r2, 8002638 <_realloc_r+0x20>
 800262e:	f7ff ff47 	bl	80024c0 <_free_r>
 8002632:	4625      	mov	r5, r4
 8002634:	4628      	mov	r0, r5
 8002636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002638:	f000 f826 	bl	8002688 <_malloc_usable_size_r>
 800263c:	4284      	cmp	r4, r0
 800263e:	d90f      	bls.n	8002660 <_realloc_r+0x48>
 8002640:	4621      	mov	r1, r4
 8002642:	4638      	mov	r0, r7
 8002644:	f7ff ff8a 	bl	800255c <_malloc_r>
 8002648:	4605      	mov	r5, r0
 800264a:	2800      	cmp	r0, #0
 800264c:	d0f2      	beq.n	8002634 <_realloc_r+0x1c>
 800264e:	4631      	mov	r1, r6
 8002650:	4622      	mov	r2, r4
 8002652:	f7ff ff0f 	bl	8002474 <memcpy>
 8002656:	4631      	mov	r1, r6
 8002658:	4638      	mov	r0, r7
 800265a:	f7ff ff31 	bl	80024c0 <_free_r>
 800265e:	e7e9      	b.n	8002634 <_realloc_r+0x1c>
 8002660:	4635      	mov	r5, r6
 8002662:	e7e7      	b.n	8002634 <_realloc_r+0x1c>

08002664 <_sbrk_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4c06      	ldr	r4, [pc, #24]	; (8002680 <_sbrk_r+0x1c>)
 8002668:	2300      	movs	r3, #0
 800266a:	4605      	mov	r5, r0
 800266c:	4608      	mov	r0, r1
 800266e:	6023      	str	r3, [r4, #0]
 8002670:	f7fe fbd6 	bl	8000e20 <_sbrk>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d102      	bne.n	800267e <_sbrk_r+0x1a>
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	b103      	cbz	r3, 800267e <_sbrk_r+0x1a>
 800267c:	602b      	str	r3, [r5, #0]
 800267e:	bd38      	pop	{r3, r4, r5, pc}
 8002680:	200000c4 	.word	0x200000c4

08002684 <__malloc_lock>:
 8002684:	4770      	bx	lr

08002686 <__malloc_unlock>:
 8002686:	4770      	bx	lr

08002688 <_malloc_usable_size_r>:
 8002688:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800268c:	2800      	cmp	r0, #0
 800268e:	f1a0 0004 	sub.w	r0, r0, #4
 8002692:	bfbc      	itt	lt
 8002694:	580b      	ldrlt	r3, [r1, r0]
 8002696:	18c0      	addlt	r0, r0, r3
 8002698:	4770      	bx	lr
	...

0800269c <_init>:
 800269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269e:	bf00      	nop
 80026a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a2:	bc08      	pop	{r3}
 80026a4:	469e      	mov	lr, r3
 80026a6:	4770      	bx	lr

080026a8 <_fini>:
 80026a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026aa:	bf00      	nop
 80026ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ae:	bc08      	pop	{r3}
 80026b0:	469e      	mov	lr, r3
 80026b2:	4770      	bx	lr
