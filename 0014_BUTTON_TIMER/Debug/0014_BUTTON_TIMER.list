
0014_BUTTON_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08004a98  08004a98  00014a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004d30  08004d30  00014d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000000  08004d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
  8 .bss          00000080  200001fc  200001fc  000201fc  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000027c  2000027c  000201fc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 11 .debug_info   00007454  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001398  00000000  00000000  00027680  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000006d8  00000000  00000000  00028a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000660  00000000  00000000  000290f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002e2c  00000000  00000000  00029750  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000026ac  00000000  00000000  0002c57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002510  00000000  00000000  0002eca4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a80 	.word	0x08004a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	08004a80 	.word	0x08004a80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <uprintf>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart5;

/* USER CODE BEGIN PV */
void uprintf(char *str)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart5, (uint8_t*)str,strlen(str),100);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff f989 	bl	80001d0 <strlen>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	2364      	movs	r3, #100	; 0x64
 8000ec4:	6879      	ldr	r1, [r7, #4]
 8000ec6:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <uprintf+0x24>)
 8000ec8:	f001 fa91 	bl	80023ee <HAL_UART_Transmit>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000230 	.word	0x20000230

08000ed8 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af02      	add	r7, sp, #8
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]



	sprintf(data,"\t\n\r %d Dakika, %d Saniye, %d Salise",dakika,saniye,salise);
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x44>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000ee8:	6819      	ldr	r1, [r3, #0]
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	490d      	ldr	r1, [pc, #52]	; (8000f28 <HAL_GPIO_EXTI_Callback+0x50>)
 8000ef4:	480d      	ldr	r0, [pc, #52]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x54>)
 8000ef6:	f002 f9cd 	bl	8003294 <siprintf>

			  uprintf(data);
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <HAL_GPIO_EXTI_Callback+0x54>)
 8000efc:	f7ff ffd8 	bl	8000eb0 <uprintf>

	          salise=0;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
	          saniye=0;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
	          dakika=0;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GPIO_EXTI_Callback+0x44>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]



}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000220 	.word	0x20000220
 8000f20:	2000021c 	.word	0x2000021c
 8000f24:	20000218 	.word	0x20000218
 8000f28:	08004a98 	.word	0x08004a98
 8000f2c:	20000000 	.word	0x20000000

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fa36 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f83a 	bl	8000fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f8cc 	bl	80010d8 <MX_GPIO_Init>
  MX_UART5_Init();
 8000f40:	f000 f8a0 	bl	8001084 <MX_UART5_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 8000f44:	bf00      	nop
 8000f46:	2101      	movs	r1, #1
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <main+0x70>)
 8000f4a:	f000 fd69 	bl	8001a20 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f8      	bne.n	8000f46 <main+0x16>
	  if(salise!=-1)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <main+0x74>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d0f2      	beq.n	8000f44 <main+0x14>
	  {
		  salise++;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <main+0x74>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <main+0x74>)
 8000f66:	6013      	str	r3, [r2, #0]
		  HAL_Delay(16.66);
 8000f68:	2010      	movs	r0, #16
 8000f6a:	f000 fa8d 	bl	8001488 <HAL_Delay>

		  if(salise>=60)
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <main+0x74>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b3b      	cmp	r3, #59	; 0x3b
 8000f74:	dde6      	ble.n	8000f44 <main+0x14>
		  {
			  saniye+=1;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <main+0x78>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <main+0x78>)
 8000f7e:	6013      	str	r3, [r2, #0]
			  salise=0;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <main+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

			  if(saniye>=60)
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <main+0x78>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f8c:	ddda      	ble.n	8000f44 <main+0x14>
			  {
				  dakika+=1;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <main+0x7c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a05      	ldr	r2, [pc, #20]	; (8000fac <main+0x7c>)
 8000f96:	6013      	str	r3, [r2, #0]
				  saniye=0;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <main+0x78>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
	  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 8000f9e:	e7d1      	b.n	8000f44 <main+0x14>
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	20000218 	.word	0x20000218
 8000fa8:	2000021c 	.word	0x2000021c
 8000fac:	20000220 	.word	0x20000220

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b094      	sub	sp, #80	; 0x50
 8000fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	f107 0320 	add.w	r3, r7, #32
 8000fba:	2230      	movs	r2, #48	; 0x30
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f001 fcf4 	bl	80029ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	4a28      	ldr	r2, [pc, #160]	; (800107c <SystemClock_Config+0xcc>)
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <SystemClock_Config+0xcc>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe4:	4b25      	ldr	r3, [pc, #148]	; (800107c <SystemClock_Config+0xcc>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	4a22      	ldr	r2, [pc, #136]	; (8001080 <SystemClock_Config+0xd0>)
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <SystemClock_Config+0xd0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <SystemClock_Config+0xd0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001010:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001024:	23a8      	movs	r3, #168	; 0xa8
 8001026:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001028:	2302      	movs	r3, #2
 800102a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800102c:	2304      	movs	r3, #4
 800102e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001030:	f107 0320 	add.w	r3, r7, #32
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fd23 	bl	8001a80 <HAL_RCC_OscConfig>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001040:	f000 f8ac 	bl	800119c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001044:	230f      	movs	r3, #15
 8001046:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001050:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001054:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2105      	movs	r1, #5
 8001062:	4618      	mov	r0, r3
 8001064:	f000 ff84 	bl	8001f70 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800106e:	f000 f895 	bl	800119c <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	; 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001088:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_UART5_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <MX_UART5_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800108e:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_UART5_Init+0x4c>)
 8001090:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001094:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_UART5_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MX_UART5_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_UART5_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <MX_UART5_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <MX_UART5_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <MX_UART5_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_UART5_Init+0x4c>)
 80010bc:	f001 f94a 	bl	8002354 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80010c6:	f000 f869 	bl	800119c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000230 	.word	0x20000230
 80010d4:	40005000 	.word	0x40005000

080010d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	4a27      	ldr	r2, [pc, #156]	; (8001190 <MX_GPIO_Init+0xb8>)
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <MX_GPIO_Init+0xb8>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	4a20      	ldr	r2, [pc, #128]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_GPIO_Init+0xb8>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <MX_GPIO_Init+0xb8>)
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_GPIO_Init+0xb8>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_GPIO_Init+0xb8>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_GPIO_Init+0xb8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115e:	2301      	movs	r3, #1
 8001160:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_GPIO_Init+0xbc>)
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001166:	2302      	movs	r3, #2
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <MX_GPIO_Init+0xc0>)
 8001172:	f000 fabb 	bl	80016ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2006      	movs	r0, #6
 800117c:	f000 fa7f 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001180:	2006      	movs	r0, #6
 8001182:	f000 fa98 	bl	80016b6 <HAL_NVIC_EnableIRQ>

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	10110000 	.word	0x10110000
 8001198:	40020000 	.word	0x40020000

0800119c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <Error_Handler+0x6>

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_MspInit+0x4c>)
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_MspInit+0x4c>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <HAL_UART_MspInit+0xc0>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d14a      	bne.n	80012ac <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4a20      	ldr	r2, [pc, #128]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123c:	f043 0304 	orr.w	r3, r3, #4
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_UART_MspInit+0xc4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800126a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001274:	2301      	movs	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800127c:	2308      	movs	r3, #8
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <HAL_UART_MspInit+0xc8>)
 8001288:	f000 fa30 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800128c:	2304      	movs	r3, #4
 800128e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001294:	2301      	movs	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800129c:	2308      	movs	r3, #8
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <HAL_UART_MspInit+0xcc>)
 80012a8:	f000 fa20 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40005000 	.word	0x40005000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00

080012c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <NMI_Handler+0x4>

080012ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <HardFault_Handler+0x4>

080012d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <MemManage_Handler+0x4>

080012d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012da:	e7fe      	b.n	80012da <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001310:	f000 f89a 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800131c:	2001      	movs	r0, #1
 800131e:	f000 fb97 	bl	8001a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x50>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x16>
		heap_end = &end;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <_sbrk+0x50>)
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <_sbrk+0x54>)
 800133c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <_sbrk+0x50>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <_sbrk+0x50>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	466a      	mov	r2, sp
 800134e:	4293      	cmp	r3, r2
 8001350:	d907      	bls.n	8001362 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001352:	f001 fb01 	bl	8002958 <__errno>
 8001356:	4602      	mov	r2, r0
 8001358:	230c      	movs	r3, #12
 800135a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	e006      	b.n	8001370 <_sbrk+0x48>
	}

	heap_end += incr;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <_sbrk+0x50>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a03      	ldr	r2, [pc, #12]	; (8001378 <_sbrk+0x50>)
 800136c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000224 	.word	0x20000224
 800137c:	2000027c 	.word	0x2000027c

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4a06      	ldr	r2, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_Init+0x40>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_Init+0x40>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x40>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f94b 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fee4 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f963 	bl	80016d2 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f92b 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000020 	.word	0x20000020
 8001440:	20000028 	.word	0x20000028
 8001444:	20000024 	.word	0x20000024

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000028 	.word	0x20000028
 800146c:	20000274 	.word	0x20000274

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000274 	.word	0x20000274

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_Delay+0x40>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad2      	subs	r2, r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3f7      	bcc.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000028 	.word	0x20000028

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	4909      	ldr	r1, [pc, #36]	; (8001568 <__NVIC_EnableIRQ+0x38>)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	095b      	lsrs	r3, r3, #5
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	f002 021f 	and.w	r2, r2, #31
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	490d      	ldr	r1, [pc, #52]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	4909      	ldr	r1, [pc, #36]	; (80015bc <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	2201      	movs	r2, #1
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	401a      	ands	r2, r3
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001606:	2101      	movs	r1, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	1e59      	subs	r1, r3, #1
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff90 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff2b 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff40 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff33 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e16b      	b.n	80019e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 815a 	bne.w	80019da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d005      	beq.n	800173e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	2b02      	cmp	r3, #2
 800173c:	d130      	bne.n	80017a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d017      	beq.n	80017dc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d123      	bne.n	8001830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80b4 	beq.w	80019da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4a5f      	ldr	r2, [pc, #380]	; (80019f4 <HAL_GPIO_Init+0x308>)
 8001878:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <HAL_GPIO_Init+0x308>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <HAL_GPIO_Init+0x308>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a51      	ldr	r2, [pc, #324]	; (80019fc <HAL_GPIO_Init+0x310>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02b      	beq.n	8001912 <HAL_GPIO_Init+0x226>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_GPIO_Init+0x314>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x222>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4f      	ldr	r2, [pc, #316]	; (8001a04 <HAL_GPIO_Init+0x318>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x21e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4e      	ldr	r2, [pc, #312]	; (8001a08 <HAL_GPIO_Init+0x31c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4d      	ldr	r2, [pc, #308]	; (8001a0c <HAL_GPIO_Init+0x320>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x216>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x212>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x328>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x32c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x20a>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e00e      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018f6:	2308      	movs	r3, #8
 80018f8:	e00c      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001924:	4934      	ldr	r1, [pc, #208]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001932:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001956:	4a31      	ldr	r2, [pc, #196]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800195c:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <HAL_GPIO_Init+0x330>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001980:	4a26      	ldr	r2, [pc, #152]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <HAL_GPIO_Init+0x330>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019aa:	4a1c      	ldr	r2, [pc, #112]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b0:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d4:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f ae90 	bls.w	8001708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	3724      	adds	r7, #36	; 0x24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40021400 	.word	0x40021400
 8001a14:	40021800 	.word	0x40021800
 8001a18:	40021c00 	.word	0x40021c00
 8001a1c:	40013c00 	.word	0x40013c00

08001a20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	4013      	ands	r3, r2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e001      	b.n	8001a42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa32 	bl	8000ed8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40013c00 	.word	0x40013c00

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e264      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d075      	beq.n	8001b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9e:	4ba3      	ldr	r3, [pc, #652]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4ba0      	ldr	r3, [pc, #640]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d112      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b9d      	ldr	r3, [pc, #628]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b99      	ldr	r3, [pc, #612]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d05b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e23f      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x74>
 8001ae6:	4a91      	ldr	r2, [pc, #580]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	4b90      	ldr	r3, [pc, #576]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4a8b      	ldr	r2, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	4b8a      	ldr	r3, [pc, #552]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4a88      	ldr	r2, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	4b87      	ldr	r3, [pc, #540]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001b18:	4a84      	ldr	r2, [pc, #528]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	4b84      	ldr	r3, [pc, #528]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4a81      	ldr	r2, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fc9a 	bl	8001470 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff fc96 	bl	8001470 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e204      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fc86 	bl	8001470 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff fc82 	bl	8001470 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1f0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0xe8>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d11c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c4      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4956      	ldr	r1, [pc, #344]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	4b55      	ldr	r3, [pc, #340]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x2b0>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff fc3b 	bl	8001470 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff fc37 	bl	8001470 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a5      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4943      	ldr	r1, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_OscConfig+0x2b0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fc1a 	bl	8001470 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff fc16 	bl	8001470 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e184      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d030      	beq.n	8001ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x2b4>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff fbfa 	bl	8001470 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbf6 	bl	8001470 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e164      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x200>
 8001c9e:	e015      	b.n	8001ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x2b4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff fbe3 	bl	8001470 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff fbdf 	bl	8001470 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e14d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a0 	beq.w	8001e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fba5 	bl	8001470 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e011      	b.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
 8001d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7ff fb98 	bl	8001470 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e106      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_RCC_OscConfig+0x4e4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
 8001d62:	4a81      	ldr	r2, [pc, #516]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d64:	4b80      	ldr	r3, [pc, #512]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6e:	e01c      	b.n	8001daa <HAL_RCC_OscConfig+0x32a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x312>
 8001d78:	4a7b      	ldr	r2, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d7a:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	4a78      	ldr	r2, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d86:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	e00b      	b.n	8001daa <HAL_RCC_OscConfig+0x32a>
 8001d92:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d94:	4b74      	ldr	r3, [pc, #464]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	4a72      	ldr	r2, [pc, #456]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001da0:	4b71      	ldr	r3, [pc, #452]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff fb5d 	bl	8001470 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff fb59 	bl	8001470 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0c5      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ee      	beq.n	8001dba <HAL_RCC_OscConfig+0x33a>
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb47 	bl	8001470 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fb43 	bl	8001470 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0af      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4a56      	ldr	r2, [pc, #344]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e10:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 809b 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d05c      	beq.n	8001eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d141      	bne.n	8001ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff fb17 	bl	8001470 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff fb13 	bl	8001470 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e081      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e64:	4940      	ldr	r1, [pc, #256]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69da      	ldr	r2, [r3, #28]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	019b      	lsls	r3, r3, #6
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	085b      	lsrs	r3, r3, #1
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	041b      	lsls	r3, r3, #16
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff faec 	bl	8001470 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff fae8 	bl	8001470 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e056      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x41c>
 8001eba:	e04e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fad5 	bl	8001470 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff fad1 	bl	8001470 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03f      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x44a>
 8001ee8:	e037      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e032      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d028      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d11a      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d111      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40007000 	.word	0x40007000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470060 	.word	0x42470060

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0cc      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0207 	and.w	r2, r3, #7
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d20c      	bcs.n	8001fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0207 	and.w	r2, r3, #7
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4a59      	ldr	r2, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4a53      	ldr	r2, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4950      	ldr	r1, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d044      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d119      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e067      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4937      	ldr	r1, [pc, #220]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 0203 	bic.w	r2, r3, #3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff fa06 	bl	8001470 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff fa02 	bl	8001470 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e04f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0207 	and.w	r2, r3, #7
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d90c      	bls.n	80020b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0207 	and.w	r2, r3, #7
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4919      	ldr	r1, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4912      	ldr	r1, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4601      	mov	r1, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	fa21 f303 	lsr.w	r3, r1, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f966 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	08004abc 	.word	0x08004abc
 8002134:	20000020 	.word	0x20000020
 8002138:	20000024 	.word	0x20000024

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002140:	b08f      	sub	sp, #60	; 0x3c
 8002142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002148:	2300      	movs	r3, #0
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b04      	cmp	r3, #4
 800215e:	d007      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x34>
 8002160:	2b08      	cmp	r3, #8
 8002162:	d008      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x3a>
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 80b2 	bne.w	80022ce <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800216a:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800216e:	e0b1      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002170:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002174:	e0ae      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002176:	4b5a      	ldr	r3, [pc, #360]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002180:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d04e      	beq.n	800222a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218c:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	f04f 0400 	mov.w	r4, #0
 8002196:	f240 11ff 	movw	r1, #511	; 0x1ff
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	ea01 0103 	and.w	r1, r1, r3
 80021a2:	ea02 0204 	and.w	r2, r2, r4
 80021a6:	460b      	mov	r3, r1
 80021a8:	4614      	mov	r4, r2
 80021aa:	0160      	lsls	r0, r4, #5
 80021ac:	6278      	str	r0, [r7, #36]	; 0x24
 80021ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021b0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	623b      	str	r3, [r7, #32]
 80021ba:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80021be:	1a5b      	subs	r3, r3, r1
 80021c0:	eb64 0402 	sbc.w	r4, r4, r2
 80021c4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80021c8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80021cc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80021d0:	ebb8 0803 	subs.w	r8, r8, r3
 80021d4:	eb69 0904 	sbc.w	r9, r9, r4
 80021d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021dc:	61fb      	str	r3, [r7, #28]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80021f0:	eb18 0801 	adds.w	r8, r8, r1
 80021f4:	eb49 0902 	adc.w	r9, r9, r2
 80021f8:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80021fc:	617b      	str	r3, [r7, #20]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	f04f 0400 	mov.w	r4, #0
 800221a:	461a      	mov	r2, r3
 800221c:	4623      	mov	r3, r4
 800221e:	f7fe fcbf 	bl	8000ba0 <__aeabi_uldivmod>
 8002222:	4603      	mov	r3, r0
 8002224:	460c      	mov	r4, r1
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
 8002228:	e043      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222a:	4b2d      	ldr	r3, [pc, #180]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	099b      	lsrs	r3, r3, #6
 8002230:	f04f 0400 	mov.w	r4, #0
 8002234:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	ea01 0103 	and.w	r1, r1, r3
 8002240:	ea02 0204 	and.w	r2, r2, r4
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	0160      	lsls	r0, r4, #5
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	015b      	lsls	r3, r3, #5
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800225c:	1a5b      	subs	r3, r3, r1
 800225e:	eb64 0402 	sbc.w	r4, r4, r2
 8002262:	01a6      	lsls	r6, r4, #6
 8002264:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002268:	019d      	lsls	r5, r3, #6
 800226a:	1aed      	subs	r5, r5, r3
 800226c:	eb66 0604 	sbc.w	r6, r6, r4
 8002270:	00f3      	lsls	r3, r6, #3
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	00eb      	lsls	r3, r5, #3
 800227e:	603b      	str	r3, [r7, #0]
 8002280:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002284:	186d      	adds	r5, r5, r1
 8002286:	eb46 0602 	adc.w	r6, r6, r2
 800228a:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800228e:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002292:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002296:	4655      	mov	r5, sl
 8002298:	465e      	mov	r6, fp
 800229a:	4628      	mov	r0, r5
 800229c:	4631      	mov	r1, r6
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	f04f 0400 	mov.w	r4, #0
 80022a4:	461a      	mov	r2, r3
 80022a6:	4623      	mov	r3, r4
 80022a8:	f7fe fc7a 	bl	8000ba0 <__aeabi_uldivmod>
 80022ac:	4603      	mov	r3, r0
 80022ae:	460c      	mov	r4, r1
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	3301      	adds	r3, #1
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80022c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022cc:	e002      	b.n	80022d4 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	373c      	adds	r7, #60	; 0x3c
 80022da:	46bd      	mov	sp, r7
 80022dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	00f42400 	.word	0x00f42400
 80022e8:	007a1200 	.word	0x007a1200

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000020 	.word	0x20000020

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002308:	f7ff fff0 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800230c:	4601      	mov	r1, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0a9b      	lsrs	r3, r3, #10
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4a03      	ldr	r2, [pc, #12]	; (8002328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800231a:	5cd3      	ldrb	r3, [r2, r3]
 800231c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	08004acc 	.word	0x08004acc

0800232c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002330:	f7ff ffdc 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002334:	4601      	mov	r1, r0
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	0b5b      	lsrs	r3, r3, #13
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002342:	5cd3      	ldrb	r3, [r2, r3]
 8002344:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	08004acc 	.word	0x08004acc

08002354 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e03f      	b.n	80023e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe ff3a 	bl	80011f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002396:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f903 	bl	80025a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	6912      	ldr	r2, [r2, #16]
 80023a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	6952      	ldr	r2, [r2, #20]
 80023b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	68d2      	ldr	r2, [r2, #12]
 80023c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	; 0x28
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	d17b      	bne.n	8002506 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d002      	beq.n	800241a <HAL_UART_Transmit+0x2c>
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e074      	b.n	8002508 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_UART_Transmit+0x3e>
 8002428:	2302      	movs	r3, #2
 800242a:	e06d      	b.n	8002508 <HAL_UART_Transmit+0x11a>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2221      	movs	r2, #33	; 0x21
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002442:	f7ff f815 	bl	8001470 <HAL_GetTick>
 8002446:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	88fa      	ldrh	r2, [r7, #6]
 800244c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	88fa      	ldrh	r2, [r7, #6]
 8002452:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d108      	bne.n	8002470 <HAL_UART_Transmit+0x82>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e003      	b.n	8002478 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002480:	e029      	b.n	80024d6 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f83f 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e035      	b.n	8002508 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	3302      	adds	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e007      	b.n	80024c8 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	7812      	ldrb	r2, [r2, #0]
 80024c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1d0      	bne.n	8002482 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2140      	movs	r1, #64	; 0x40
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f810 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e006      	b.n	8002508 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002520:	e02c      	b.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d028      	beq.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <UART_WaitOnFlagUntilTimeout+0x30>
 8002530:	f7fe ff9e 	bl	8001470 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	1ad2      	subs	r2, r2, r3
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	429a      	cmp	r2, r3
 800253e:	d91d      	bls.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800254e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	6952      	ldr	r2, [r2, #20]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e00f      	b.n	800259c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	401a      	ands	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d0c3      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a8:	b091      	sub	sp, #68	; 0x44
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6378      	str	r0, [r7, #52]	; 0x34
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	610b      	str	r3, [r1, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4313      	orrs	r3, r2
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
  MODIFY_REG(huart->Instance->CR1,
 80025dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f423 4216 	bic.w	r2, r3, #38400	; 0x9600
 80025ea:	f022 020c 	bic.w	r2, r2, #12
 80025ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f6:	6819      	ldr	r1, [r3, #0]
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	614b      	str	r3, [r1, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4bba      	ldr	r3, [pc, #744]	; (80028f8 <UART_SetConfig+0x354>)
 8002610:	429a      	cmp	r2, r3
 8002612:	d004      	beq.n	800261e <UART_SetConfig+0x7a>
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4bb8      	ldr	r3, [pc, #736]	; (80028fc <UART_SetConfig+0x358>)
 800261a:	429a      	cmp	r2, r3
 800261c:	d103      	bne.n	8002626 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800261e:	f7ff fe85 	bl	800232c <HAL_RCC_GetPCLK2Freq>
 8002622:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002624:	e002      	b.n	800262c <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002626:	f7ff fe6d 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 800262a:	63f8      	str	r0, [r7, #60]	; 0x3c
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002634:	f040 80a7 	bne.w	8002786 <UART_SetConfig+0x1e2>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	62ba      	str	r2, [r7, #40]	; 0x28
 800263e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002640:	4619      	mov	r1, r3
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	460b      	mov	r3, r1
 8002648:	4614      	mov	r4, r2
 800264a:	18db      	adds	r3, r3, r3
 800264c:	eb44 0404 	adc.w	r4, r4, r4
 8002650:	185b      	adds	r3, r3, r1
 8002652:	eb44 0402 	adc.w	r4, r4, r2
 8002656:	00e0      	lsls	r0, r4, #3
 8002658:	6178      	str	r0, [r7, #20]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002660:	6178      	str	r0, [r7, #20]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800266a:	185d      	adds	r5, r3, r1
 800266c:	eb44 0602 	adc.w	r6, r4, r2
 8002670:	4628      	mov	r0, r5
 8002672:	4631      	mov	r1, r6
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f04f 0400 	mov.w	r4, #0
 800267c:	18db      	adds	r3, r3, r3
 800267e:	eb44 0404 	adc.w	r4, r4, r4
 8002682:	461a      	mov	r2, r3
 8002684:	4623      	mov	r3, r4
 8002686:	f7fe fa8b 	bl	8000ba0 <__aeabi_uldivmod>
 800268a:	4603      	mov	r3, r0
 800268c:	460c      	mov	r4, r1
 800268e:	461a      	mov	r2, r3
 8002690:	4b9b      	ldr	r3, [pc, #620]	; (8002900 <UART_SetConfig+0x35c>)
 8002692:	fba3 2302 	umull	r2, r3, r3, r2
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	011e      	lsls	r6, r3, #4
 800269a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269c:	4619      	mov	r1, r3
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4614      	mov	r4, r2
 80026a6:	18db      	adds	r3, r3, r3
 80026a8:	eb44 0404 	adc.w	r4, r4, r4
 80026ac:	185b      	adds	r3, r3, r1
 80026ae:	eb44 0402 	adc.w	r4, r4, r2
 80026b2:	ea4f 0bc4 	mov.w	fp, r4, lsl #3
 80026b6:	ea4b 7b53 	orr.w	fp, fp, r3, lsr #29
 80026ba:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
 80026be:	4653      	mov	r3, sl
 80026c0:	465c      	mov	r4, fp
 80026c2:	eb13 0a01 	adds.w	sl, r3, r1
 80026c6:	eb44 0b02 	adc.w	fp, r4, r2
 80026ca:	4650      	mov	r0, sl
 80026cc:	4659      	mov	r1, fp
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f04f 0400 	mov.w	r4, #0
 80026d6:	18db      	adds	r3, r3, r3
 80026d8:	eb44 0404 	adc.w	r4, r4, r4
 80026dc:	461a      	mov	r2, r3
 80026de:	4623      	mov	r3, r4
 80026e0:	f7fe fa5e 	bl	8000ba0 <__aeabi_uldivmod>
 80026e4:	4603      	mov	r3, r0
 80026e6:	460c      	mov	r4, r1
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b85      	ldr	r3, [pc, #532]	; (8002900 <UART_SetConfig+0x35c>)
 80026ec:	fba3 1302 	umull	r1, r3, r3, r2
 80026f0:	095b      	lsrs	r3, r3, #5
 80026f2:	2164      	movs	r1, #100	; 0x64
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	3332      	adds	r3, #50	; 0x32
 80026fe:	4a80      	ldr	r2, [pc, #512]	; (8002900 <UART_SetConfig+0x35c>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800270c:	441e      	add	r6, r3
 800270e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002710:	4619      	mov	r1, r3
 8002712:	f04f 0200 	mov.w	r2, #0
 8002716:	460b      	mov	r3, r1
 8002718:	4614      	mov	r4, r2
 800271a:	18db      	adds	r3, r3, r3
 800271c:	eb44 0404 	adc.w	r4, r4, r4
 8002720:	185b      	adds	r3, r3, r1
 8002722:	eb44 0402 	adc.w	r4, r4, r2
 8002726:	ea4f 09c4 	mov.w	r9, r4, lsl #3
 800272a:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
 800272e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8002732:	4643      	mov	r3, r8
 8002734:	464c      	mov	r4, r9
 8002736:	eb13 0801 	adds.w	r8, r3, r1
 800273a:	eb44 0902 	adc.w	r9, r4, r2
 800273e:	4640      	mov	r0, r8
 8002740:	4649      	mov	r1, r9
 8002742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f04f 0400 	mov.w	r4, #0
 800274a:	18db      	adds	r3, r3, r3
 800274c:	eb44 0404 	adc.w	r4, r4, r4
 8002750:	461a      	mov	r2, r3
 8002752:	4623      	mov	r3, r4
 8002754:	f7fe fa24 	bl	8000ba0 <__aeabi_uldivmod>
 8002758:	4603      	mov	r3, r0
 800275a:	460c      	mov	r4, r1
 800275c:	461a      	mov	r2, r3
 800275e:	4b68      	ldr	r3, [pc, #416]	; (8002900 <UART_SetConfig+0x35c>)
 8002760:	fba3 1302 	umull	r1, r3, r3, r2
 8002764:	095b      	lsrs	r3, r3, #5
 8002766:	2164      	movs	r1, #100	; 0x64
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	3332      	adds	r3, #50	; 0x32
 8002772:	4a63      	ldr	r2, [pc, #396]	; (8002900 <UART_SetConfig+0x35c>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	095b      	lsrs	r3, r3, #5
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	4433      	add	r3, r6
 8002780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002782:	6093      	str	r3, [r2, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002784:	e0b3      	b.n	80028ee <UART_SetConfig+0x34a>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278e:	4619      	mov	r1, r3
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	460b      	mov	r3, r1
 8002796:	4614      	mov	r4, r2
 8002798:	18db      	adds	r3, r3, r3
 800279a:	eb44 0404 	adc.w	r4, r4, r4
 800279e:	185b      	adds	r3, r3, r1
 80027a0:	eb44 0402 	adc.w	r4, r4, r2
 80027a4:	00e6      	lsls	r6, r4, #3
 80027a6:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 80027aa:	00dd      	lsls	r5, r3, #3
 80027ac:	462b      	mov	r3, r5
 80027ae:	4634      	mov	r4, r6
 80027b0:	185d      	adds	r5, r3, r1
 80027b2:	eb44 0602 	adc.w	r6, r4, r2
 80027b6:	4628      	mov	r0, r5
 80027b8:	4631      	mov	r1, r6
 80027ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f04f 0400 	mov.w	r4, #0
 80027c2:	00a5      	lsls	r5, r4, #2
 80027c4:	62fd      	str	r5, [r7, #44]	; 0x2c
 80027c6:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80027c8:	ea45 7593 	orr.w	r5, r5, r3, lsr #30
 80027cc:	62fd      	str	r5, [r7, #44]	; 0x2c
 80027ce:	009c      	lsls	r4, r3, #2
 80027d0:	62bc      	str	r4, [r7, #40]	; 0x28
 80027d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d6:	f7fe f9e3 	bl	8000ba0 <__aeabi_uldivmod>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	461a      	mov	r2, r3
 80027e0:	4b47      	ldr	r3, [pc, #284]	; (8002900 <UART_SetConfig+0x35c>)
 80027e2:	fba3 1302 	umull	r1, r3, r3, r2
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	011d      	lsls	r5, r3, #4
 80027ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ec:	4619      	mov	r1, r3
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	18db      	adds	r3, r3, r3
 80027f8:	eb44 0404 	adc.w	r4, r4, r4
 80027fc:	185b      	adds	r3, r3, r1
 80027fe:	eb44 0402 	adc.w	r4, r4, r2
 8002802:	00e0      	lsls	r0, r4, #3
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	00d8      	lsls	r0, r3, #3
 8002810:	60b8      	str	r0, [r7, #8]
 8002812:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002816:	eb13 0801 	adds.w	r8, r3, r1
 800281a:	eb44 0902 	adc.w	r9, r4, r2
 800281e:	4640      	mov	r0, r8
 8002820:	4649      	mov	r1, r9
 8002822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f04f 0400 	mov.w	r4, #0
 800282a:	00a6      	lsls	r6, r4, #2
 800282c:	627e      	str	r6, [r7, #36]	; 0x24
 800282e:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8002830:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 8002834:	627e      	str	r6, [r7, #36]	; 0x24
 8002836:	009c      	lsls	r4, r3, #2
 8002838:	623c      	str	r4, [r7, #32]
 800283a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800283e:	f7fe f9af 	bl	8000ba0 <__aeabi_uldivmod>
 8002842:	4603      	mov	r3, r0
 8002844:	460c      	mov	r4, r1
 8002846:	461a      	mov	r2, r3
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <UART_SetConfig+0x35c>)
 800284a:	fba3 1302 	umull	r1, r3, r3, r2
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2164      	movs	r1, #100	; 0x64
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <UART_SetConfig+0x35c>)
 800285e:	fba2 1303 	umull	r1, r3, r2, r3
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002868:	441d      	add	r5, r3
 800286a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	460b      	mov	r3, r1
 8002874:	4614      	mov	r4, r2
 8002876:	18db      	adds	r3, r3, r3
 8002878:	eb44 0404 	adc.w	r4, r4, r4
 800287c:	185b      	adds	r3, r3, r1
 800287e:	eb44 0402 	adc.w	r4, r4, r2
 8002882:	00e0      	lsls	r0, r4, #3
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	00d8      	lsls	r0, r3, #3
 8002890:	6038      	str	r0, [r7, #0]
 8002892:	e897 0018 	ldmia.w	r7, {r3, r4}
 8002896:	eb13 0801 	adds.w	r8, r3, r1
 800289a:	eb44 0902 	adc.w	r9, r4, r2
 800289e:	4640      	mov	r0, r8
 80028a0:	4649      	mov	r1, r9
 80028a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f04f 0400 	mov.w	r4, #0
 80028aa:	00a6      	lsls	r6, r4, #2
 80028ac:	61fe      	str	r6, [r7, #28]
 80028ae:	69fe      	ldr	r6, [r7, #28]
 80028b0:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
 80028b4:	61fe      	str	r6, [r7, #28]
 80028b6:	009c      	lsls	r4, r3, #2
 80028b8:	61bc      	str	r4, [r7, #24]
 80028ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028be:	f7fe f96f 	bl	8000ba0 <__aeabi_uldivmod>
 80028c2:	4603      	mov	r3, r0
 80028c4:	460c      	mov	r4, r1
 80028c6:	461a      	mov	r2, r3
 80028c8:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <UART_SetConfig+0x35c>)
 80028ca:	fba3 1302 	umull	r1, r3, r3, r2
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2164      	movs	r1, #100	; 0x64
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	3332      	adds	r3, #50	; 0x32
 80028dc:	4a08      	ldr	r2, [pc, #32]	; (8002900 <UART_SetConfig+0x35c>)
 80028de:	fba2 1303 	umull	r1, r3, r2, r3
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	442b      	add	r3, r5
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	6093      	str	r3, [r2, #8]
}
 80028ee:	bf00      	nop
 80028f0:	3744      	adds	r7, #68	; 0x44
 80028f2:	46bd      	mov	sp, r7
 80028f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028f8:	40011000 	.word	0x40011000
 80028fc:	40011400 	.word	0x40011400
 8002900:	51eb851f 	.word	0x51eb851f

08002904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002904:	f8df d034 	ldr.w	sp, [pc, #52]	; 800293c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002908:	480d      	ldr	r0, [pc, #52]	; (8002940 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002910:	e002      	b.n	8002918 <LoopCopyDataInit>

08002912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002916:	3304      	adds	r3, #4

08002918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800291a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800291c:	d3f9      	bcc.n	8002912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002920:	4c0b      	ldr	r4, [pc, #44]	; (8002950 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002924:	e001      	b.n	800292a <LoopFillZerobss>

08002926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002928:	3204      	adds	r2, #4

0800292a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800292a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800292c:	d3fb      	bcc.n	8002926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800292e:	f7fe fd27 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002932:	f000 f817 	bl	8002964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002936:	f7fe fafb 	bl	8000f30 <main>
  bx  lr    
 800293a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800293c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002944:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002948:	08004d40 	.word	0x08004d40
  ldr r2, =_sbss
 800294c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002950:	2000027c 	.word	0x2000027c

08002954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002954:	e7fe      	b.n	8002954 <ADC_IRQHandler>
	...

08002958 <__errno>:
 8002958:	4b01      	ldr	r3, [pc, #4]	; (8002960 <__errno+0x8>)
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	2000002c 	.word	0x2000002c

08002964 <__libc_init_array>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	4e0d      	ldr	r6, [pc, #52]	; (800299c <__libc_init_array+0x38>)
 8002968:	4c0d      	ldr	r4, [pc, #52]	; (80029a0 <__libc_init_array+0x3c>)
 800296a:	1ba4      	subs	r4, r4, r6
 800296c:	10a4      	asrs	r4, r4, #2
 800296e:	2500      	movs	r5, #0
 8002970:	42a5      	cmp	r5, r4
 8002972:	d109      	bne.n	8002988 <__libc_init_array+0x24>
 8002974:	4e0b      	ldr	r6, [pc, #44]	; (80029a4 <__libc_init_array+0x40>)
 8002976:	4c0c      	ldr	r4, [pc, #48]	; (80029a8 <__libc_init_array+0x44>)
 8002978:	f002 f882 	bl	8004a80 <_init>
 800297c:	1ba4      	subs	r4, r4, r6
 800297e:	10a4      	asrs	r4, r4, #2
 8002980:	2500      	movs	r5, #0
 8002982:	42a5      	cmp	r5, r4
 8002984:	d105      	bne.n	8002992 <__libc_init_array+0x2e>
 8002986:	bd70      	pop	{r4, r5, r6, pc}
 8002988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800298c:	4798      	blx	r3
 800298e:	3501      	adds	r5, #1
 8002990:	e7ee      	b.n	8002970 <__libc_init_array+0xc>
 8002992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002996:	4798      	blx	r3
 8002998:	3501      	adds	r5, #1
 800299a:	e7f2      	b.n	8002982 <__libc_init_array+0x1e>
 800299c:	08004d38 	.word	0x08004d38
 80029a0:	08004d38 	.word	0x08004d38
 80029a4:	08004d38 	.word	0x08004d38
 80029a8:	08004d3c 	.word	0x08004d3c

080029ac <memset>:
 80029ac:	4402      	add	r2, r0
 80029ae:	4603      	mov	r3, r0
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d100      	bne.n	80029b6 <memset+0xa>
 80029b4:	4770      	bx	lr
 80029b6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ba:	e7f9      	b.n	80029b0 <memset+0x4>

080029bc <__cvt>:
 80029bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029c0:	ec55 4b10 	vmov	r4, r5, d0
 80029c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80029c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80029ca:	2d00      	cmp	r5, #0
 80029cc:	460e      	mov	r6, r1
 80029ce:	4691      	mov	r9, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	bfb8      	it	lt
 80029d4:	4622      	movlt	r2, r4
 80029d6:	462b      	mov	r3, r5
 80029d8:	f027 0720 	bic.w	r7, r7, #32
 80029dc:	bfbb      	ittet	lt
 80029de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80029e2:	461d      	movlt	r5, r3
 80029e4:	2300      	movge	r3, #0
 80029e6:	232d      	movlt	r3, #45	; 0x2d
 80029e8:	bfb8      	it	lt
 80029ea:	4614      	movlt	r4, r2
 80029ec:	2f46      	cmp	r7, #70	; 0x46
 80029ee:	700b      	strb	r3, [r1, #0]
 80029f0:	d004      	beq.n	80029fc <__cvt+0x40>
 80029f2:	2f45      	cmp	r7, #69	; 0x45
 80029f4:	d100      	bne.n	80029f8 <__cvt+0x3c>
 80029f6:	3601      	adds	r6, #1
 80029f8:	2102      	movs	r1, #2
 80029fa:	e000      	b.n	80029fe <__cvt+0x42>
 80029fc:	2103      	movs	r1, #3
 80029fe:	ab03      	add	r3, sp, #12
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	ab02      	add	r3, sp, #8
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4632      	mov	r2, r6
 8002a08:	4653      	mov	r3, sl
 8002a0a:	ec45 4b10 	vmov	d0, r4, r5
 8002a0e:	f000 fcf3 	bl	80033f8 <_dtoa_r>
 8002a12:	2f47      	cmp	r7, #71	; 0x47
 8002a14:	4680      	mov	r8, r0
 8002a16:	d102      	bne.n	8002a1e <__cvt+0x62>
 8002a18:	f019 0f01 	tst.w	r9, #1
 8002a1c:	d026      	beq.n	8002a6c <__cvt+0xb0>
 8002a1e:	2f46      	cmp	r7, #70	; 0x46
 8002a20:	eb08 0906 	add.w	r9, r8, r6
 8002a24:	d111      	bne.n	8002a4a <__cvt+0x8e>
 8002a26:	f898 3000 	ldrb.w	r3, [r8]
 8002a2a:	2b30      	cmp	r3, #48	; 0x30
 8002a2c:	d10a      	bne.n	8002a44 <__cvt+0x88>
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2300      	movs	r3, #0
 8002a32:	4620      	mov	r0, r4
 8002a34:	4629      	mov	r1, r5
 8002a36:	f7fe f843 	bl	8000ac0 <__aeabi_dcmpeq>
 8002a3a:	b918      	cbnz	r0, 8002a44 <__cvt+0x88>
 8002a3c:	f1c6 0601 	rsb	r6, r6, #1
 8002a40:	f8ca 6000 	str.w	r6, [sl]
 8002a44:	f8da 3000 	ldr.w	r3, [sl]
 8002a48:	4499      	add	r9, r3
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fe f835 	bl	8000ac0 <__aeabi_dcmpeq>
 8002a56:	b938      	cbnz	r0, 8002a68 <__cvt+0xac>
 8002a58:	2230      	movs	r2, #48	; 0x30
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	4599      	cmp	r9, r3
 8002a5e:	d905      	bls.n	8002a6c <__cvt+0xb0>
 8002a60:	1c59      	adds	r1, r3, #1
 8002a62:	9103      	str	r1, [sp, #12]
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e7f8      	b.n	8002a5a <__cvt+0x9e>
 8002a68:	f8cd 900c 	str.w	r9, [sp, #12]
 8002a6c:	9b03      	ldr	r3, [sp, #12]
 8002a6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a70:	eba3 0308 	sub.w	r3, r3, r8
 8002a74:	4640      	mov	r0, r8
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	b004      	add	sp, #16
 8002a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a7e <__exponent>:
 8002a7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a80:	4603      	mov	r3, r0
 8002a82:	2900      	cmp	r1, #0
 8002a84:	bfb8      	it	lt
 8002a86:	4249      	neglt	r1, r1
 8002a88:	f803 2b02 	strb.w	r2, [r3], #2
 8002a8c:	bfb4      	ite	lt
 8002a8e:	222d      	movlt	r2, #45	; 0x2d
 8002a90:	222b      	movge	r2, #43	; 0x2b
 8002a92:	2909      	cmp	r1, #9
 8002a94:	7042      	strb	r2, [r0, #1]
 8002a96:	dd20      	ble.n	8002ada <__exponent+0x5c>
 8002a98:	f10d 0207 	add.w	r2, sp, #7
 8002a9c:	4617      	mov	r7, r2
 8002a9e:	260a      	movs	r6, #10
 8002aa0:	fb91 f5f6 	sdiv	r5, r1, r6
 8002aa4:	fb06 1115 	mls	r1, r6, r5, r1
 8002aa8:	3130      	adds	r1, #48	; 0x30
 8002aaa:	2d09      	cmp	r5, #9
 8002aac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ab0:	f102 34ff 	add.w	r4, r2, #4294967295
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	dc09      	bgt.n	8002acc <__exponent+0x4e>
 8002ab8:	3130      	adds	r1, #48	; 0x30
 8002aba:	3a02      	subs	r2, #2
 8002abc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002ac0:	42ba      	cmp	r2, r7
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	d304      	bcc.n	8002ad0 <__exponent+0x52>
 8002ac6:	1a20      	subs	r0, r4, r0
 8002ac8:	b003      	add	sp, #12
 8002aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002acc:	4622      	mov	r2, r4
 8002ace:	e7e7      	b.n	8002aa0 <__exponent+0x22>
 8002ad0:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8002ad8:	e7f2      	b.n	8002ac0 <__exponent+0x42>
 8002ada:	2230      	movs	r2, #48	; 0x30
 8002adc:	461c      	mov	r4, r3
 8002ade:	4411      	add	r1, r2
 8002ae0:	f804 2b02 	strb.w	r2, [r4], #2
 8002ae4:	7059      	strb	r1, [r3, #1]
 8002ae6:	e7ee      	b.n	8002ac6 <__exponent+0x48>

08002ae8 <_printf_float>:
 8002ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aec:	b08d      	sub	sp, #52	; 0x34
 8002aee:	460c      	mov	r4, r1
 8002af0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002af4:	4616      	mov	r6, r2
 8002af6:	461f      	mov	r7, r3
 8002af8:	4605      	mov	r5, r0
 8002afa:	f001 fa4b 	bl	8003f94 <_localeconv_r>
 8002afe:	6803      	ldr	r3, [r0, #0]
 8002b00:	9304      	str	r3, [sp, #16]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fb64 	bl	80001d0 <strlen>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b0c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b10:	9005      	str	r0, [sp, #20]
 8002b12:	3307      	adds	r3, #7
 8002b14:	f023 0307 	bic.w	r3, r3, #7
 8002b18:	f103 0208 	add.w	r2, r3, #8
 8002b1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002b20:	f8d4 b000 	ldr.w	fp, [r4]
 8002b24:	f8c8 2000 	str.w	r2, [r8]
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b30:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002b34:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b38:	9307      	str	r3, [sp, #28]
 8002b3a:	f8cd 8018 	str.w	r8, [sp, #24]
 8002b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b42:	4ba5      	ldr	r3, [pc, #660]	; (8002dd8 <_printf_float+0x2f0>)
 8002b44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b48:	f7fd ffec 	bl	8000b24 <__aeabi_dcmpun>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	f040 81fb 	bne.w	8002f48 <_printf_float+0x460>
 8002b52:	f04f 32ff 	mov.w	r2, #4294967295
 8002b56:	4ba0      	ldr	r3, [pc, #640]	; (8002dd8 <_printf_float+0x2f0>)
 8002b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b5c:	f7fd ffc4 	bl	8000ae8 <__aeabi_dcmple>
 8002b60:	2800      	cmp	r0, #0
 8002b62:	f040 81f1 	bne.w	8002f48 <_printf_float+0x460>
 8002b66:	2200      	movs	r2, #0
 8002b68:	2300      	movs	r3, #0
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	4649      	mov	r1, r9
 8002b6e:	f7fd ffb1 	bl	8000ad4 <__aeabi_dcmplt>
 8002b72:	b110      	cbz	r0, 8002b7a <_printf_float+0x92>
 8002b74:	232d      	movs	r3, #45	; 0x2d
 8002b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b7a:	4b98      	ldr	r3, [pc, #608]	; (8002ddc <_printf_float+0x2f4>)
 8002b7c:	4a98      	ldr	r2, [pc, #608]	; (8002de0 <_printf_float+0x2f8>)
 8002b7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002b82:	bf8c      	ite	hi
 8002b84:	4690      	movhi	r8, r2
 8002b86:	4698      	movls	r8, r3
 8002b88:	2303      	movs	r3, #3
 8002b8a:	f02b 0204 	bic.w	r2, fp, #4
 8002b8e:	6123      	str	r3, [r4, #16]
 8002b90:	6022      	str	r2, [r4, #0]
 8002b92:	f04f 0900 	mov.w	r9, #0
 8002b96:	9700      	str	r7, [sp, #0]
 8002b98:	4633      	mov	r3, r6
 8002b9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f000 f9e2 	bl	8002f68 <_printf_common>
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	f040 8093 	bne.w	8002cd0 <_printf_float+0x1e8>
 8002baa:	f04f 30ff 	mov.w	r0, #4294967295
 8002bae:	b00d      	add	sp, #52	; 0x34
 8002bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb4:	6861      	ldr	r1, [r4, #4]
 8002bb6:	1c4b      	adds	r3, r1, #1
 8002bb8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002bbc:	d13f      	bne.n	8002c3e <_printf_float+0x156>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	6063      	str	r3, [r4, #4]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9303      	str	r3, [sp, #12]
 8002bc6:	ab0a      	add	r3, sp, #40	; 0x28
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	ab09      	add	r3, sp, #36	; 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	ec49 8b10 	vmov	d0, r8, r9
 8002bd2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002bd6:	6022      	str	r2, [r4, #0]
 8002bd8:	f8cd a004 	str.w	sl, [sp, #4]
 8002bdc:	6861      	ldr	r1, [r4, #4]
 8002bde:	4628      	mov	r0, r5
 8002be0:	f7ff feec 	bl	80029bc <__cvt>
 8002be4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002be8:	2b47      	cmp	r3, #71	; 0x47
 8002bea:	4680      	mov	r8, r0
 8002bec:	d109      	bne.n	8002c02 <_printf_float+0x11a>
 8002bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bf0:	1cd8      	adds	r0, r3, #3
 8002bf2:	db02      	blt.n	8002bfa <_printf_float+0x112>
 8002bf4:	6862      	ldr	r2, [r4, #4]
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	dd57      	ble.n	8002caa <_printf_float+0x1c2>
 8002bfa:	f1aa 0a02 	sub.w	sl, sl, #2
 8002bfe:	fa5f fa8a 	uxtb.w	sl, sl
 8002c02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002c06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c08:	d834      	bhi.n	8002c74 <_printf_float+0x18c>
 8002c0a:	3901      	subs	r1, #1
 8002c0c:	4652      	mov	r2, sl
 8002c0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c12:	9109      	str	r1, [sp, #36]	; 0x24
 8002c14:	f7ff ff33 	bl	8002a7e <__exponent>
 8002c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c1a:	1883      	adds	r3, r0, r2
 8002c1c:	2a01      	cmp	r2, #1
 8002c1e:	4681      	mov	r9, r0
 8002c20:	6123      	str	r3, [r4, #16]
 8002c22:	dc02      	bgt.n	8002c2a <_printf_float+0x142>
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	07d1      	lsls	r1, r2, #31
 8002c28:	d501      	bpl.n	8002c2e <_printf_float+0x146>
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	6123      	str	r3, [r4, #16]
 8002c2e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0af      	beq.n	8002b96 <_printf_float+0xae>
 8002c36:	232d      	movs	r3, #45	; 0x2d
 8002c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c3c:	e7ab      	b.n	8002b96 <_printf_float+0xae>
 8002c3e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002c42:	d002      	beq.n	8002c4a <_printf_float+0x162>
 8002c44:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002c48:	d1bb      	bne.n	8002bc2 <_printf_float+0xda>
 8002c4a:	b189      	cbz	r1, 8002c70 <_printf_float+0x188>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	ab0a      	add	r3, sp, #40	; 0x28
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	ab09      	add	r3, sp, #36	; 0x24
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	ec49 8b10 	vmov	d0, r8, r9
 8002c5c:	6022      	str	r2, [r4, #0]
 8002c5e:	f8cd a004 	str.w	sl, [sp, #4]
 8002c62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002c66:	4628      	mov	r0, r5
 8002c68:	f7ff fea8 	bl	80029bc <__cvt>
 8002c6c:	4680      	mov	r8, r0
 8002c6e:	e7be      	b.n	8002bee <_printf_float+0x106>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e7a5      	b.n	8002bc0 <_printf_float+0xd8>
 8002c74:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002c78:	d119      	bne.n	8002cae <_printf_float+0x1c6>
 8002c7a:	2900      	cmp	r1, #0
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	dd0c      	ble.n	8002c9a <_printf_float+0x1b2>
 8002c80:	6121      	str	r1, [r4, #16]
 8002c82:	b913      	cbnz	r3, 8002c8a <_printf_float+0x1a2>
 8002c84:	6822      	ldr	r2, [r4, #0]
 8002c86:	07d2      	lsls	r2, r2, #31
 8002c88:	d502      	bpl.n	8002c90 <_printf_float+0x1a8>
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	440b      	add	r3, r1
 8002c8e:	6123      	str	r3, [r4, #16]
 8002c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c92:	65a3      	str	r3, [r4, #88]	; 0x58
 8002c94:	f04f 0900 	mov.w	r9, #0
 8002c98:	e7c9      	b.n	8002c2e <_printf_float+0x146>
 8002c9a:	b913      	cbnz	r3, 8002ca2 <_printf_float+0x1ba>
 8002c9c:	6822      	ldr	r2, [r4, #0]
 8002c9e:	07d0      	lsls	r0, r2, #31
 8002ca0:	d501      	bpl.n	8002ca6 <_printf_float+0x1be>
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	e7f3      	b.n	8002c8e <_printf_float+0x1a6>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e7f1      	b.n	8002c8e <_printf_float+0x1a6>
 8002caa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	db05      	blt.n	8002cc2 <_printf_float+0x1da>
 8002cb6:	6822      	ldr	r2, [r4, #0]
 8002cb8:	6123      	str	r3, [r4, #16]
 8002cba:	07d1      	lsls	r1, r2, #31
 8002cbc:	d5e8      	bpl.n	8002c90 <_printf_float+0x1a8>
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	e7e5      	b.n	8002c8e <_printf_float+0x1a6>
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bfd4      	ite	le
 8002cc6:	f1c3 0302 	rsble	r3, r3, #2
 8002cca:	2301      	movgt	r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	e7de      	b.n	8002c8e <_printf_float+0x1a6>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	055a      	lsls	r2, r3, #21
 8002cd4:	d407      	bmi.n	8002ce6 <_printf_float+0x1fe>
 8002cd6:	6923      	ldr	r3, [r4, #16]
 8002cd8:	4642      	mov	r2, r8
 8002cda:	4631      	mov	r1, r6
 8002cdc:	4628      	mov	r0, r5
 8002cde:	47b8      	blx	r7
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d12b      	bne.n	8002d3c <_printf_float+0x254>
 8002ce4:	e761      	b.n	8002baa <_printf_float+0xc2>
 8002ce6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002cea:	f240 80e2 	bls.w	8002eb2 <_printf_float+0x3ca>
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002cf6:	f7fd fee3 	bl	8000ac0 <__aeabi_dcmpeq>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d03c      	beq.n	8002d78 <_printf_float+0x290>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	4a38      	ldr	r2, [pc, #224]	; (8002de4 <_printf_float+0x2fc>)
 8002d02:	4631      	mov	r1, r6
 8002d04:	4628      	mov	r0, r5
 8002d06:	47b8      	blx	r7
 8002d08:	3001      	adds	r0, #1
 8002d0a:	f43f af4e 	beq.w	8002baa <_printf_float+0xc2>
 8002d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d12:	429a      	cmp	r2, r3
 8002d14:	db02      	blt.n	8002d1c <_printf_float+0x234>
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	07d8      	lsls	r0, r3, #31
 8002d1a:	d50f      	bpl.n	8002d3c <_printf_float+0x254>
 8002d1c:	9b05      	ldr	r3, [sp, #20]
 8002d1e:	9a04      	ldr	r2, [sp, #16]
 8002d20:	4631      	mov	r1, r6
 8002d22:	4628      	mov	r0, r5
 8002d24:	47b8      	blx	r7
 8002d26:	3001      	adds	r0, #1
 8002d28:	f43f af3f 	beq.w	8002baa <_printf_float+0xc2>
 8002d2c:	f04f 0800 	mov.w	r8, #0
 8002d30:	f104 091a 	add.w	r9, r4, #26
 8002d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d36:	3b01      	subs	r3, #1
 8002d38:	4598      	cmp	r8, r3
 8002d3a:	db12      	blt.n	8002d62 <_printf_float+0x27a>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	079b      	lsls	r3, r3, #30
 8002d40:	d509      	bpl.n	8002d56 <_printf_float+0x26e>
 8002d42:	f04f 0800 	mov.w	r8, #0
 8002d46:	f104 0919 	add.w	r9, r4, #25
 8002d4a:	68e3      	ldr	r3, [r4, #12]
 8002d4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	4598      	cmp	r8, r3
 8002d52:	f2c0 80ee 	blt.w	8002f32 <_printf_float+0x44a>
 8002d56:	68e0      	ldr	r0, [r4, #12]
 8002d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d5a:	4298      	cmp	r0, r3
 8002d5c:	bfb8      	it	lt
 8002d5e:	4618      	movlt	r0, r3
 8002d60:	e725      	b.n	8002bae <_printf_float+0xc6>
 8002d62:	2301      	movs	r3, #1
 8002d64:	464a      	mov	r2, r9
 8002d66:	4631      	mov	r1, r6
 8002d68:	4628      	mov	r0, r5
 8002d6a:	47b8      	blx	r7
 8002d6c:	3001      	adds	r0, #1
 8002d6e:	f43f af1c 	beq.w	8002baa <_printf_float+0xc2>
 8002d72:	f108 0801 	add.w	r8, r8, #1
 8002d76:	e7dd      	b.n	8002d34 <_printf_float+0x24c>
 8002d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	dc34      	bgt.n	8002de8 <_printf_float+0x300>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <_printf_float+0x2fc>)
 8002d82:	4631      	mov	r1, r6
 8002d84:	4628      	mov	r0, r5
 8002d86:	47b8      	blx	r7
 8002d88:	3001      	adds	r0, #1
 8002d8a:	f43f af0e 	beq.w	8002baa <_printf_float+0xc2>
 8002d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d90:	b923      	cbnz	r3, 8002d9c <_printf_float+0x2b4>
 8002d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d94:	b913      	cbnz	r3, 8002d9c <_printf_float+0x2b4>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	07d9      	lsls	r1, r3, #31
 8002d9a:	d5cf      	bpl.n	8002d3c <_printf_float+0x254>
 8002d9c:	9b05      	ldr	r3, [sp, #20]
 8002d9e:	9a04      	ldr	r2, [sp, #16]
 8002da0:	4631      	mov	r1, r6
 8002da2:	4628      	mov	r0, r5
 8002da4:	47b8      	blx	r7
 8002da6:	3001      	adds	r0, #1
 8002da8:	f43f aeff 	beq.w	8002baa <_printf_float+0xc2>
 8002dac:	f04f 0900 	mov.w	r9, #0
 8002db0:	f104 0a1a 	add.w	sl, r4, #26
 8002db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002db6:	425b      	negs	r3, r3
 8002db8:	4599      	cmp	r9, r3
 8002dba:	db01      	blt.n	8002dc0 <_printf_float+0x2d8>
 8002dbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dbe:	e78b      	b.n	8002cd8 <_printf_float+0x1f0>
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4652      	mov	r2, sl
 8002dc4:	4631      	mov	r1, r6
 8002dc6:	4628      	mov	r0, r5
 8002dc8:	47b8      	blx	r7
 8002dca:	3001      	adds	r0, #1
 8002dcc:	f43f aeed 	beq.w	8002baa <_printf_float+0xc2>
 8002dd0:	f109 0901 	add.w	r9, r9, #1
 8002dd4:	e7ee      	b.n	8002db4 <_printf_float+0x2cc>
 8002dd6:	bf00      	nop
 8002dd8:	7fefffff 	.word	0x7fefffff
 8002ddc:	08004ad4 	.word	0x08004ad4
 8002de0:	08004ad8 	.word	0x08004ad8
 8002de4:	08004ae4 	.word	0x08004ae4
 8002de8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002dec:	429a      	cmp	r2, r3
 8002dee:	bfa8      	it	ge
 8002df0:	461a      	movge	r2, r3
 8002df2:	2a00      	cmp	r2, #0
 8002df4:	4691      	mov	r9, r2
 8002df6:	dc38      	bgt.n	8002e6a <_printf_float+0x382>
 8002df8:	f104 031a 	add.w	r3, r4, #26
 8002dfc:	f04f 0b00 	mov.w	fp, #0
 8002e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e04:	9306      	str	r3, [sp, #24]
 8002e06:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002e0a:	ebaa 0309 	sub.w	r3, sl, r9
 8002e0e:	459b      	cmp	fp, r3
 8002e10:	db33      	blt.n	8002e7a <_printf_float+0x392>
 8002e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e16:	429a      	cmp	r2, r3
 8002e18:	db3a      	blt.n	8002e90 <_printf_float+0x3a8>
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	07da      	lsls	r2, r3, #31
 8002e1e:	d437      	bmi.n	8002e90 <_printf_float+0x3a8>
 8002e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e24:	eba3 020a 	sub.w	r2, r3, sl
 8002e28:	eba3 0901 	sub.w	r9, r3, r1
 8002e2c:	4591      	cmp	r9, r2
 8002e2e:	bfa8      	it	ge
 8002e30:	4691      	movge	r9, r2
 8002e32:	f1b9 0f00 	cmp.w	r9, #0
 8002e36:	dc33      	bgt.n	8002ea0 <_printf_float+0x3b8>
 8002e38:	f04f 0800 	mov.w	r8, #0
 8002e3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e40:	f104 0a1a 	add.w	sl, r4, #26
 8002e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	eba3 0309 	sub.w	r3, r3, r9
 8002e4e:	4598      	cmp	r8, r3
 8002e50:	f6bf af74 	bge.w	8002d3c <_printf_float+0x254>
 8002e54:	2301      	movs	r3, #1
 8002e56:	4652      	mov	r2, sl
 8002e58:	4631      	mov	r1, r6
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	47b8      	blx	r7
 8002e5e:	3001      	adds	r0, #1
 8002e60:	f43f aea3 	beq.w	8002baa <_printf_float+0xc2>
 8002e64:	f108 0801 	add.w	r8, r8, #1
 8002e68:	e7ec      	b.n	8002e44 <_printf_float+0x35c>
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	4631      	mov	r1, r6
 8002e6e:	4642      	mov	r2, r8
 8002e70:	4628      	mov	r0, r5
 8002e72:	47b8      	blx	r7
 8002e74:	3001      	adds	r0, #1
 8002e76:	d1bf      	bne.n	8002df8 <_printf_float+0x310>
 8002e78:	e697      	b.n	8002baa <_printf_float+0xc2>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	9a06      	ldr	r2, [sp, #24]
 8002e7e:	4631      	mov	r1, r6
 8002e80:	4628      	mov	r0, r5
 8002e82:	47b8      	blx	r7
 8002e84:	3001      	adds	r0, #1
 8002e86:	f43f ae90 	beq.w	8002baa <_printf_float+0xc2>
 8002e8a:	f10b 0b01 	add.w	fp, fp, #1
 8002e8e:	e7ba      	b.n	8002e06 <_printf_float+0x31e>
 8002e90:	9b05      	ldr	r3, [sp, #20]
 8002e92:	9a04      	ldr	r2, [sp, #16]
 8002e94:	4631      	mov	r1, r6
 8002e96:	4628      	mov	r0, r5
 8002e98:	47b8      	blx	r7
 8002e9a:	3001      	adds	r0, #1
 8002e9c:	d1c0      	bne.n	8002e20 <_printf_float+0x338>
 8002e9e:	e684      	b.n	8002baa <_printf_float+0xc2>
 8002ea0:	464b      	mov	r3, r9
 8002ea2:	eb08 020a 	add.w	r2, r8, sl
 8002ea6:	4631      	mov	r1, r6
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	47b8      	blx	r7
 8002eac:	3001      	adds	r0, #1
 8002eae:	d1c3      	bne.n	8002e38 <_printf_float+0x350>
 8002eb0:	e67b      	b.n	8002baa <_printf_float+0xc2>
 8002eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002eb4:	2a01      	cmp	r2, #1
 8002eb6:	dc01      	bgt.n	8002ebc <_printf_float+0x3d4>
 8002eb8:	07db      	lsls	r3, r3, #31
 8002eba:	d537      	bpl.n	8002f2c <_printf_float+0x444>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	4642      	mov	r2, r8
 8002ec0:	4631      	mov	r1, r6
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	47b8      	blx	r7
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	f43f ae6f 	beq.w	8002baa <_printf_float+0xc2>
 8002ecc:	9b05      	ldr	r3, [sp, #20]
 8002ece:	9a04      	ldr	r2, [sp, #16]
 8002ed0:	4631      	mov	r1, r6
 8002ed2:	4628      	mov	r0, r5
 8002ed4:	47b8      	blx	r7
 8002ed6:	3001      	adds	r0, #1
 8002ed8:	f43f ae67 	beq.w	8002baa <_printf_float+0xc2>
 8002edc:	2200      	movs	r2, #0
 8002ede:	2300      	movs	r3, #0
 8002ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ee4:	f7fd fdec 	bl	8000ac0 <__aeabi_dcmpeq>
 8002ee8:	b158      	cbz	r0, 8002f02 <_printf_float+0x41a>
 8002eea:	f04f 0800 	mov.w	r8, #0
 8002eee:	f104 0a1a 	add.w	sl, r4, #26
 8002ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	4598      	cmp	r8, r3
 8002ef8:	db0d      	blt.n	8002f16 <_printf_float+0x42e>
 8002efa:	464b      	mov	r3, r9
 8002efc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f00:	e6eb      	b.n	8002cda <_printf_float+0x1f2>
 8002f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f04:	f108 0201 	add.w	r2, r8, #1
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	4631      	mov	r1, r6
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	47b8      	blx	r7
 8002f10:	3001      	adds	r0, #1
 8002f12:	d1f2      	bne.n	8002efa <_printf_float+0x412>
 8002f14:	e649      	b.n	8002baa <_printf_float+0xc2>
 8002f16:	2301      	movs	r3, #1
 8002f18:	4652      	mov	r2, sl
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	47b8      	blx	r7
 8002f20:	3001      	adds	r0, #1
 8002f22:	f43f ae42 	beq.w	8002baa <_printf_float+0xc2>
 8002f26:	f108 0801 	add.w	r8, r8, #1
 8002f2a:	e7e2      	b.n	8002ef2 <_printf_float+0x40a>
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	4642      	mov	r2, r8
 8002f30:	e7eb      	b.n	8002f0a <_printf_float+0x422>
 8002f32:	2301      	movs	r3, #1
 8002f34:	464a      	mov	r2, r9
 8002f36:	4631      	mov	r1, r6
 8002f38:	4628      	mov	r0, r5
 8002f3a:	47b8      	blx	r7
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	f43f ae34 	beq.w	8002baa <_printf_float+0xc2>
 8002f42:	f108 0801 	add.w	r8, r8, #1
 8002f46:	e700      	b.n	8002d4a <_printf_float+0x262>
 8002f48:	4642      	mov	r2, r8
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	4640      	mov	r0, r8
 8002f4e:	4649      	mov	r1, r9
 8002f50:	f7fd fde8 	bl	8000b24 <__aeabi_dcmpun>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	f43f ae2d 	beq.w	8002bb4 <_printf_float+0xcc>
 8002f5a:	4b01      	ldr	r3, [pc, #4]	; (8002f60 <_printf_float+0x478>)
 8002f5c:	4a01      	ldr	r2, [pc, #4]	; (8002f64 <_printf_float+0x47c>)
 8002f5e:	e60e      	b.n	8002b7e <_printf_float+0x96>
 8002f60:	08004adc 	.word	0x08004adc
 8002f64:	08004ae0 	.word	0x08004ae0

08002f68 <_printf_common>:
 8002f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6c:	4691      	mov	r9, r2
 8002f6e:	461f      	mov	r7, r3
 8002f70:	688a      	ldr	r2, [r1, #8]
 8002f72:	690b      	ldr	r3, [r1, #16]
 8002f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bfb8      	it	lt
 8002f7c:	4613      	movlt	r3, r2
 8002f7e:	f8c9 3000 	str.w	r3, [r9]
 8002f82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f86:	4606      	mov	r6, r0
 8002f88:	460c      	mov	r4, r1
 8002f8a:	b112      	cbz	r2, 8002f92 <_printf_common+0x2a>
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f8c9 3000 	str.w	r3, [r9]
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	0699      	lsls	r1, r3, #26
 8002f96:	bf42      	ittt	mi
 8002f98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f9c:	3302      	addmi	r3, #2
 8002f9e:	f8c9 3000 	strmi.w	r3, [r9]
 8002fa2:	6825      	ldr	r5, [r4, #0]
 8002fa4:	f015 0506 	ands.w	r5, r5, #6
 8002fa8:	d107      	bne.n	8002fba <_printf_common+0x52>
 8002faa:	f104 0a19 	add.w	sl, r4, #25
 8002fae:	68e3      	ldr	r3, [r4, #12]
 8002fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	429d      	cmp	r5, r3
 8002fb8:	db29      	blt.n	800300e <_printf_common+0xa6>
 8002fba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	3300      	adds	r3, #0
 8002fc2:	bf18      	it	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	0692      	lsls	r2, r2, #26
 8002fc8:	d42e      	bmi.n	8003028 <_printf_common+0xc0>
 8002fca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fce:	4639      	mov	r1, r7
 8002fd0:	4630      	mov	r0, r6
 8002fd2:	47c0      	blx	r8
 8002fd4:	3001      	adds	r0, #1
 8002fd6:	d021      	beq.n	800301c <_printf_common+0xb4>
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	68e5      	ldr	r5, [r4, #12]
 8002fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8002fe0:	f003 0306 	and.w	r3, r3, #6
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	bf08      	it	eq
 8002fe8:	1aad      	subeq	r5, r5, r2
 8002fea:	68a3      	ldr	r3, [r4, #8]
 8002fec:	6922      	ldr	r2, [r4, #16]
 8002fee:	bf0c      	ite	eq
 8002ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ff4:	2500      	movne	r5, #0
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	bfc4      	itt	gt
 8002ffa:	1a9b      	subgt	r3, r3, r2
 8002ffc:	18ed      	addgt	r5, r5, r3
 8002ffe:	f04f 0900 	mov.w	r9, #0
 8003002:	341a      	adds	r4, #26
 8003004:	454d      	cmp	r5, r9
 8003006:	d11b      	bne.n	8003040 <_printf_common+0xd8>
 8003008:	2000      	movs	r0, #0
 800300a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800300e:	2301      	movs	r3, #1
 8003010:	4652      	mov	r2, sl
 8003012:	4639      	mov	r1, r7
 8003014:	4630      	mov	r0, r6
 8003016:	47c0      	blx	r8
 8003018:	3001      	adds	r0, #1
 800301a:	d103      	bne.n	8003024 <_printf_common+0xbc>
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003024:	3501      	adds	r5, #1
 8003026:	e7c2      	b.n	8002fae <_printf_common+0x46>
 8003028:	18e1      	adds	r1, r4, r3
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	2030      	movs	r0, #48	; 0x30
 800302e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003032:	4422      	add	r2, r4
 8003034:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003038:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800303c:	3302      	adds	r3, #2
 800303e:	e7c4      	b.n	8002fca <_printf_common+0x62>
 8003040:	2301      	movs	r3, #1
 8003042:	4622      	mov	r2, r4
 8003044:	4639      	mov	r1, r7
 8003046:	4630      	mov	r0, r6
 8003048:	47c0      	blx	r8
 800304a:	3001      	adds	r0, #1
 800304c:	d0e6      	beq.n	800301c <_printf_common+0xb4>
 800304e:	f109 0901 	add.w	r9, r9, #1
 8003052:	e7d7      	b.n	8003004 <_printf_common+0x9c>

08003054 <_printf_i>:
 8003054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003058:	4617      	mov	r7, r2
 800305a:	7e0a      	ldrb	r2, [r1, #24]
 800305c:	b085      	sub	sp, #20
 800305e:	2a6e      	cmp	r2, #110	; 0x6e
 8003060:	4698      	mov	r8, r3
 8003062:	4606      	mov	r6, r0
 8003064:	460c      	mov	r4, r1
 8003066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003068:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800306c:	f000 80bc 	beq.w	80031e8 <_printf_i+0x194>
 8003070:	d81a      	bhi.n	80030a8 <_printf_i+0x54>
 8003072:	2a63      	cmp	r2, #99	; 0x63
 8003074:	d02e      	beq.n	80030d4 <_printf_i+0x80>
 8003076:	d80a      	bhi.n	800308e <_printf_i+0x3a>
 8003078:	2a00      	cmp	r2, #0
 800307a:	f000 80c8 	beq.w	800320e <_printf_i+0x1ba>
 800307e:	2a58      	cmp	r2, #88	; 0x58
 8003080:	f000 808a 	beq.w	8003198 <_printf_i+0x144>
 8003084:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003088:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800308c:	e02a      	b.n	80030e4 <_printf_i+0x90>
 800308e:	2a64      	cmp	r2, #100	; 0x64
 8003090:	d001      	beq.n	8003096 <_printf_i+0x42>
 8003092:	2a69      	cmp	r2, #105	; 0x69
 8003094:	d1f6      	bne.n	8003084 <_printf_i+0x30>
 8003096:	6821      	ldr	r1, [r4, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800309e:	d023      	beq.n	80030e8 <_printf_i+0x94>
 80030a0:	1d11      	adds	r1, r2, #4
 80030a2:	6019      	str	r1, [r3, #0]
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	e027      	b.n	80030f8 <_printf_i+0xa4>
 80030a8:	2a73      	cmp	r2, #115	; 0x73
 80030aa:	f000 80b4 	beq.w	8003216 <_printf_i+0x1c2>
 80030ae:	d808      	bhi.n	80030c2 <_printf_i+0x6e>
 80030b0:	2a6f      	cmp	r2, #111	; 0x6f
 80030b2:	d02a      	beq.n	800310a <_printf_i+0xb6>
 80030b4:	2a70      	cmp	r2, #112	; 0x70
 80030b6:	d1e5      	bne.n	8003084 <_printf_i+0x30>
 80030b8:	680a      	ldr	r2, [r1, #0]
 80030ba:	f042 0220 	orr.w	r2, r2, #32
 80030be:	600a      	str	r2, [r1, #0]
 80030c0:	e003      	b.n	80030ca <_printf_i+0x76>
 80030c2:	2a75      	cmp	r2, #117	; 0x75
 80030c4:	d021      	beq.n	800310a <_printf_i+0xb6>
 80030c6:	2a78      	cmp	r2, #120	; 0x78
 80030c8:	d1dc      	bne.n	8003084 <_printf_i+0x30>
 80030ca:	2278      	movs	r2, #120	; 0x78
 80030cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80030d0:	496e      	ldr	r1, [pc, #440]	; (800328c <_printf_i+0x238>)
 80030d2:	e064      	b.n	800319e <_printf_i+0x14a>
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80030da:	1d11      	adds	r1, r2, #4
 80030dc:	6019      	str	r1, [r3, #0]
 80030de:	6813      	ldr	r3, [r2, #0]
 80030e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0a3      	b.n	8003230 <_printf_i+0x1dc>
 80030e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80030ec:	f102 0104 	add.w	r1, r2, #4
 80030f0:	6019      	str	r1, [r3, #0]
 80030f2:	d0d7      	beq.n	80030a4 <_printf_i+0x50>
 80030f4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	da03      	bge.n	8003104 <_printf_i+0xb0>
 80030fc:	222d      	movs	r2, #45	; 0x2d
 80030fe:	425b      	negs	r3, r3
 8003100:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003104:	4962      	ldr	r1, [pc, #392]	; (8003290 <_printf_i+0x23c>)
 8003106:	220a      	movs	r2, #10
 8003108:	e017      	b.n	800313a <_printf_i+0xe6>
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	6819      	ldr	r1, [r3, #0]
 800310e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003112:	d003      	beq.n	800311c <_printf_i+0xc8>
 8003114:	1d08      	adds	r0, r1, #4
 8003116:	6018      	str	r0, [r3, #0]
 8003118:	680b      	ldr	r3, [r1, #0]
 800311a:	e006      	b.n	800312a <_printf_i+0xd6>
 800311c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003120:	f101 0004 	add.w	r0, r1, #4
 8003124:	6018      	str	r0, [r3, #0]
 8003126:	d0f7      	beq.n	8003118 <_printf_i+0xc4>
 8003128:	880b      	ldrh	r3, [r1, #0]
 800312a:	4959      	ldr	r1, [pc, #356]	; (8003290 <_printf_i+0x23c>)
 800312c:	2a6f      	cmp	r2, #111	; 0x6f
 800312e:	bf14      	ite	ne
 8003130:	220a      	movne	r2, #10
 8003132:	2208      	moveq	r2, #8
 8003134:	2000      	movs	r0, #0
 8003136:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800313a:	6865      	ldr	r5, [r4, #4]
 800313c:	60a5      	str	r5, [r4, #8]
 800313e:	2d00      	cmp	r5, #0
 8003140:	f2c0 809c 	blt.w	800327c <_printf_i+0x228>
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	f020 0004 	bic.w	r0, r0, #4
 800314a:	6020      	str	r0, [r4, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d13f      	bne.n	80031d0 <_printf_i+0x17c>
 8003150:	2d00      	cmp	r5, #0
 8003152:	f040 8095 	bne.w	8003280 <_printf_i+0x22c>
 8003156:	4675      	mov	r5, lr
 8003158:	2a08      	cmp	r2, #8
 800315a:	d10b      	bne.n	8003174 <_printf_i+0x120>
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	07da      	lsls	r2, r3, #31
 8003160:	d508      	bpl.n	8003174 <_printf_i+0x120>
 8003162:	6923      	ldr	r3, [r4, #16]
 8003164:	6862      	ldr	r2, [r4, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	bfde      	ittt	le
 800316a:	2330      	movle	r3, #48	; 0x30
 800316c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003170:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003174:	ebae 0305 	sub.w	r3, lr, r5
 8003178:	6123      	str	r3, [r4, #16]
 800317a:	f8cd 8000 	str.w	r8, [sp]
 800317e:	463b      	mov	r3, r7
 8003180:	aa03      	add	r2, sp, #12
 8003182:	4621      	mov	r1, r4
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff feef 	bl	8002f68 <_printf_common>
 800318a:	3001      	adds	r0, #1
 800318c:	d155      	bne.n	800323a <_printf_i+0x1e6>
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	b005      	add	sp, #20
 8003194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003198:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800319c:	493c      	ldr	r1, [pc, #240]	; (8003290 <_printf_i+0x23c>)
 800319e:	6822      	ldr	r2, [r4, #0]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031a6:	f100 0504 	add.w	r5, r0, #4
 80031aa:	601d      	str	r5, [r3, #0]
 80031ac:	d001      	beq.n	80031b2 <_printf_i+0x15e>
 80031ae:	6803      	ldr	r3, [r0, #0]
 80031b0:	e002      	b.n	80031b8 <_printf_i+0x164>
 80031b2:	0655      	lsls	r5, r2, #25
 80031b4:	d5fb      	bpl.n	80031ae <_printf_i+0x15a>
 80031b6:	8803      	ldrh	r3, [r0, #0]
 80031b8:	07d0      	lsls	r0, r2, #31
 80031ba:	bf44      	itt	mi
 80031bc:	f042 0220 	orrmi.w	r2, r2, #32
 80031c0:	6022      	strmi	r2, [r4, #0]
 80031c2:	b91b      	cbnz	r3, 80031cc <_printf_i+0x178>
 80031c4:	6822      	ldr	r2, [r4, #0]
 80031c6:	f022 0220 	bic.w	r2, r2, #32
 80031ca:	6022      	str	r2, [r4, #0]
 80031cc:	2210      	movs	r2, #16
 80031ce:	e7b1      	b.n	8003134 <_printf_i+0xe0>
 80031d0:	4675      	mov	r5, lr
 80031d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80031d6:	fb02 3310 	mls	r3, r2, r0, r3
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031e0:	4603      	mov	r3, r0
 80031e2:	2800      	cmp	r0, #0
 80031e4:	d1f5      	bne.n	80031d2 <_printf_i+0x17e>
 80031e6:	e7b7      	b.n	8003158 <_printf_i+0x104>
 80031e8:	6808      	ldr	r0, [r1, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	6949      	ldr	r1, [r1, #20]
 80031ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80031f2:	d004      	beq.n	80031fe <_printf_i+0x1aa>
 80031f4:	1d10      	adds	r0, r2, #4
 80031f6:	6018      	str	r0, [r3, #0]
 80031f8:	6813      	ldr	r3, [r2, #0]
 80031fa:	6019      	str	r1, [r3, #0]
 80031fc:	e007      	b.n	800320e <_printf_i+0x1ba>
 80031fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003202:	f102 0004 	add.w	r0, r2, #4
 8003206:	6018      	str	r0, [r3, #0]
 8003208:	6813      	ldr	r3, [r2, #0]
 800320a:	d0f6      	beq.n	80031fa <_printf_i+0x1a6>
 800320c:	8019      	strh	r1, [r3, #0]
 800320e:	2300      	movs	r3, #0
 8003210:	6123      	str	r3, [r4, #16]
 8003212:	4675      	mov	r5, lr
 8003214:	e7b1      	b.n	800317a <_printf_i+0x126>
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	1d11      	adds	r1, r2, #4
 800321a:	6019      	str	r1, [r3, #0]
 800321c:	6815      	ldr	r5, [r2, #0]
 800321e:	6862      	ldr	r2, [r4, #4]
 8003220:	2100      	movs	r1, #0
 8003222:	4628      	mov	r0, r5
 8003224:	f7fc ffdc 	bl	80001e0 <memchr>
 8003228:	b108      	cbz	r0, 800322e <_printf_i+0x1da>
 800322a:	1b40      	subs	r0, r0, r5
 800322c:	6060      	str	r0, [r4, #4]
 800322e:	6863      	ldr	r3, [r4, #4]
 8003230:	6123      	str	r3, [r4, #16]
 8003232:	2300      	movs	r3, #0
 8003234:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003238:	e79f      	b.n	800317a <_printf_i+0x126>
 800323a:	6923      	ldr	r3, [r4, #16]
 800323c:	462a      	mov	r2, r5
 800323e:	4639      	mov	r1, r7
 8003240:	4630      	mov	r0, r6
 8003242:	47c0      	blx	r8
 8003244:	3001      	adds	r0, #1
 8003246:	d0a2      	beq.n	800318e <_printf_i+0x13a>
 8003248:	6823      	ldr	r3, [r4, #0]
 800324a:	079b      	lsls	r3, r3, #30
 800324c:	d507      	bpl.n	800325e <_printf_i+0x20a>
 800324e:	2500      	movs	r5, #0
 8003250:	f104 0919 	add.w	r9, r4, #25
 8003254:	68e3      	ldr	r3, [r4, #12]
 8003256:	9a03      	ldr	r2, [sp, #12]
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	429d      	cmp	r5, r3
 800325c:	db05      	blt.n	800326a <_printf_i+0x216>
 800325e:	68e0      	ldr	r0, [r4, #12]
 8003260:	9b03      	ldr	r3, [sp, #12]
 8003262:	4298      	cmp	r0, r3
 8003264:	bfb8      	it	lt
 8003266:	4618      	movlt	r0, r3
 8003268:	e793      	b.n	8003192 <_printf_i+0x13e>
 800326a:	2301      	movs	r3, #1
 800326c:	464a      	mov	r2, r9
 800326e:	4639      	mov	r1, r7
 8003270:	4630      	mov	r0, r6
 8003272:	47c0      	blx	r8
 8003274:	3001      	adds	r0, #1
 8003276:	d08a      	beq.n	800318e <_printf_i+0x13a>
 8003278:	3501      	adds	r5, #1
 800327a:	e7eb      	b.n	8003254 <_printf_i+0x200>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1a7      	bne.n	80031d0 <_printf_i+0x17c>
 8003280:	780b      	ldrb	r3, [r1, #0]
 8003282:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003286:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800328a:	e765      	b.n	8003158 <_printf_i+0x104>
 800328c:	08004af7 	.word	0x08004af7
 8003290:	08004ae6 	.word	0x08004ae6

08003294 <siprintf>:
 8003294:	b40e      	push	{r1, r2, r3}
 8003296:	b500      	push	{lr}
 8003298:	b09c      	sub	sp, #112	; 0x70
 800329a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800329e:	ab1d      	add	r3, sp, #116	; 0x74
 80032a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80032a4:	9002      	str	r0, [sp, #8]
 80032a6:	9006      	str	r0, [sp, #24]
 80032a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80032ac:	480a      	ldr	r0, [pc, #40]	; (80032d8 <siprintf+0x44>)
 80032ae:	9104      	str	r1, [sp, #16]
 80032b0:	9107      	str	r1, [sp, #28]
 80032b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80032b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80032ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 80032be:	6800      	ldr	r0, [r0, #0]
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	a902      	add	r1, sp, #8
 80032c4:	f001 fa6e 	bl	80047a4 <_svfiprintf_r>
 80032c8:	9b02      	ldr	r3, [sp, #8]
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	b01c      	add	sp, #112	; 0x70
 80032d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032d4:	b003      	add	sp, #12
 80032d6:	4770      	bx	lr
 80032d8:	2000002c 	.word	0x2000002c

080032dc <quorem>:
 80032dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e0:	6903      	ldr	r3, [r0, #16]
 80032e2:	690c      	ldr	r4, [r1, #16]
 80032e4:	429c      	cmp	r4, r3
 80032e6:	4680      	mov	r8, r0
 80032e8:	f300 8082 	bgt.w	80033f0 <quorem+0x114>
 80032ec:	3c01      	subs	r4, #1
 80032ee:	f101 0714 	add.w	r7, r1, #20
 80032f2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80032f6:	f100 0614 	add.w	r6, r0, #20
 80032fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80032fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003302:	eb06 030e 	add.w	r3, r6, lr
 8003306:	3501      	adds	r5, #1
 8003308:	eb07 090e 	add.w	r9, r7, lr
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	fbb0 f5f5 	udiv	r5, r0, r5
 8003312:	b395      	cbz	r5, 800337a <quorem+0x9e>
 8003314:	f04f 0a00 	mov.w	sl, #0
 8003318:	4638      	mov	r0, r7
 800331a:	46b4      	mov	ip, r6
 800331c:	46d3      	mov	fp, sl
 800331e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003322:	b293      	uxth	r3, r2
 8003324:	fb05 a303 	mla	r3, r5, r3, sl
 8003328:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800332c:	b29b      	uxth	r3, r3
 800332e:	ebab 0303 	sub.w	r3, fp, r3
 8003332:	0c12      	lsrs	r2, r2, #16
 8003334:	f8bc b000 	ldrh.w	fp, [ip]
 8003338:	fb05 a202 	mla	r2, r5, r2, sl
 800333c:	fa13 f38b 	uxtah	r3, r3, fp
 8003340:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003344:	fa1f fb82 	uxth.w	fp, r2
 8003348:	f8dc 2000 	ldr.w	r2, [ip]
 800334c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003350:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003354:	b29b      	uxth	r3, r3
 8003356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800335a:	4581      	cmp	r9, r0
 800335c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003360:	f84c 3b04 	str.w	r3, [ip], #4
 8003364:	d2db      	bcs.n	800331e <quorem+0x42>
 8003366:	f856 300e 	ldr.w	r3, [r6, lr]
 800336a:	b933      	cbnz	r3, 800337a <quorem+0x9e>
 800336c:	9b01      	ldr	r3, [sp, #4]
 800336e:	3b04      	subs	r3, #4
 8003370:	429e      	cmp	r6, r3
 8003372:	461a      	mov	r2, r3
 8003374:	d330      	bcc.n	80033d8 <quorem+0xfc>
 8003376:	f8c8 4010 	str.w	r4, [r8, #16]
 800337a:	4640      	mov	r0, r8
 800337c:	f001 f835 	bl	80043ea <__mcmp>
 8003380:	2800      	cmp	r0, #0
 8003382:	db25      	blt.n	80033d0 <quorem+0xf4>
 8003384:	3501      	adds	r5, #1
 8003386:	4630      	mov	r0, r6
 8003388:	f04f 0e00 	mov.w	lr, #0
 800338c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003390:	f8d0 c000 	ldr.w	ip, [r0]
 8003394:	b293      	uxth	r3, r2
 8003396:	ebae 0303 	sub.w	r3, lr, r3
 800339a:	0c12      	lsrs	r2, r2, #16
 800339c:	fa13 f38c 	uxtah	r3, r3, ip
 80033a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80033a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033ae:	45b9      	cmp	r9, r7
 80033b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80033b4:	f840 3b04 	str.w	r3, [r0], #4
 80033b8:	d2e8      	bcs.n	800338c <quorem+0xb0>
 80033ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80033be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80033c2:	b92a      	cbnz	r2, 80033d0 <quorem+0xf4>
 80033c4:	3b04      	subs	r3, #4
 80033c6:	429e      	cmp	r6, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	d30b      	bcc.n	80033e4 <quorem+0x108>
 80033cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80033d0:	4628      	mov	r0, r5
 80033d2:	b003      	add	sp, #12
 80033d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	3b04      	subs	r3, #4
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d1ca      	bne.n	8003376 <quorem+0x9a>
 80033e0:	3c01      	subs	r4, #1
 80033e2:	e7c5      	b.n	8003370 <quorem+0x94>
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	3b04      	subs	r3, #4
 80033e8:	2a00      	cmp	r2, #0
 80033ea:	d1ef      	bne.n	80033cc <quorem+0xf0>
 80033ec:	3c01      	subs	r4, #1
 80033ee:	e7ea      	b.n	80033c6 <quorem+0xea>
 80033f0:	2000      	movs	r0, #0
 80033f2:	e7ee      	b.n	80033d2 <quorem+0xf6>
 80033f4:	0000      	movs	r0, r0
	...

080033f8 <_dtoa_r>:
 80033f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	ec57 6b10 	vmov	r6, r7, d0
 8003400:	b097      	sub	sp, #92	; 0x5c
 8003402:	e9cd 6700 	strd	r6, r7, [sp]
 8003406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003408:	9107      	str	r1, [sp, #28]
 800340a:	4604      	mov	r4, r0
 800340c:	920a      	str	r2, [sp, #40]	; 0x28
 800340e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003410:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003412:	b93e      	cbnz	r6, 8003424 <_dtoa_r+0x2c>
 8003414:	2010      	movs	r0, #16
 8003416:	f000 fdcb 	bl	8003fb0 <malloc>
 800341a:	6260      	str	r0, [r4, #36]	; 0x24
 800341c:	6046      	str	r6, [r0, #4]
 800341e:	6086      	str	r6, [r0, #8]
 8003420:	6006      	str	r6, [r0, #0]
 8003422:	60c6      	str	r6, [r0, #12]
 8003424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	b151      	cbz	r1, 8003440 <_dtoa_r+0x48>
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	604a      	str	r2, [r1, #4]
 800342e:	2301      	movs	r3, #1
 8003430:	4093      	lsls	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
 8003434:	4620      	mov	r0, r4
 8003436:	f000 fe02 	bl	800403e <_Bfree>
 800343a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	9b01      	ldr	r3, [sp, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfbf      	itttt	lt
 8003446:	2301      	movlt	r3, #1
 8003448:	602b      	strlt	r3, [r5, #0]
 800344a:	9b01      	ldrlt	r3, [sp, #4]
 800344c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003450:	bfb2      	itee	lt
 8003452:	9301      	strlt	r3, [sp, #4]
 8003454:	2300      	movge	r3, #0
 8003456:	602b      	strge	r3, [r5, #0]
 8003458:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800345c:	4ba8      	ldr	r3, [pc, #672]	; (8003700 <_dtoa_r+0x308>)
 800345e:	ea33 0308 	bics.w	r3, r3, r8
 8003462:	d11b      	bne.n	800349c <_dtoa_r+0xa4>
 8003464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003466:	f242 730f 	movw	r3, #9999	; 0x270f
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	9b00      	ldr	r3, [sp, #0]
 800346e:	b923      	cbnz	r3, 800347a <_dtoa_r+0x82>
 8003470:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003474:	2800      	cmp	r0, #0
 8003476:	f000 8578 	beq.w	8003f6a <_dtoa_r+0xb72>
 800347a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800347c:	b953      	cbnz	r3, 8003494 <_dtoa_r+0x9c>
 800347e:	4ba1      	ldr	r3, [pc, #644]	; (8003704 <_dtoa_r+0x30c>)
 8003480:	e021      	b.n	80034c6 <_dtoa_r+0xce>
 8003482:	4ba1      	ldr	r3, [pc, #644]	; (8003708 <_dtoa_r+0x310>)
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	3308      	adds	r3, #8
 8003488:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	9802      	ldr	r0, [sp, #8]
 800348e:	b017      	add	sp, #92	; 0x5c
 8003490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003494:	4b9b      	ldr	r3, [pc, #620]	; (8003704 <_dtoa_r+0x30c>)
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	3303      	adds	r3, #3
 800349a:	e7f5      	b.n	8003488 <_dtoa_r+0x90>
 800349c:	e9dd 6700 	ldrd	r6, r7, [sp]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2300      	movs	r3, #0
 80034a4:	4630      	mov	r0, r6
 80034a6:	4639      	mov	r1, r7
 80034a8:	f7fd fb0a 	bl	8000ac0 <__aeabi_dcmpeq>
 80034ac:	4681      	mov	r9, r0
 80034ae:	b160      	cbz	r0, 80034ca <_dtoa_r+0xd2>
 80034b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034b2:	2301      	movs	r3, #1
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8553 	beq.w	8003f64 <_dtoa_r+0xb6c>
 80034be:	4b93      	ldr	r3, [pc, #588]	; (800370c <_dtoa_r+0x314>)
 80034c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	e7e0      	b.n	800348c <_dtoa_r+0x94>
 80034ca:	aa14      	add	r2, sp, #80	; 0x50
 80034cc:	a915      	add	r1, sp, #84	; 0x54
 80034ce:	ec47 6b10 	vmov	d0, r6, r7
 80034d2:	4620      	mov	r0, r4
 80034d4:	f001 f801 	bl	80044da <__d2b>
 80034d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80034dc:	4682      	mov	sl, r0
 80034de:	2d00      	cmp	r5, #0
 80034e0:	d07e      	beq.n	80035e0 <_dtoa_r+0x1e8>
 80034e2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80034e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80034ea:	4630      	mov	r0, r6
 80034ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80034f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80034f4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80034f8:	2200      	movs	r2, #0
 80034fa:	4b85      	ldr	r3, [pc, #532]	; (8003710 <_dtoa_r+0x318>)
 80034fc:	f7fc fec4 	bl	8000288 <__aeabi_dsub>
 8003500:	a379      	add	r3, pc, #484	; (adr r3, 80036e8 <_dtoa_r+0x2f0>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd f873 	bl	80005f0 <__aeabi_dmul>
 800350a:	a379      	add	r3, pc, #484	; (adr r3, 80036f0 <_dtoa_r+0x2f8>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f7fc febc 	bl	800028c <__adddf3>
 8003514:	4606      	mov	r6, r0
 8003516:	4628      	mov	r0, r5
 8003518:	460f      	mov	r7, r1
 800351a:	f7fd f803 	bl	8000524 <__aeabi_i2d>
 800351e:	a376      	add	r3, pc, #472	; (adr r3, 80036f8 <_dtoa_r+0x300>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f864 	bl	80005f0 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4630      	mov	r0, r6
 800352e:	4639      	mov	r1, r7
 8003530:	f7fc feac 	bl	800028c <__adddf3>
 8003534:	4606      	mov	r6, r0
 8003536:	460f      	mov	r7, r1
 8003538:	f7fd fb0a 	bl	8000b50 <__aeabi_d2iz>
 800353c:	2200      	movs	r2, #0
 800353e:	4683      	mov	fp, r0
 8003540:	2300      	movs	r3, #0
 8003542:	4630      	mov	r0, r6
 8003544:	4639      	mov	r1, r7
 8003546:	f7fd fac5 	bl	8000ad4 <__aeabi_dcmplt>
 800354a:	b158      	cbz	r0, 8003564 <_dtoa_r+0x16c>
 800354c:	4658      	mov	r0, fp
 800354e:	f7fc ffe9 	bl	8000524 <__aeabi_i2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4630      	mov	r0, r6
 8003558:	4639      	mov	r1, r7
 800355a:	f7fd fab1 	bl	8000ac0 <__aeabi_dcmpeq>
 800355e:	b908      	cbnz	r0, 8003564 <_dtoa_r+0x16c>
 8003560:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003564:	f1bb 0f16 	cmp.w	fp, #22
 8003568:	d859      	bhi.n	800361e <_dtoa_r+0x226>
 800356a:	496a      	ldr	r1, [pc, #424]	; (8003714 <_dtoa_r+0x31c>)
 800356c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003578:	f7fd faca 	bl	8000b10 <__aeabi_dcmpgt>
 800357c:	2800      	cmp	r0, #0
 800357e:	d050      	beq.n	8003622 <_dtoa_r+0x22a>
 8003580:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003584:	2300      	movs	r3, #0
 8003586:	930e      	str	r3, [sp, #56]	; 0x38
 8003588:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800358a:	1b5d      	subs	r5, r3, r5
 800358c:	1e6b      	subs	r3, r5, #1
 800358e:	9306      	str	r3, [sp, #24]
 8003590:	bf45      	ittet	mi
 8003592:	f1c5 0301 	rsbmi	r3, r5, #1
 8003596:	9305      	strmi	r3, [sp, #20]
 8003598:	2300      	movpl	r3, #0
 800359a:	2300      	movmi	r3, #0
 800359c:	bf4c      	ite	mi
 800359e:	9306      	strmi	r3, [sp, #24]
 80035a0:	9305      	strpl	r3, [sp, #20]
 80035a2:	f1bb 0f00 	cmp.w	fp, #0
 80035a6:	db3e      	blt.n	8003626 <_dtoa_r+0x22e>
 80035a8:	9b06      	ldr	r3, [sp, #24]
 80035aa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80035ae:	445b      	add	r3, fp
 80035b0:	9306      	str	r3, [sp, #24]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9308      	str	r3, [sp, #32]
 80035b6:	9b07      	ldr	r3, [sp, #28]
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	f200 80af 	bhi.w	800371c <_dtoa_r+0x324>
 80035be:	2b05      	cmp	r3, #5
 80035c0:	bfc4      	itt	gt
 80035c2:	3b04      	subgt	r3, #4
 80035c4:	9307      	strgt	r3, [sp, #28]
 80035c6:	9b07      	ldr	r3, [sp, #28]
 80035c8:	f1a3 0302 	sub.w	r3, r3, #2
 80035cc:	bfcc      	ite	gt
 80035ce:	2600      	movgt	r6, #0
 80035d0:	2601      	movle	r6, #1
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	f200 80ae 	bhi.w	8003734 <_dtoa_r+0x33c>
 80035d8:	e8df f003 	tbb	[pc, r3]
 80035dc:	772f8482 	.word	0x772f8482
 80035e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80035e4:	441d      	add	r5, r3
 80035e6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	dd11      	ble.n	8003612 <_dtoa_r+0x21a>
 80035ee:	9a00      	ldr	r2, [sp, #0]
 80035f0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80035f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80035f8:	fa22 f000 	lsr.w	r0, r2, r0
 80035fc:	fa08 f303 	lsl.w	r3, r8, r3
 8003600:	4318      	orrs	r0, r3
 8003602:	f7fc ff7f 	bl	8000504 <__aeabi_ui2d>
 8003606:	2301      	movs	r3, #1
 8003608:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800360c:	3d01      	subs	r5, #1
 800360e:	9312      	str	r3, [sp, #72]	; 0x48
 8003610:	e772      	b.n	80034f8 <_dtoa_r+0x100>
 8003612:	f1c3 0020 	rsb	r0, r3, #32
 8003616:	9b00      	ldr	r3, [sp, #0]
 8003618:	fa03 f000 	lsl.w	r0, r3, r0
 800361c:	e7f1      	b.n	8003602 <_dtoa_r+0x20a>
 800361e:	2301      	movs	r3, #1
 8003620:	e7b1      	b.n	8003586 <_dtoa_r+0x18e>
 8003622:	900e      	str	r0, [sp, #56]	; 0x38
 8003624:	e7b0      	b.n	8003588 <_dtoa_r+0x190>
 8003626:	9b05      	ldr	r3, [sp, #20]
 8003628:	eba3 030b 	sub.w	r3, r3, fp
 800362c:	9305      	str	r3, [sp, #20]
 800362e:	f1cb 0300 	rsb	r3, fp, #0
 8003632:	9308      	str	r3, [sp, #32]
 8003634:	2300      	movs	r3, #0
 8003636:	930b      	str	r3, [sp, #44]	; 0x2c
 8003638:	e7bd      	b.n	80035b6 <_dtoa_r+0x1be>
 800363a:	2301      	movs	r3, #1
 800363c:	9309      	str	r3, [sp, #36]	; 0x24
 800363e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	dd7a      	ble.n	800373a <_dtoa_r+0x342>
 8003644:	9304      	str	r3, [sp, #16]
 8003646:	9303      	str	r3, [sp, #12]
 8003648:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800364a:	2200      	movs	r2, #0
 800364c:	606a      	str	r2, [r5, #4]
 800364e:	2104      	movs	r1, #4
 8003650:	f101 0214 	add.w	r2, r1, #20
 8003654:	429a      	cmp	r2, r3
 8003656:	d975      	bls.n	8003744 <_dtoa_r+0x34c>
 8003658:	6869      	ldr	r1, [r5, #4]
 800365a:	4620      	mov	r0, r4
 800365c:	f000 fcbb 	bl	8003fd6 <_Balloc>
 8003660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003662:	6028      	str	r0, [r5, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	2b0e      	cmp	r3, #14
 800366c:	f200 80e5 	bhi.w	800383a <_dtoa_r+0x442>
 8003670:	2e00      	cmp	r6, #0
 8003672:	f000 80e2 	beq.w	800383a <_dtoa_r+0x442>
 8003676:	ed9d 7b00 	vldr	d7, [sp]
 800367a:	f1bb 0f00 	cmp.w	fp, #0
 800367e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003682:	dd74      	ble.n	800376e <_dtoa_r+0x376>
 8003684:	4a23      	ldr	r2, [pc, #140]	; (8003714 <_dtoa_r+0x31c>)
 8003686:	f00b 030f 	and.w	r3, fp, #15
 800368a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800368e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003692:	06f0      	lsls	r0, r6, #27
 8003694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003698:	d559      	bpl.n	800374e <_dtoa_r+0x356>
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <_dtoa_r+0x320>)
 800369c:	ec51 0b17 	vmov	r0, r1, d7
 80036a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036a4:	f7fd f8ce 	bl	8000844 <__aeabi_ddiv>
 80036a8:	e9cd 0100 	strd	r0, r1, [sp]
 80036ac:	f006 060f 	and.w	r6, r6, #15
 80036b0:	2503      	movs	r5, #3
 80036b2:	4f19      	ldr	r7, [pc, #100]	; (8003718 <_dtoa_r+0x320>)
 80036b4:	2e00      	cmp	r6, #0
 80036b6:	d14c      	bne.n	8003752 <_dtoa_r+0x35a>
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036c0:	f7fd f8c0 	bl	8000844 <__aeabi_ddiv>
 80036c4:	e9cd 0100 	strd	r0, r1, [sp]
 80036c8:	e06a      	b.n	80037a0 <_dtoa_r+0x3a8>
 80036ca:	2301      	movs	r3, #1
 80036cc:	9309      	str	r3, [sp, #36]	; 0x24
 80036ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d0:	445b      	add	r3, fp
 80036d2:	9304      	str	r3, [sp, #16]
 80036d4:	3301      	adds	r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	9303      	str	r3, [sp, #12]
 80036da:	bfb8      	it	lt
 80036dc:	2301      	movlt	r3, #1
 80036de:	e7b3      	b.n	8003648 <_dtoa_r+0x250>
 80036e0:	2300      	movs	r3, #0
 80036e2:	e7ab      	b.n	800363c <_dtoa_r+0x244>
 80036e4:	2300      	movs	r3, #0
 80036e6:	e7f1      	b.n	80036cc <_dtoa_r+0x2d4>
 80036e8:	636f4361 	.word	0x636f4361
 80036ec:	3fd287a7 	.word	0x3fd287a7
 80036f0:	8b60c8b3 	.word	0x8b60c8b3
 80036f4:	3fc68a28 	.word	0x3fc68a28
 80036f8:	509f79fb 	.word	0x509f79fb
 80036fc:	3fd34413 	.word	0x3fd34413
 8003700:	7ff00000 	.word	0x7ff00000
 8003704:	08004b11 	.word	0x08004b11
 8003708:	08004b08 	.word	0x08004b08
 800370c:	08004ae5 	.word	0x08004ae5
 8003710:	3ff80000 	.word	0x3ff80000
 8003714:	08004b40 	.word	0x08004b40
 8003718:	08004b18 	.word	0x08004b18
 800371c:	2601      	movs	r6, #1
 800371e:	2300      	movs	r3, #0
 8003720:	9307      	str	r3, [sp, #28]
 8003722:	9609      	str	r6, [sp, #36]	; 0x24
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	9303      	str	r3, [sp, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	2312      	movs	r3, #18
 8003730:	920a      	str	r2, [sp, #40]	; 0x28
 8003732:	e789      	b.n	8003648 <_dtoa_r+0x250>
 8003734:	2301      	movs	r3, #1
 8003736:	9309      	str	r3, [sp, #36]	; 0x24
 8003738:	e7f4      	b.n	8003724 <_dtoa_r+0x32c>
 800373a:	2301      	movs	r3, #1
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	461a      	mov	r2, r3
 8003742:	e7f5      	b.n	8003730 <_dtoa_r+0x338>
 8003744:	686a      	ldr	r2, [r5, #4]
 8003746:	3201      	adds	r2, #1
 8003748:	606a      	str	r2, [r5, #4]
 800374a:	0049      	lsls	r1, r1, #1
 800374c:	e780      	b.n	8003650 <_dtoa_r+0x258>
 800374e:	2502      	movs	r5, #2
 8003750:	e7af      	b.n	80036b2 <_dtoa_r+0x2ba>
 8003752:	07f1      	lsls	r1, r6, #31
 8003754:	d508      	bpl.n	8003768 <_dtoa_r+0x370>
 8003756:	4640      	mov	r0, r8
 8003758:	4649      	mov	r1, r9
 800375a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800375e:	f7fc ff47 	bl	80005f0 <__aeabi_dmul>
 8003762:	3501      	adds	r5, #1
 8003764:	4680      	mov	r8, r0
 8003766:	4689      	mov	r9, r1
 8003768:	1076      	asrs	r6, r6, #1
 800376a:	3708      	adds	r7, #8
 800376c:	e7a2      	b.n	80036b4 <_dtoa_r+0x2bc>
 800376e:	f000 809d 	beq.w	80038ac <_dtoa_r+0x4b4>
 8003772:	f1cb 0600 	rsb	r6, fp, #0
 8003776:	4b9f      	ldr	r3, [pc, #636]	; (80039f4 <_dtoa_r+0x5fc>)
 8003778:	4f9f      	ldr	r7, [pc, #636]	; (80039f8 <_dtoa_r+0x600>)
 800377a:	f006 020f 	and.w	r2, r6, #15
 800377e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800378a:	f7fc ff31 	bl	80005f0 <__aeabi_dmul>
 800378e:	e9cd 0100 	strd	r0, r1, [sp]
 8003792:	1136      	asrs	r6, r6, #4
 8003794:	2300      	movs	r3, #0
 8003796:	2502      	movs	r5, #2
 8003798:	2e00      	cmp	r6, #0
 800379a:	d17c      	bne.n	8003896 <_dtoa_r+0x49e>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d191      	bne.n	80036c4 <_dtoa_r+0x2cc>
 80037a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8084 	beq.w	80038b0 <_dtoa_r+0x4b8>
 80037a8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80037ac:	2200      	movs	r2, #0
 80037ae:	4b93      	ldr	r3, [pc, #588]	; (80039fc <_dtoa_r+0x604>)
 80037b0:	4640      	mov	r0, r8
 80037b2:	4649      	mov	r1, r9
 80037b4:	f7fd f98e 	bl	8000ad4 <__aeabi_dcmplt>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d079      	beq.n	80038b0 <_dtoa_r+0x4b8>
 80037bc:	9b03      	ldr	r3, [sp, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d076      	beq.n	80038b0 <_dtoa_r+0x4b8>
 80037c2:	9b04      	ldr	r3, [sp, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dd34      	ble.n	8003832 <_dtoa_r+0x43a>
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b8d      	ldr	r3, [pc, #564]	; (8003a00 <_dtoa_r+0x608>)
 80037cc:	4640      	mov	r0, r8
 80037ce:	4649      	mov	r1, r9
 80037d0:	f7fc ff0e 	bl	80005f0 <__aeabi_dmul>
 80037d4:	e9cd 0100 	strd	r0, r1, [sp]
 80037d8:	9e04      	ldr	r6, [sp, #16]
 80037da:	f10b 37ff 	add.w	r7, fp, #4294967295
 80037de:	3501      	adds	r5, #1
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7fc fe9f 	bl	8000524 <__aeabi_i2d>
 80037e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037ea:	f7fc ff01 	bl	80005f0 <__aeabi_dmul>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b84      	ldr	r3, [pc, #528]	; (8003a04 <_dtoa_r+0x60c>)
 80037f2:	f7fc fd4b 	bl	800028c <__adddf3>
 80037f6:	4680      	mov	r8, r0
 80037f8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80037fc:	2e00      	cmp	r6, #0
 80037fe:	d15a      	bne.n	80038b6 <_dtoa_r+0x4be>
 8003800:	2200      	movs	r2, #0
 8003802:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <_dtoa_r+0x610>)
 8003804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003808:	f7fc fd3e 	bl	8000288 <__aeabi_dsub>
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	e9cd 0100 	strd	r0, r1, [sp]
 8003814:	f7fd f97c 	bl	8000b10 <__aeabi_dcmpgt>
 8003818:	2800      	cmp	r0, #0
 800381a:	f040 829b 	bne.w	8003d54 <_dtoa_r+0x95c>
 800381e:	4642      	mov	r2, r8
 8003820:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003828:	f7fd f954 	bl	8000ad4 <__aeabi_dcmplt>
 800382c:	2800      	cmp	r0, #0
 800382e:	f040 828f 	bne.w	8003d50 <_dtoa_r+0x958>
 8003832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003836:	e9cd 2300 	strd	r2, r3, [sp]
 800383a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800383c:	2b00      	cmp	r3, #0
 800383e:	f2c0 8150 	blt.w	8003ae2 <_dtoa_r+0x6ea>
 8003842:	f1bb 0f0e 	cmp.w	fp, #14
 8003846:	f300 814c 	bgt.w	8003ae2 <_dtoa_r+0x6ea>
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <_dtoa_r+0x5fc>)
 800384c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003850:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	f280 80da 	bge.w	8003a10 <_dtoa_r+0x618>
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f300 80d6 	bgt.w	8003a10 <_dtoa_r+0x618>
 8003864:	f040 8273 	bne.w	8003d4e <_dtoa_r+0x956>
 8003868:	2200      	movs	r2, #0
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <_dtoa_r+0x610>)
 800386c:	4640      	mov	r0, r8
 800386e:	4649      	mov	r1, r9
 8003870:	f7fc febe 	bl	80005f0 <__aeabi_dmul>
 8003874:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003878:	f7fd f940 	bl	8000afc <__aeabi_dcmpge>
 800387c:	9e03      	ldr	r6, [sp, #12]
 800387e:	4637      	mov	r7, r6
 8003880:	2800      	cmp	r0, #0
 8003882:	f040 824a 	bne.w	8003d1a <_dtoa_r+0x922>
 8003886:	9b02      	ldr	r3, [sp, #8]
 8003888:	9a02      	ldr	r2, [sp, #8]
 800388a:	1c5d      	adds	r5, r3, #1
 800388c:	2331      	movs	r3, #49	; 0x31
 800388e:	7013      	strb	r3, [r2, #0]
 8003890:	f10b 0b01 	add.w	fp, fp, #1
 8003894:	e245      	b.n	8003d22 <_dtoa_r+0x92a>
 8003896:	07f2      	lsls	r2, r6, #31
 8003898:	d505      	bpl.n	80038a6 <_dtoa_r+0x4ae>
 800389a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800389e:	f7fc fea7 	bl	80005f0 <__aeabi_dmul>
 80038a2:	3501      	adds	r5, #1
 80038a4:	2301      	movs	r3, #1
 80038a6:	1076      	asrs	r6, r6, #1
 80038a8:	3708      	adds	r7, #8
 80038aa:	e775      	b.n	8003798 <_dtoa_r+0x3a0>
 80038ac:	2502      	movs	r5, #2
 80038ae:	e777      	b.n	80037a0 <_dtoa_r+0x3a8>
 80038b0:	465f      	mov	r7, fp
 80038b2:	9e03      	ldr	r6, [sp, #12]
 80038b4:	e794      	b.n	80037e0 <_dtoa_r+0x3e8>
 80038b6:	9a02      	ldr	r2, [sp, #8]
 80038b8:	4b4e      	ldr	r3, [pc, #312]	; (80039f4 <_dtoa_r+0x5fc>)
 80038ba:	4432      	add	r2, r6
 80038bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80038be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038c0:	1e71      	subs	r1, r6, #1
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	d048      	beq.n	8003958 <_dtoa_r+0x560>
 80038c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	2000      	movs	r0, #0
 80038d0:	494e      	ldr	r1, [pc, #312]	; (8003a0c <_dtoa_r+0x614>)
 80038d2:	f7fc ffb7 	bl	8000844 <__aeabi_ddiv>
 80038d6:	4642      	mov	r2, r8
 80038d8:	464b      	mov	r3, r9
 80038da:	f7fc fcd5 	bl	8000288 <__aeabi_dsub>
 80038de:	9d02      	ldr	r5, [sp, #8]
 80038e0:	4680      	mov	r8, r0
 80038e2:	4689      	mov	r9, r1
 80038e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038e8:	f7fd f932 	bl	8000b50 <__aeabi_d2iz>
 80038ec:	4606      	mov	r6, r0
 80038ee:	f7fc fe19 	bl	8000524 <__aeabi_i2d>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038fa:	f7fc fcc5 	bl	8000288 <__aeabi_dsub>
 80038fe:	3630      	adds	r6, #48	; 0x30
 8003900:	f805 6b01 	strb.w	r6, [r5], #1
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	e9cd 0100 	strd	r0, r1, [sp]
 800390c:	f7fd f8e2 	bl	8000ad4 <__aeabi_dcmplt>
 8003910:	2800      	cmp	r0, #0
 8003912:	d165      	bne.n	80039e0 <_dtoa_r+0x5e8>
 8003914:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003918:	2000      	movs	r0, #0
 800391a:	4938      	ldr	r1, [pc, #224]	; (80039fc <_dtoa_r+0x604>)
 800391c:	f7fc fcb4 	bl	8000288 <__aeabi_dsub>
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	f7fd f8d6 	bl	8000ad4 <__aeabi_dcmplt>
 8003928:	2800      	cmp	r0, #0
 800392a:	f040 80ba 	bne.w	8003aa2 <_dtoa_r+0x6aa>
 800392e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003930:	429d      	cmp	r5, r3
 8003932:	f43f af7e 	beq.w	8003832 <_dtoa_r+0x43a>
 8003936:	2200      	movs	r2, #0
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <_dtoa_r+0x608>)
 800393a:	4640      	mov	r0, r8
 800393c:	4649      	mov	r1, r9
 800393e:	f7fc fe57 	bl	80005f0 <__aeabi_dmul>
 8003942:	2200      	movs	r2, #0
 8003944:	4680      	mov	r8, r0
 8003946:	4689      	mov	r9, r1
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <_dtoa_r+0x608>)
 800394a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800394e:	f7fc fe4f 	bl	80005f0 <__aeabi_dmul>
 8003952:	e9cd 0100 	strd	r0, r1, [sp]
 8003956:	e7c5      	b.n	80038e4 <_dtoa_r+0x4ec>
 8003958:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003964:	f7fc fe44 	bl	80005f0 <__aeabi_dmul>
 8003968:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800396c:	9d02      	ldr	r5, [sp, #8]
 800396e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003972:	f7fd f8ed 	bl	8000b50 <__aeabi_d2iz>
 8003976:	4606      	mov	r6, r0
 8003978:	f7fc fdd4 	bl	8000524 <__aeabi_i2d>
 800397c:	3630      	adds	r6, #48	; 0x30
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003986:	f7fc fc7f 	bl	8000288 <__aeabi_dsub>
 800398a:	f805 6b01 	strb.w	r6, [r5], #1
 800398e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003990:	42ab      	cmp	r3, r5
 8003992:	4680      	mov	r8, r0
 8003994:	4689      	mov	r9, r1
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	d125      	bne.n	80039e8 <_dtoa_r+0x5f0>
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <_dtoa_r+0x614>)
 800399e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039a2:	f7fc fc73 	bl	800028c <__adddf3>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4640      	mov	r0, r8
 80039ac:	4649      	mov	r1, r9
 80039ae:	f7fd f8af 	bl	8000b10 <__aeabi_dcmpgt>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d175      	bne.n	8003aa2 <_dtoa_r+0x6aa>
 80039b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80039ba:	2000      	movs	r0, #0
 80039bc:	4913      	ldr	r1, [pc, #76]	; (8003a0c <_dtoa_r+0x614>)
 80039be:	f7fc fc63 	bl	8000288 <__aeabi_dsub>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4640      	mov	r0, r8
 80039c8:	4649      	mov	r1, r9
 80039ca:	f7fd f883 	bl	8000ad4 <__aeabi_dcmplt>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	f43f af2f 	beq.w	8003832 <_dtoa_r+0x43a>
 80039d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80039d8:	2b30      	cmp	r3, #48	; 0x30
 80039da:	f105 32ff 	add.w	r2, r5, #4294967295
 80039de:	d001      	beq.n	80039e4 <_dtoa_r+0x5ec>
 80039e0:	46bb      	mov	fp, r7
 80039e2:	e04d      	b.n	8003a80 <_dtoa_r+0x688>
 80039e4:	4615      	mov	r5, r2
 80039e6:	e7f5      	b.n	80039d4 <_dtoa_r+0x5dc>
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <_dtoa_r+0x608>)
 80039ea:	f7fc fe01 	bl	80005f0 <__aeabi_dmul>
 80039ee:	e9cd 0100 	strd	r0, r1, [sp]
 80039f2:	e7bc      	b.n	800396e <_dtoa_r+0x576>
 80039f4:	08004b40 	.word	0x08004b40
 80039f8:	08004b18 	.word	0x08004b18
 80039fc:	3ff00000 	.word	0x3ff00000
 8003a00:	40240000 	.word	0x40240000
 8003a04:	401c0000 	.word	0x401c0000
 8003a08:	40140000 	.word	0x40140000
 8003a0c:	3fe00000 	.word	0x3fe00000
 8003a10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a14:	9d02      	ldr	r5, [sp, #8]
 8003a16:	4642      	mov	r2, r8
 8003a18:	464b      	mov	r3, r9
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	4639      	mov	r1, r7
 8003a1e:	f7fc ff11 	bl	8000844 <__aeabi_ddiv>
 8003a22:	f7fd f895 	bl	8000b50 <__aeabi_d2iz>
 8003a26:	9000      	str	r0, [sp, #0]
 8003a28:	f7fc fd7c 	bl	8000524 <__aeabi_i2d>
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	f7fc fdde 	bl	80005f0 <__aeabi_dmul>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4630      	mov	r0, r6
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	f7fc fc24 	bl	8000288 <__aeabi_dsub>
 8003a40:	9e00      	ldr	r6, [sp, #0]
 8003a42:	9f03      	ldr	r7, [sp, #12]
 8003a44:	3630      	adds	r6, #48	; 0x30
 8003a46:	f805 6b01 	strb.w	r6, [r5], #1
 8003a4a:	9e02      	ldr	r6, [sp, #8]
 8003a4c:	1bae      	subs	r6, r5, r6
 8003a4e:	42b7      	cmp	r7, r6
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	d138      	bne.n	8003ac8 <_dtoa_r+0x6d0>
 8003a56:	f7fc fc19 	bl	800028c <__adddf3>
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	460f      	mov	r7, r1
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4640      	mov	r0, r8
 8003a64:	4649      	mov	r1, r9
 8003a66:	f7fd f835 	bl	8000ad4 <__aeabi_dcmplt>
 8003a6a:	b9c8      	cbnz	r0, 8003aa0 <_dtoa_r+0x6a8>
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	463b      	mov	r3, r7
 8003a70:	4640      	mov	r0, r8
 8003a72:	4649      	mov	r1, r9
 8003a74:	f7fd f824 	bl	8000ac0 <__aeabi_dcmpeq>
 8003a78:	b110      	cbz	r0, 8003a80 <_dtoa_r+0x688>
 8003a7a:	9b00      	ldr	r3, [sp, #0]
 8003a7c:	07db      	lsls	r3, r3, #31
 8003a7e:	d40f      	bmi.n	8003aa0 <_dtoa_r+0x6a8>
 8003a80:	4651      	mov	r1, sl
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 fadb 	bl	800403e <_Bfree>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a8c:	702b      	strb	r3, [r5, #0]
 8003a8e:	f10b 0301 	add.w	r3, fp, #1
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f43f acf8 	beq.w	800348c <_dtoa_r+0x94>
 8003a9c:	601d      	str	r5, [r3, #0]
 8003a9e:	e4f5      	b.n	800348c <_dtoa_r+0x94>
 8003aa0:	465f      	mov	r7, fp
 8003aa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003aa6:	2a39      	cmp	r2, #57	; 0x39
 8003aa8:	f105 33ff 	add.w	r3, r5, #4294967295
 8003aac:	d106      	bne.n	8003abc <_dtoa_r+0x6c4>
 8003aae:	9a02      	ldr	r2, [sp, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d107      	bne.n	8003ac4 <_dtoa_r+0x6cc>
 8003ab4:	2330      	movs	r3, #48	; 0x30
 8003ab6:	7013      	strb	r3, [r2, #0]
 8003ab8:	3701      	adds	r7, #1
 8003aba:	4613      	mov	r3, r2
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	3201      	adds	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e78d      	b.n	80039e0 <_dtoa_r+0x5e8>
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	e7ec      	b.n	8003aa2 <_dtoa_r+0x6aa>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4ba4      	ldr	r3, [pc, #656]	; (8003d5c <_dtoa_r+0x964>)
 8003acc:	f7fc fd90 	bl	80005f0 <__aeabi_dmul>
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	460f      	mov	r7, r1
 8003ad8:	f7fc fff2 	bl	8000ac0 <__aeabi_dcmpeq>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d09a      	beq.n	8003a16 <_dtoa_r+0x61e>
 8003ae0:	e7ce      	b.n	8003a80 <_dtoa_r+0x688>
 8003ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	f000 80cd 	beq.w	8003c84 <_dtoa_r+0x88c>
 8003aea:	9a07      	ldr	r2, [sp, #28]
 8003aec:	2a01      	cmp	r2, #1
 8003aee:	f300 80af 	bgt.w	8003c50 <_dtoa_r+0x858>
 8003af2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	f000 80a7 	beq.w	8003c48 <_dtoa_r+0x850>
 8003afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003afe:	9e08      	ldr	r6, [sp, #32]
 8003b00:	9d05      	ldr	r5, [sp, #20]
 8003b02:	9a05      	ldr	r2, [sp, #20]
 8003b04:	441a      	add	r2, r3
 8003b06:	9205      	str	r2, [sp, #20]
 8003b08:	9a06      	ldr	r2, [sp, #24]
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	441a      	add	r2, r3
 8003b0e:	4620      	mov	r0, r4
 8003b10:	9206      	str	r2, [sp, #24]
 8003b12:	f000 fb34 	bl	800417e <__i2b>
 8003b16:	4607      	mov	r7, r0
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	dd0c      	ble.n	8003b36 <_dtoa_r+0x73e>
 8003b1c:	9b06      	ldr	r3, [sp, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	dd09      	ble.n	8003b36 <_dtoa_r+0x73e>
 8003b22:	42ab      	cmp	r3, r5
 8003b24:	9a05      	ldr	r2, [sp, #20]
 8003b26:	bfa8      	it	ge
 8003b28:	462b      	movge	r3, r5
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	9205      	str	r2, [sp, #20]
 8003b2e:	9a06      	ldr	r2, [sp, #24]
 8003b30:	1aed      	subs	r5, r5, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	9306      	str	r3, [sp, #24]
 8003b36:	9b08      	ldr	r3, [sp, #32]
 8003b38:	b1f3      	cbz	r3, 8003b78 <_dtoa_r+0x780>
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a5 	beq.w	8003c8c <_dtoa_r+0x894>
 8003b42:	2e00      	cmp	r6, #0
 8003b44:	dd10      	ble.n	8003b68 <_dtoa_r+0x770>
 8003b46:	4639      	mov	r1, r7
 8003b48:	4632      	mov	r2, r6
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f000 fbae 	bl	80042ac <__pow5mult>
 8003b50:	4652      	mov	r2, sl
 8003b52:	4601      	mov	r1, r0
 8003b54:	4607      	mov	r7, r0
 8003b56:	4620      	mov	r0, r4
 8003b58:	f000 fb1a 	bl	8004190 <__multiply>
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	4680      	mov	r8, r0
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 fa6c 	bl	800403e <_Bfree>
 8003b66:	46c2      	mov	sl, r8
 8003b68:	9b08      	ldr	r3, [sp, #32]
 8003b6a:	1b9a      	subs	r2, r3, r6
 8003b6c:	d004      	beq.n	8003b78 <_dtoa_r+0x780>
 8003b6e:	4651      	mov	r1, sl
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 fb9b 	bl	80042ac <__pow5mult>
 8003b76:	4682      	mov	sl, r0
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 faff 	bl	800417e <__i2b>
 8003b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	4606      	mov	r6, r0
 8003b86:	f340 8083 	ble.w	8003c90 <_dtoa_r+0x898>
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 fb8c 	bl	80042ac <__pow5mult>
 8003b94:	9b07      	ldr	r3, [sp, #28]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	4606      	mov	r6, r0
 8003b9a:	dd7c      	ble.n	8003c96 <_dtoa_r+0x89e>
 8003b9c:	f04f 0800 	mov.w	r8, #0
 8003ba0:	6933      	ldr	r3, [r6, #16]
 8003ba2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003ba6:	6918      	ldr	r0, [r3, #16]
 8003ba8:	f000 fa9b 	bl	80040e2 <__hi0bits>
 8003bac:	f1c0 0020 	rsb	r0, r0, #32
 8003bb0:	9b06      	ldr	r3, [sp, #24]
 8003bb2:	4418      	add	r0, r3
 8003bb4:	f010 001f 	ands.w	r0, r0, #31
 8003bb8:	f000 8096 	beq.w	8003ce8 <_dtoa_r+0x8f0>
 8003bbc:	f1c0 0320 	rsb	r3, r0, #32
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	f340 8087 	ble.w	8003cd4 <_dtoa_r+0x8dc>
 8003bc6:	9b05      	ldr	r3, [sp, #20]
 8003bc8:	f1c0 001c 	rsb	r0, r0, #28
 8003bcc:	4403      	add	r3, r0
 8003bce:	9305      	str	r3, [sp, #20]
 8003bd0:	9b06      	ldr	r3, [sp, #24]
 8003bd2:	4405      	add	r5, r0
 8003bd4:	4403      	add	r3, r0
 8003bd6:	9306      	str	r3, [sp, #24]
 8003bd8:	9b05      	ldr	r3, [sp, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dd05      	ble.n	8003bea <_dtoa_r+0x7f2>
 8003bde:	4651      	mov	r1, sl
 8003be0:	461a      	mov	r2, r3
 8003be2:	4620      	mov	r0, r4
 8003be4:	f000 fbb0 	bl	8004348 <__lshift>
 8003be8:	4682      	mov	sl, r0
 8003bea:	9b06      	ldr	r3, [sp, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	dd05      	ble.n	8003bfc <_dtoa_r+0x804>
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f000 fba7 	bl	8004348 <__lshift>
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d074      	beq.n	8003cec <_dtoa_r+0x8f4>
 8003c02:	4631      	mov	r1, r6
 8003c04:	4650      	mov	r0, sl
 8003c06:	f000 fbf0 	bl	80043ea <__mcmp>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	da6e      	bge.n	8003cec <_dtoa_r+0x8f4>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	4651      	mov	r1, sl
 8003c12:	220a      	movs	r2, #10
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 fa29 	bl	800406c <__multadd>
 8003c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c20:	4682      	mov	sl, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 81a8 	beq.w	8003f78 <_dtoa_r+0xb80>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	220a      	movs	r2, #10
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 fa1c 	bl	800406c <__multadd>
 8003c34:	9b04      	ldr	r3, [sp, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	4607      	mov	r7, r0
 8003c3a:	f300 80c8 	bgt.w	8003dce <_dtoa_r+0x9d6>
 8003c3e:	9b07      	ldr	r3, [sp, #28]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	f340 80c4 	ble.w	8003dce <_dtoa_r+0x9d6>
 8003c46:	e059      	b.n	8003cfc <_dtoa_r+0x904>
 8003c48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c4e:	e756      	b.n	8003afe <_dtoa_r+0x706>
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	1e5e      	subs	r6, r3, #1
 8003c54:	9b08      	ldr	r3, [sp, #32]
 8003c56:	42b3      	cmp	r3, r6
 8003c58:	bfbf      	itttt	lt
 8003c5a:	9b08      	ldrlt	r3, [sp, #32]
 8003c5c:	9608      	strlt	r6, [sp, #32]
 8003c5e:	1af2      	sublt	r2, r6, r3
 8003c60:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003c62:	bfb6      	itet	lt
 8003c64:	189b      	addlt	r3, r3, r2
 8003c66:	1b9e      	subge	r6, r3, r6
 8003c68:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	bfb8      	it	lt
 8003c6e:	2600      	movlt	r6, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bfb9      	ittee	lt
 8003c74:	9b05      	ldrlt	r3, [sp, #20]
 8003c76:	9a03      	ldrlt	r2, [sp, #12]
 8003c78:	9d05      	ldrge	r5, [sp, #20]
 8003c7a:	9b03      	ldrge	r3, [sp, #12]
 8003c7c:	bfbc      	itt	lt
 8003c7e:	1a9d      	sublt	r5, r3, r2
 8003c80:	2300      	movlt	r3, #0
 8003c82:	e73e      	b.n	8003b02 <_dtoa_r+0x70a>
 8003c84:	9e08      	ldr	r6, [sp, #32]
 8003c86:	9d05      	ldr	r5, [sp, #20]
 8003c88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003c8a:	e745      	b.n	8003b18 <_dtoa_r+0x720>
 8003c8c:	9a08      	ldr	r2, [sp, #32]
 8003c8e:	e76e      	b.n	8003b6e <_dtoa_r+0x776>
 8003c90:	9b07      	ldr	r3, [sp, #28]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	dc19      	bgt.n	8003cca <_dtoa_r+0x8d2>
 8003c96:	9b00      	ldr	r3, [sp, #0]
 8003c98:	b9bb      	cbnz	r3, 8003cca <_dtoa_r+0x8d2>
 8003c9a:	9b01      	ldr	r3, [sp, #4]
 8003c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca0:	b99b      	cbnz	r3, 8003cca <_dtoa_r+0x8d2>
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca8:	0d1b      	lsrs	r3, r3, #20
 8003caa:	051b      	lsls	r3, r3, #20
 8003cac:	b183      	cbz	r3, 8003cd0 <_dtoa_r+0x8d8>
 8003cae:	9b05      	ldr	r3, [sp, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	9305      	str	r3, [sp, #20]
 8003cb4:	9b06      	ldr	r3, [sp, #24]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	9306      	str	r3, [sp, #24]
 8003cba:	f04f 0801 	mov.w	r8, #1
 8003cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f af6d 	bne.w	8003ba0 <_dtoa_r+0x7a8>
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	e772      	b.n	8003bb0 <_dtoa_r+0x7b8>
 8003cca:	f04f 0800 	mov.w	r8, #0
 8003cce:	e7f6      	b.n	8003cbe <_dtoa_r+0x8c6>
 8003cd0:	4698      	mov	r8, r3
 8003cd2:	e7f4      	b.n	8003cbe <_dtoa_r+0x8c6>
 8003cd4:	d080      	beq.n	8003bd8 <_dtoa_r+0x7e0>
 8003cd6:	9a05      	ldr	r2, [sp, #20]
 8003cd8:	331c      	adds	r3, #28
 8003cda:	441a      	add	r2, r3
 8003cdc:	9205      	str	r2, [sp, #20]
 8003cde:	9a06      	ldr	r2, [sp, #24]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	441d      	add	r5, r3
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	e776      	b.n	8003bd6 <_dtoa_r+0x7de>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	e7f4      	b.n	8003cd6 <_dtoa_r+0x8de>
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	dc36      	bgt.n	8003d60 <_dtoa_r+0x968>
 8003cf2:	9b07      	ldr	r3, [sp, #28]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	dd33      	ble.n	8003d60 <_dtoa_r+0x968>
 8003cf8:	9b03      	ldr	r3, [sp, #12]
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	9b04      	ldr	r3, [sp, #16]
 8003cfe:	b963      	cbnz	r3, 8003d1a <_dtoa_r+0x922>
 8003d00:	4631      	mov	r1, r6
 8003d02:	2205      	movs	r2, #5
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 f9b1 	bl	800406c <__multadd>
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	4650      	mov	r0, sl
 8003d10:	f000 fb6b 	bl	80043ea <__mcmp>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f73f adb6 	bgt.w	8003886 <_dtoa_r+0x48e>
 8003d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1c:	9d02      	ldr	r5, [sp, #8]
 8003d1e:	ea6f 0b03 	mvn.w	fp, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	4631      	mov	r1, r6
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 f988 	bl	800403e <_Bfree>
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	f43f aea6 	beq.w	8003a80 <_dtoa_r+0x688>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	b12b      	cbz	r3, 8003d44 <_dtoa_r+0x94c>
 8003d38:	42bb      	cmp	r3, r7
 8003d3a:	d003      	beq.n	8003d44 <_dtoa_r+0x94c>
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f000 f97d 	bl	800403e <_Bfree>
 8003d44:	4639      	mov	r1, r7
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 f979 	bl	800403e <_Bfree>
 8003d4c:	e698      	b.n	8003a80 <_dtoa_r+0x688>
 8003d4e:	2600      	movs	r6, #0
 8003d50:	4637      	mov	r7, r6
 8003d52:	e7e2      	b.n	8003d1a <_dtoa_r+0x922>
 8003d54:	46bb      	mov	fp, r7
 8003d56:	4637      	mov	r7, r6
 8003d58:	e595      	b.n	8003886 <_dtoa_r+0x48e>
 8003d5a:	bf00      	nop
 8003d5c:	40240000 	.word	0x40240000
 8003d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d62:	bb93      	cbnz	r3, 8003dca <_dtoa_r+0x9d2>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	9304      	str	r3, [sp, #16]
 8003d68:	9d02      	ldr	r5, [sp, #8]
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	f7ff fab5 	bl	80032dc <quorem>
 8003d72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003d76:	f805 9b01 	strb.w	r9, [r5], #1
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	9a04      	ldr	r2, [sp, #16]
 8003d7e:	1aeb      	subs	r3, r5, r3
 8003d80:	429a      	cmp	r2, r3
 8003d82:	f300 80dc 	bgt.w	8003f3e <_dtoa_r+0xb46>
 8003d86:	9b02      	ldr	r3, [sp, #8]
 8003d88:	2a01      	cmp	r2, #1
 8003d8a:	bfac      	ite	ge
 8003d8c:	189b      	addge	r3, r3, r2
 8003d8e:	3301      	addlt	r3, #1
 8003d90:	4698      	mov	r8, r3
 8003d92:	2300      	movs	r3, #0
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	4651      	mov	r1, sl
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 fad4 	bl	8004348 <__lshift>
 8003da0:	4631      	mov	r1, r6
 8003da2:	4682      	mov	sl, r0
 8003da4:	f000 fb21 	bl	80043ea <__mcmp>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	f300 808d 	bgt.w	8003ec8 <_dtoa_r+0xad0>
 8003dae:	d103      	bne.n	8003db8 <_dtoa_r+0x9c0>
 8003db0:	f019 0f01 	tst.w	r9, #1
 8003db4:	f040 8088 	bne.w	8003ec8 <_dtoa_r+0xad0>
 8003db8:	4645      	mov	r5, r8
 8003dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003dc4:	d1af      	bne.n	8003d26 <_dtoa_r+0x92e>
 8003dc6:	4615      	mov	r5, r2
 8003dc8:	e7f7      	b.n	8003dba <_dtoa_r+0x9c2>
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	9304      	str	r3, [sp, #16]
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	dd05      	ble.n	8003dde <_dtoa_r+0x9e6>
 8003dd2:	4639      	mov	r1, r7
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 fab6 	bl	8004348 <__lshift>
 8003ddc:	4607      	mov	r7, r0
 8003dde:	f1b8 0f00 	cmp.w	r8, #0
 8003de2:	d04c      	beq.n	8003e7e <_dtoa_r+0xa86>
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4620      	mov	r0, r4
 8003de8:	f000 f8f5 	bl	8003fd6 <_Balloc>
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	3202      	adds	r2, #2
 8003df0:	4605      	mov	r5, r0
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	f107 010c 	add.w	r1, r7, #12
 8003df8:	300c      	adds	r0, #12
 8003dfa:	f000 f8e1 	bl	8003fc0 <memcpy>
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4629      	mov	r1, r5
 8003e02:	4620      	mov	r0, r4
 8003e04:	f000 faa0 	bl	8004348 <__lshift>
 8003e08:	9b00      	ldr	r3, [sp, #0]
 8003e0a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003e0e:	9703      	str	r7, [sp, #12]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	4607      	mov	r7, r0
 8003e16:	9305      	str	r3, [sp, #20]
 8003e18:	4631      	mov	r1, r6
 8003e1a:	4650      	mov	r0, sl
 8003e1c:	f7ff fa5e 	bl	80032dc <quorem>
 8003e20:	9903      	ldr	r1, [sp, #12]
 8003e22:	4605      	mov	r5, r0
 8003e24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003e28:	4650      	mov	r0, sl
 8003e2a:	f000 fade 	bl	80043ea <__mcmp>
 8003e2e:	463a      	mov	r2, r7
 8003e30:	9000      	str	r0, [sp, #0]
 8003e32:	4631      	mov	r1, r6
 8003e34:	4620      	mov	r0, r4
 8003e36:	f000 faf2 	bl	800441e <__mdiff>
 8003e3a:	68c3      	ldr	r3, [r0, #12]
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	bb03      	cbnz	r3, 8003e82 <_dtoa_r+0xa8a>
 8003e40:	4601      	mov	r1, r0
 8003e42:	9006      	str	r0, [sp, #24]
 8003e44:	4650      	mov	r0, sl
 8003e46:	f000 fad0 	bl	80043ea <__mcmp>
 8003e4a:	9a06      	ldr	r2, [sp, #24]
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4620      	mov	r0, r4
 8003e52:	9306      	str	r3, [sp, #24]
 8003e54:	f000 f8f3 	bl	800403e <_Bfree>
 8003e58:	9b06      	ldr	r3, [sp, #24]
 8003e5a:	b9a3      	cbnz	r3, 8003e86 <_dtoa_r+0xa8e>
 8003e5c:	9a07      	ldr	r2, [sp, #28]
 8003e5e:	b992      	cbnz	r2, 8003e86 <_dtoa_r+0xa8e>
 8003e60:	9a05      	ldr	r2, [sp, #20]
 8003e62:	b982      	cbnz	r2, 8003e86 <_dtoa_r+0xa8e>
 8003e64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003e68:	d029      	beq.n	8003ebe <_dtoa_r+0xac6>
 8003e6a:	9b00      	ldr	r3, [sp, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	dd01      	ble.n	8003e74 <_dtoa_r+0xa7c>
 8003e70:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003e74:	f108 0501 	add.w	r5, r8, #1
 8003e78:	f888 9000 	strb.w	r9, [r8]
 8003e7c:	e753      	b.n	8003d26 <_dtoa_r+0x92e>
 8003e7e:	4638      	mov	r0, r7
 8003e80:	e7c2      	b.n	8003e08 <_dtoa_r+0xa10>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e7e3      	b.n	8003e4e <_dtoa_r+0xa56>
 8003e86:	9a00      	ldr	r2, [sp, #0]
 8003e88:	2a00      	cmp	r2, #0
 8003e8a:	db04      	blt.n	8003e96 <_dtoa_r+0xa9e>
 8003e8c:	d125      	bne.n	8003eda <_dtoa_r+0xae2>
 8003e8e:	9a07      	ldr	r2, [sp, #28]
 8003e90:	bb1a      	cbnz	r2, 8003eda <_dtoa_r+0xae2>
 8003e92:	9a05      	ldr	r2, [sp, #20]
 8003e94:	bb0a      	cbnz	r2, 8003eda <_dtoa_r+0xae2>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	ddec      	ble.n	8003e74 <_dtoa_r+0xa7c>
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 fa52 	bl	8004348 <__lshift>
 8003ea4:	4631      	mov	r1, r6
 8003ea6:	4682      	mov	sl, r0
 8003ea8:	f000 fa9f 	bl	80043ea <__mcmp>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	dc03      	bgt.n	8003eb8 <_dtoa_r+0xac0>
 8003eb0:	d1e0      	bne.n	8003e74 <_dtoa_r+0xa7c>
 8003eb2:	f019 0f01 	tst.w	r9, #1
 8003eb6:	d0dd      	beq.n	8003e74 <_dtoa_r+0xa7c>
 8003eb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003ebc:	d1d8      	bne.n	8003e70 <_dtoa_r+0xa78>
 8003ebe:	2339      	movs	r3, #57	; 0x39
 8003ec0:	f888 3000 	strb.w	r3, [r8]
 8003ec4:	f108 0801 	add.w	r8, r8, #1
 8003ec8:	4645      	mov	r5, r8
 8003eca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ece:	2b39      	cmp	r3, #57	; 0x39
 8003ed0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003ed4:	d03b      	beq.n	8003f4e <_dtoa_r+0xb56>
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	e040      	b.n	8003f5c <_dtoa_r+0xb64>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f108 0501 	add.w	r5, r8, #1
 8003ee0:	dd05      	ble.n	8003eee <_dtoa_r+0xaf6>
 8003ee2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003ee6:	d0ea      	beq.n	8003ebe <_dtoa_r+0xac6>
 8003ee8:	f109 0901 	add.w	r9, r9, #1
 8003eec:	e7c4      	b.n	8003e78 <_dtoa_r+0xa80>
 8003eee:	9b02      	ldr	r3, [sp, #8]
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003ef6:	1aeb      	subs	r3, r5, r3
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	46a8      	mov	r8, r5
 8003efc:	f43f af4b 	beq.w	8003d96 <_dtoa_r+0x99e>
 8003f00:	4651      	mov	r1, sl
 8003f02:	2300      	movs	r3, #0
 8003f04:	220a      	movs	r2, #10
 8003f06:	4620      	mov	r0, r4
 8003f08:	f000 f8b0 	bl	800406c <__multadd>
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	9903      	ldr	r1, [sp, #12]
 8003f10:	42bb      	cmp	r3, r7
 8003f12:	4682      	mov	sl, r0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f04f 020a 	mov.w	r2, #10
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	d104      	bne.n	8003f2a <_dtoa_r+0xb32>
 8003f20:	f000 f8a4 	bl	800406c <__multadd>
 8003f24:	9003      	str	r0, [sp, #12]
 8003f26:	4607      	mov	r7, r0
 8003f28:	e776      	b.n	8003e18 <_dtoa_r+0xa20>
 8003f2a:	f000 f89f 	bl	800406c <__multadd>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9003      	str	r0, [sp, #12]
 8003f32:	220a      	movs	r2, #10
 8003f34:	4639      	mov	r1, r7
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 f898 	bl	800406c <__multadd>
 8003f3c:	e7f3      	b.n	8003f26 <_dtoa_r+0xb2e>
 8003f3e:	4651      	mov	r1, sl
 8003f40:	2300      	movs	r3, #0
 8003f42:	220a      	movs	r2, #10
 8003f44:	4620      	mov	r0, r4
 8003f46:	f000 f891 	bl	800406c <__multadd>
 8003f4a:	4682      	mov	sl, r0
 8003f4c:	e70d      	b.n	8003d6a <_dtoa_r+0x972>
 8003f4e:	9b02      	ldr	r3, [sp, #8]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d105      	bne.n	8003f60 <_dtoa_r+0xb68>
 8003f54:	9a02      	ldr	r2, [sp, #8]
 8003f56:	f10b 0b01 	add.w	fp, fp, #1
 8003f5a:	2331      	movs	r3, #49	; 0x31
 8003f5c:	7013      	strb	r3, [r2, #0]
 8003f5e:	e6e2      	b.n	8003d26 <_dtoa_r+0x92e>
 8003f60:	4615      	mov	r5, r2
 8003f62:	e7b2      	b.n	8003eca <_dtoa_r+0xad2>
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <_dtoa_r+0xb94>)
 8003f66:	f7ff baae 	b.w	80034c6 <_dtoa_r+0xce>
 8003f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f47f aa88 	bne.w	8003482 <_dtoa_r+0x8a>
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <_dtoa_r+0xb98>)
 8003f74:	f7ff baa7 	b.w	80034c6 <_dtoa_r+0xce>
 8003f78:	9b04      	ldr	r3, [sp, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f73f aef4 	bgt.w	8003d68 <_dtoa_r+0x970>
 8003f80:	9b07      	ldr	r3, [sp, #28]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	f77f aef0 	ble.w	8003d68 <_dtoa_r+0x970>
 8003f88:	e6b8      	b.n	8003cfc <_dtoa_r+0x904>
 8003f8a:	bf00      	nop
 8003f8c:	08004ae4 	.word	0x08004ae4
 8003f90:	08004b08 	.word	0x08004b08

08003f94 <_localeconv_r>:
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <_localeconv_r+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6a18      	ldr	r0, [r3, #32]
 8003f9a:	4b04      	ldr	r3, [pc, #16]	; (8003fac <_localeconv_r+0x18>)
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	bf08      	it	eq
 8003fa0:	4618      	moveq	r0, r3
 8003fa2:	30f0      	adds	r0, #240	; 0xf0
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	2000002c 	.word	0x2000002c
 8003fac:	20000090 	.word	0x20000090

08003fb0 <malloc>:
 8003fb0:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <malloc+0xc>)
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	f000 bb3b 	b.w	8004630 <_malloc_r>
 8003fba:	bf00      	nop
 8003fbc:	2000002c 	.word	0x2000002c

08003fc0 <memcpy>:
 8003fc0:	b510      	push	{r4, lr}
 8003fc2:	1e43      	subs	r3, r0, #1
 8003fc4:	440a      	add	r2, r1
 8003fc6:	4291      	cmp	r1, r2
 8003fc8:	d100      	bne.n	8003fcc <memcpy+0xc>
 8003fca:	bd10      	pop	{r4, pc}
 8003fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fd4:	e7f7      	b.n	8003fc6 <memcpy+0x6>

08003fd6 <_Balloc>:
 8003fd6:	b570      	push	{r4, r5, r6, lr}
 8003fd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003fda:	4604      	mov	r4, r0
 8003fdc:	460e      	mov	r6, r1
 8003fde:	b93d      	cbnz	r5, 8003ff0 <_Balloc+0x1a>
 8003fe0:	2010      	movs	r0, #16
 8003fe2:	f7ff ffe5 	bl	8003fb0 <malloc>
 8003fe6:	6260      	str	r0, [r4, #36]	; 0x24
 8003fe8:	6045      	str	r5, [r0, #4]
 8003fea:	6085      	str	r5, [r0, #8]
 8003fec:	6005      	str	r5, [r0, #0]
 8003fee:	60c5      	str	r5, [r0, #12]
 8003ff0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003ff2:	68eb      	ldr	r3, [r5, #12]
 8003ff4:	b183      	cbz	r3, 8004018 <_Balloc+0x42>
 8003ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003ffe:	b9b8      	cbnz	r0, 8004030 <_Balloc+0x5a>
 8004000:	2101      	movs	r1, #1
 8004002:	fa01 f506 	lsl.w	r5, r1, r6
 8004006:	1d6a      	adds	r2, r5, #5
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	4620      	mov	r0, r4
 800400c:	f000 fab4 	bl	8004578 <_calloc_r>
 8004010:	b160      	cbz	r0, 800402c <_Balloc+0x56>
 8004012:	6046      	str	r6, [r0, #4]
 8004014:	6085      	str	r5, [r0, #8]
 8004016:	e00e      	b.n	8004036 <_Balloc+0x60>
 8004018:	2221      	movs	r2, #33	; 0x21
 800401a:	2104      	movs	r1, #4
 800401c:	4620      	mov	r0, r4
 800401e:	f000 faab 	bl	8004578 <_calloc_r>
 8004022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004024:	60e8      	str	r0, [r5, #12]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e4      	bne.n	8003ff6 <_Balloc+0x20>
 800402c:	2000      	movs	r0, #0
 800402e:	bd70      	pop	{r4, r5, r6, pc}
 8004030:	6802      	ldr	r2, [r0, #0]
 8004032:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004036:	2300      	movs	r3, #0
 8004038:	6103      	str	r3, [r0, #16]
 800403a:	60c3      	str	r3, [r0, #12]
 800403c:	bd70      	pop	{r4, r5, r6, pc}

0800403e <_Bfree>:
 800403e:	b570      	push	{r4, r5, r6, lr}
 8004040:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004042:	4606      	mov	r6, r0
 8004044:	460d      	mov	r5, r1
 8004046:	b93c      	cbnz	r4, 8004058 <_Bfree+0x1a>
 8004048:	2010      	movs	r0, #16
 800404a:	f7ff ffb1 	bl	8003fb0 <malloc>
 800404e:	6270      	str	r0, [r6, #36]	; 0x24
 8004050:	6044      	str	r4, [r0, #4]
 8004052:	6084      	str	r4, [r0, #8]
 8004054:	6004      	str	r4, [r0, #0]
 8004056:	60c4      	str	r4, [r0, #12]
 8004058:	b13d      	cbz	r5, 800406a <_Bfree+0x2c>
 800405a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800405c:	686a      	ldr	r2, [r5, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004064:	6029      	str	r1, [r5, #0]
 8004066:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800406a:	bd70      	pop	{r4, r5, r6, pc}

0800406c <__multadd>:
 800406c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004070:	690d      	ldr	r5, [r1, #16]
 8004072:	461f      	mov	r7, r3
 8004074:	4606      	mov	r6, r0
 8004076:	460c      	mov	r4, r1
 8004078:	f101 0e14 	add.w	lr, r1, #20
 800407c:	2300      	movs	r3, #0
 800407e:	f8de 0000 	ldr.w	r0, [lr]
 8004082:	b281      	uxth	r1, r0
 8004084:	fb02 7101 	mla	r1, r2, r1, r7
 8004088:	0c0f      	lsrs	r7, r1, #16
 800408a:	0c00      	lsrs	r0, r0, #16
 800408c:	fb02 7000 	mla	r0, r2, r0, r7
 8004090:	b289      	uxth	r1, r1
 8004092:	3301      	adds	r3, #1
 8004094:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004098:	429d      	cmp	r5, r3
 800409a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800409e:	f84e 1b04 	str.w	r1, [lr], #4
 80040a2:	dcec      	bgt.n	800407e <__multadd+0x12>
 80040a4:	b1d7      	cbz	r7, 80040dc <__multadd+0x70>
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	429d      	cmp	r5, r3
 80040aa:	db12      	blt.n	80040d2 <__multadd+0x66>
 80040ac:	6861      	ldr	r1, [r4, #4]
 80040ae:	4630      	mov	r0, r6
 80040b0:	3101      	adds	r1, #1
 80040b2:	f7ff ff90 	bl	8003fd6 <_Balloc>
 80040b6:	6922      	ldr	r2, [r4, #16]
 80040b8:	3202      	adds	r2, #2
 80040ba:	f104 010c 	add.w	r1, r4, #12
 80040be:	4680      	mov	r8, r0
 80040c0:	0092      	lsls	r2, r2, #2
 80040c2:	300c      	adds	r0, #12
 80040c4:	f7ff ff7c 	bl	8003fc0 <memcpy>
 80040c8:	4621      	mov	r1, r4
 80040ca:	4630      	mov	r0, r6
 80040cc:	f7ff ffb7 	bl	800403e <_Bfree>
 80040d0:	4644      	mov	r4, r8
 80040d2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80040d6:	3501      	adds	r5, #1
 80040d8:	615f      	str	r7, [r3, #20]
 80040da:	6125      	str	r5, [r4, #16]
 80040dc:	4620      	mov	r0, r4
 80040de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040e2 <__hi0bits>:
 80040e2:	0c02      	lsrs	r2, r0, #16
 80040e4:	0412      	lsls	r2, r2, #16
 80040e6:	4603      	mov	r3, r0
 80040e8:	b9b2      	cbnz	r2, 8004118 <__hi0bits+0x36>
 80040ea:	0403      	lsls	r3, r0, #16
 80040ec:	2010      	movs	r0, #16
 80040ee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80040f2:	bf04      	itt	eq
 80040f4:	021b      	lsleq	r3, r3, #8
 80040f6:	3008      	addeq	r0, #8
 80040f8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80040fc:	bf04      	itt	eq
 80040fe:	011b      	lsleq	r3, r3, #4
 8004100:	3004      	addeq	r0, #4
 8004102:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004106:	bf04      	itt	eq
 8004108:	009b      	lsleq	r3, r3, #2
 800410a:	3002      	addeq	r0, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	db06      	blt.n	800411e <__hi0bits+0x3c>
 8004110:	005b      	lsls	r3, r3, #1
 8004112:	d503      	bpl.n	800411c <__hi0bits+0x3a>
 8004114:	3001      	adds	r0, #1
 8004116:	4770      	bx	lr
 8004118:	2000      	movs	r0, #0
 800411a:	e7e8      	b.n	80040ee <__hi0bits+0xc>
 800411c:	2020      	movs	r0, #32
 800411e:	4770      	bx	lr

08004120 <__lo0bits>:
 8004120:	6803      	ldr	r3, [r0, #0]
 8004122:	f013 0207 	ands.w	r2, r3, #7
 8004126:	4601      	mov	r1, r0
 8004128:	d00b      	beq.n	8004142 <__lo0bits+0x22>
 800412a:	07da      	lsls	r2, r3, #31
 800412c:	d423      	bmi.n	8004176 <__lo0bits+0x56>
 800412e:	0798      	lsls	r0, r3, #30
 8004130:	bf49      	itett	mi
 8004132:	085b      	lsrmi	r3, r3, #1
 8004134:	089b      	lsrpl	r3, r3, #2
 8004136:	2001      	movmi	r0, #1
 8004138:	600b      	strmi	r3, [r1, #0]
 800413a:	bf5c      	itt	pl
 800413c:	600b      	strpl	r3, [r1, #0]
 800413e:	2002      	movpl	r0, #2
 8004140:	4770      	bx	lr
 8004142:	b298      	uxth	r0, r3
 8004144:	b9a8      	cbnz	r0, 8004172 <__lo0bits+0x52>
 8004146:	0c1b      	lsrs	r3, r3, #16
 8004148:	2010      	movs	r0, #16
 800414a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800414e:	bf04      	itt	eq
 8004150:	0a1b      	lsreq	r3, r3, #8
 8004152:	3008      	addeq	r0, #8
 8004154:	071a      	lsls	r2, r3, #28
 8004156:	bf04      	itt	eq
 8004158:	091b      	lsreq	r3, r3, #4
 800415a:	3004      	addeq	r0, #4
 800415c:	079a      	lsls	r2, r3, #30
 800415e:	bf04      	itt	eq
 8004160:	089b      	lsreq	r3, r3, #2
 8004162:	3002      	addeq	r0, #2
 8004164:	07da      	lsls	r2, r3, #31
 8004166:	d402      	bmi.n	800416e <__lo0bits+0x4e>
 8004168:	085b      	lsrs	r3, r3, #1
 800416a:	d006      	beq.n	800417a <__lo0bits+0x5a>
 800416c:	3001      	adds	r0, #1
 800416e:	600b      	str	r3, [r1, #0]
 8004170:	4770      	bx	lr
 8004172:	4610      	mov	r0, r2
 8004174:	e7e9      	b.n	800414a <__lo0bits+0x2a>
 8004176:	2000      	movs	r0, #0
 8004178:	4770      	bx	lr
 800417a:	2020      	movs	r0, #32
 800417c:	4770      	bx	lr

0800417e <__i2b>:
 800417e:	b510      	push	{r4, lr}
 8004180:	460c      	mov	r4, r1
 8004182:	2101      	movs	r1, #1
 8004184:	f7ff ff27 	bl	8003fd6 <_Balloc>
 8004188:	2201      	movs	r2, #1
 800418a:	6144      	str	r4, [r0, #20]
 800418c:	6102      	str	r2, [r0, #16]
 800418e:	bd10      	pop	{r4, pc}

08004190 <__multiply>:
 8004190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	4614      	mov	r4, r2
 8004196:	690a      	ldr	r2, [r1, #16]
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	bfb8      	it	lt
 800419e:	460b      	movlt	r3, r1
 80041a0:	4689      	mov	r9, r1
 80041a2:	bfbc      	itt	lt
 80041a4:	46a1      	movlt	r9, r4
 80041a6:	461c      	movlt	r4, r3
 80041a8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80041ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80041b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80041b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80041b8:	eb07 060a 	add.w	r6, r7, sl
 80041bc:	429e      	cmp	r6, r3
 80041be:	bfc8      	it	gt
 80041c0:	3101      	addgt	r1, #1
 80041c2:	f7ff ff08 	bl	8003fd6 <_Balloc>
 80041c6:	f100 0514 	add.w	r5, r0, #20
 80041ca:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80041ce:	462b      	mov	r3, r5
 80041d0:	2200      	movs	r2, #0
 80041d2:	4543      	cmp	r3, r8
 80041d4:	d316      	bcc.n	8004204 <__multiply+0x74>
 80041d6:	f104 0214 	add.w	r2, r4, #20
 80041da:	f109 0114 	add.w	r1, r9, #20
 80041de:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80041e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	9c01      	ldr	r4, [sp, #4]
 80041ea:	4294      	cmp	r4, r2
 80041ec:	4613      	mov	r3, r2
 80041ee:	d80c      	bhi.n	800420a <__multiply+0x7a>
 80041f0:	2e00      	cmp	r6, #0
 80041f2:	dd03      	ble.n	80041fc <__multiply+0x6c>
 80041f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d054      	beq.n	80042a6 <__multiply+0x116>
 80041fc:	6106      	str	r6, [r0, #16]
 80041fe:	b003      	add	sp, #12
 8004200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004204:	f843 2b04 	str.w	r2, [r3], #4
 8004208:	e7e3      	b.n	80041d2 <__multiply+0x42>
 800420a:	f8b3 a000 	ldrh.w	sl, [r3]
 800420e:	3204      	adds	r2, #4
 8004210:	f1ba 0f00 	cmp.w	sl, #0
 8004214:	d020      	beq.n	8004258 <__multiply+0xc8>
 8004216:	46ae      	mov	lr, r5
 8004218:	4689      	mov	r9, r1
 800421a:	f04f 0c00 	mov.w	ip, #0
 800421e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004222:	f8be b000 	ldrh.w	fp, [lr]
 8004226:	b2a3      	uxth	r3, r4
 8004228:	fb0a b303 	mla	r3, sl, r3, fp
 800422c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8004230:	f8de 4000 	ldr.w	r4, [lr]
 8004234:	4463      	add	r3, ip
 8004236:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800423a:	fb0a c40b 	mla	r4, sl, fp, ip
 800423e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004242:	b29b      	uxth	r3, r3
 8004244:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004248:	454f      	cmp	r7, r9
 800424a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800424e:	f84e 3b04 	str.w	r3, [lr], #4
 8004252:	d8e4      	bhi.n	800421e <__multiply+0x8e>
 8004254:	f8ce c000 	str.w	ip, [lr]
 8004258:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800425c:	f1b9 0f00 	cmp.w	r9, #0
 8004260:	d01f      	beq.n	80042a2 <__multiply+0x112>
 8004262:	682b      	ldr	r3, [r5, #0]
 8004264:	46ae      	mov	lr, r5
 8004266:	468c      	mov	ip, r1
 8004268:	f04f 0a00 	mov.w	sl, #0
 800426c:	f8bc 4000 	ldrh.w	r4, [ip]
 8004270:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004274:	fb09 b404 	mla	r4, r9, r4, fp
 8004278:	44a2      	add	sl, r4
 800427a:	b29b      	uxth	r3, r3
 800427c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004280:	f84e 3b04 	str.w	r3, [lr], #4
 8004284:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004288:	f8be 4000 	ldrh.w	r4, [lr]
 800428c:	0c1b      	lsrs	r3, r3, #16
 800428e:	fb09 4303 	mla	r3, r9, r3, r4
 8004292:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004296:	4567      	cmp	r7, ip
 8004298:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800429c:	d8e6      	bhi.n	800426c <__multiply+0xdc>
 800429e:	f8ce 3000 	str.w	r3, [lr]
 80042a2:	3504      	adds	r5, #4
 80042a4:	e7a0      	b.n	80041e8 <__multiply+0x58>
 80042a6:	3e01      	subs	r6, #1
 80042a8:	e7a2      	b.n	80041f0 <__multiply+0x60>
	...

080042ac <__pow5mult>:
 80042ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b0:	4615      	mov	r5, r2
 80042b2:	f012 0203 	ands.w	r2, r2, #3
 80042b6:	4606      	mov	r6, r0
 80042b8:	460f      	mov	r7, r1
 80042ba:	d007      	beq.n	80042cc <__pow5mult+0x20>
 80042bc:	3a01      	subs	r2, #1
 80042be:	4c21      	ldr	r4, [pc, #132]	; (8004344 <__pow5mult+0x98>)
 80042c0:	2300      	movs	r3, #0
 80042c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80042c6:	f7ff fed1 	bl	800406c <__multadd>
 80042ca:	4607      	mov	r7, r0
 80042cc:	10ad      	asrs	r5, r5, #2
 80042ce:	d035      	beq.n	800433c <__pow5mult+0x90>
 80042d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80042d2:	b93c      	cbnz	r4, 80042e4 <__pow5mult+0x38>
 80042d4:	2010      	movs	r0, #16
 80042d6:	f7ff fe6b 	bl	8003fb0 <malloc>
 80042da:	6270      	str	r0, [r6, #36]	; 0x24
 80042dc:	6044      	str	r4, [r0, #4]
 80042de:	6084      	str	r4, [r0, #8]
 80042e0:	6004      	str	r4, [r0, #0]
 80042e2:	60c4      	str	r4, [r0, #12]
 80042e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80042e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80042ec:	b94c      	cbnz	r4, 8004302 <__pow5mult+0x56>
 80042ee:	f240 2171 	movw	r1, #625	; 0x271
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7ff ff43 	bl	800417e <__i2b>
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80042fe:	4604      	mov	r4, r0
 8004300:	6003      	str	r3, [r0, #0]
 8004302:	f04f 0800 	mov.w	r8, #0
 8004306:	07eb      	lsls	r3, r5, #31
 8004308:	d50a      	bpl.n	8004320 <__pow5mult+0x74>
 800430a:	4639      	mov	r1, r7
 800430c:	4622      	mov	r2, r4
 800430e:	4630      	mov	r0, r6
 8004310:	f7ff ff3e 	bl	8004190 <__multiply>
 8004314:	4639      	mov	r1, r7
 8004316:	4681      	mov	r9, r0
 8004318:	4630      	mov	r0, r6
 800431a:	f7ff fe90 	bl	800403e <_Bfree>
 800431e:	464f      	mov	r7, r9
 8004320:	106d      	asrs	r5, r5, #1
 8004322:	d00b      	beq.n	800433c <__pow5mult+0x90>
 8004324:	6820      	ldr	r0, [r4, #0]
 8004326:	b938      	cbnz	r0, 8004338 <__pow5mult+0x8c>
 8004328:	4622      	mov	r2, r4
 800432a:	4621      	mov	r1, r4
 800432c:	4630      	mov	r0, r6
 800432e:	f7ff ff2f 	bl	8004190 <__multiply>
 8004332:	6020      	str	r0, [r4, #0]
 8004334:	f8c0 8000 	str.w	r8, [r0]
 8004338:	4604      	mov	r4, r0
 800433a:	e7e4      	b.n	8004306 <__pow5mult+0x5a>
 800433c:	4638      	mov	r0, r7
 800433e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004342:	bf00      	nop
 8004344:	08004c08 	.word	0x08004c08

08004348 <__lshift>:
 8004348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800434c:	460c      	mov	r4, r1
 800434e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	6849      	ldr	r1, [r1, #4]
 8004356:	eb0a 0903 	add.w	r9, sl, r3
 800435a:	68a3      	ldr	r3, [r4, #8]
 800435c:	4607      	mov	r7, r0
 800435e:	4616      	mov	r6, r2
 8004360:	f109 0501 	add.w	r5, r9, #1
 8004364:	42ab      	cmp	r3, r5
 8004366:	db31      	blt.n	80043cc <__lshift+0x84>
 8004368:	4638      	mov	r0, r7
 800436a:	f7ff fe34 	bl	8003fd6 <_Balloc>
 800436e:	2200      	movs	r2, #0
 8004370:	4680      	mov	r8, r0
 8004372:	f100 0314 	add.w	r3, r0, #20
 8004376:	4611      	mov	r1, r2
 8004378:	4552      	cmp	r2, sl
 800437a:	db2a      	blt.n	80043d2 <__lshift+0x8a>
 800437c:	6920      	ldr	r0, [r4, #16]
 800437e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004382:	f104 0114 	add.w	r1, r4, #20
 8004386:	f016 021f 	ands.w	r2, r6, #31
 800438a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800438e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004392:	d022      	beq.n	80043da <__lshift+0x92>
 8004394:	f1c2 0c20 	rsb	ip, r2, #32
 8004398:	2000      	movs	r0, #0
 800439a:	680e      	ldr	r6, [r1, #0]
 800439c:	4096      	lsls	r6, r2
 800439e:	4330      	orrs	r0, r6
 80043a0:	f843 0b04 	str.w	r0, [r3], #4
 80043a4:	f851 0b04 	ldr.w	r0, [r1], #4
 80043a8:	458e      	cmp	lr, r1
 80043aa:	fa20 f00c 	lsr.w	r0, r0, ip
 80043ae:	d8f4      	bhi.n	800439a <__lshift+0x52>
 80043b0:	6018      	str	r0, [r3, #0]
 80043b2:	b108      	cbz	r0, 80043b8 <__lshift+0x70>
 80043b4:	f109 0502 	add.w	r5, r9, #2
 80043b8:	3d01      	subs	r5, #1
 80043ba:	4638      	mov	r0, r7
 80043bc:	f8c8 5010 	str.w	r5, [r8, #16]
 80043c0:	4621      	mov	r1, r4
 80043c2:	f7ff fe3c 	bl	800403e <_Bfree>
 80043c6:	4640      	mov	r0, r8
 80043c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043cc:	3101      	adds	r1, #1
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	e7c8      	b.n	8004364 <__lshift+0x1c>
 80043d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80043d6:	3201      	adds	r2, #1
 80043d8:	e7ce      	b.n	8004378 <__lshift+0x30>
 80043da:	3b04      	subs	r3, #4
 80043dc:	f851 2b04 	ldr.w	r2, [r1], #4
 80043e0:	f843 2f04 	str.w	r2, [r3, #4]!
 80043e4:	458e      	cmp	lr, r1
 80043e6:	d8f9      	bhi.n	80043dc <__lshift+0x94>
 80043e8:	e7e6      	b.n	80043b8 <__lshift+0x70>

080043ea <__mcmp>:
 80043ea:	6903      	ldr	r3, [r0, #16]
 80043ec:	690a      	ldr	r2, [r1, #16]
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	b530      	push	{r4, r5, lr}
 80043f2:	d10c      	bne.n	800440e <__mcmp+0x24>
 80043f4:	0092      	lsls	r2, r2, #2
 80043f6:	3014      	adds	r0, #20
 80043f8:	3114      	adds	r1, #20
 80043fa:	1884      	adds	r4, r0, r2
 80043fc:	4411      	add	r1, r2
 80043fe:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004402:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004406:	4295      	cmp	r5, r2
 8004408:	d003      	beq.n	8004412 <__mcmp+0x28>
 800440a:	d305      	bcc.n	8004418 <__mcmp+0x2e>
 800440c:	2301      	movs	r3, #1
 800440e:	4618      	mov	r0, r3
 8004410:	bd30      	pop	{r4, r5, pc}
 8004412:	42a0      	cmp	r0, r4
 8004414:	d3f3      	bcc.n	80043fe <__mcmp+0x14>
 8004416:	e7fa      	b.n	800440e <__mcmp+0x24>
 8004418:	f04f 33ff 	mov.w	r3, #4294967295
 800441c:	e7f7      	b.n	800440e <__mcmp+0x24>

0800441e <__mdiff>:
 800441e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004422:	460d      	mov	r5, r1
 8004424:	4607      	mov	r7, r0
 8004426:	4611      	mov	r1, r2
 8004428:	4628      	mov	r0, r5
 800442a:	4614      	mov	r4, r2
 800442c:	f7ff ffdd 	bl	80043ea <__mcmp>
 8004430:	1e06      	subs	r6, r0, #0
 8004432:	d108      	bne.n	8004446 <__mdiff+0x28>
 8004434:	4631      	mov	r1, r6
 8004436:	4638      	mov	r0, r7
 8004438:	f7ff fdcd 	bl	8003fd6 <_Balloc>
 800443c:	2301      	movs	r3, #1
 800443e:	6103      	str	r3, [r0, #16]
 8004440:	6146      	str	r6, [r0, #20]
 8004442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004446:	bfa4      	itt	ge
 8004448:	4623      	movge	r3, r4
 800444a:	462c      	movge	r4, r5
 800444c:	4638      	mov	r0, r7
 800444e:	6861      	ldr	r1, [r4, #4]
 8004450:	bfa6      	itte	ge
 8004452:	461d      	movge	r5, r3
 8004454:	2600      	movge	r6, #0
 8004456:	2601      	movlt	r6, #1
 8004458:	f7ff fdbd 	bl	8003fd6 <_Balloc>
 800445c:	692b      	ldr	r3, [r5, #16]
 800445e:	60c6      	str	r6, [r0, #12]
 8004460:	6926      	ldr	r6, [r4, #16]
 8004462:	f105 0914 	add.w	r9, r5, #20
 8004466:	f104 0214 	add.w	r2, r4, #20
 800446a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800446e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004472:	f100 0514 	add.w	r5, r0, #20
 8004476:	f04f 0c00 	mov.w	ip, #0
 800447a:	f852 ab04 	ldr.w	sl, [r2], #4
 800447e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004482:	fa1c f18a 	uxtah	r1, ip, sl
 8004486:	b2a3      	uxth	r3, r4
 8004488:	1ac9      	subs	r1, r1, r3
 800448a:	0c23      	lsrs	r3, r4, #16
 800448c:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004490:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004494:	b289      	uxth	r1, r1
 8004496:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800449a:	45c8      	cmp	r8, r9
 800449c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80044a0:	4696      	mov	lr, r2
 80044a2:	f845 3b04 	str.w	r3, [r5], #4
 80044a6:	d8e8      	bhi.n	800447a <__mdiff+0x5c>
 80044a8:	45be      	cmp	lr, r7
 80044aa:	d305      	bcc.n	80044b8 <__mdiff+0x9a>
 80044ac:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80044b0:	b18b      	cbz	r3, 80044d6 <__mdiff+0xb8>
 80044b2:	6106      	str	r6, [r0, #16]
 80044b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80044bc:	fa1c f381 	uxtah	r3, ip, r1
 80044c0:	141a      	asrs	r2, r3, #16
 80044c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80044cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80044d0:	f845 3b04 	str.w	r3, [r5], #4
 80044d4:	e7e8      	b.n	80044a8 <__mdiff+0x8a>
 80044d6:	3e01      	subs	r6, #1
 80044d8:	e7e8      	b.n	80044ac <__mdiff+0x8e>

080044da <__d2b>:
 80044da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80044de:	460e      	mov	r6, r1
 80044e0:	2101      	movs	r1, #1
 80044e2:	ec59 8b10 	vmov	r8, r9, d0
 80044e6:	4615      	mov	r5, r2
 80044e8:	f7ff fd75 	bl	8003fd6 <_Balloc>
 80044ec:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80044f0:	4607      	mov	r7, r0
 80044f2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80044f6:	bb34      	cbnz	r4, 8004546 <__d2b+0x6c>
 80044f8:	9301      	str	r3, [sp, #4]
 80044fa:	f1b8 0f00 	cmp.w	r8, #0
 80044fe:	d027      	beq.n	8004550 <__d2b+0x76>
 8004500:	a802      	add	r0, sp, #8
 8004502:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004506:	f7ff fe0b 	bl	8004120 <__lo0bits>
 800450a:	9900      	ldr	r1, [sp, #0]
 800450c:	b1f0      	cbz	r0, 800454c <__d2b+0x72>
 800450e:	9a01      	ldr	r2, [sp, #4]
 8004510:	f1c0 0320 	rsb	r3, r0, #32
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	430b      	orrs	r3, r1
 800451a:	40c2      	lsrs	r2, r0
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	9201      	str	r2, [sp, #4]
 8004520:	9b01      	ldr	r3, [sp, #4]
 8004522:	61bb      	str	r3, [r7, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	bf14      	ite	ne
 8004528:	2102      	movne	r1, #2
 800452a:	2101      	moveq	r1, #1
 800452c:	6139      	str	r1, [r7, #16]
 800452e:	b1c4      	cbz	r4, 8004562 <__d2b+0x88>
 8004530:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004534:	4404      	add	r4, r0
 8004536:	6034      	str	r4, [r6, #0]
 8004538:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800453c:	6028      	str	r0, [r5, #0]
 800453e:	4638      	mov	r0, r7
 8004540:	b003      	add	sp, #12
 8004542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454a:	e7d5      	b.n	80044f8 <__d2b+0x1e>
 800454c:	6179      	str	r1, [r7, #20]
 800454e:	e7e7      	b.n	8004520 <__d2b+0x46>
 8004550:	a801      	add	r0, sp, #4
 8004552:	f7ff fde5 	bl	8004120 <__lo0bits>
 8004556:	9b01      	ldr	r3, [sp, #4]
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	2101      	movs	r1, #1
 800455c:	6139      	str	r1, [r7, #16]
 800455e:	3020      	adds	r0, #32
 8004560:	e7e5      	b.n	800452e <__d2b+0x54>
 8004562:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004566:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800456a:	6030      	str	r0, [r6, #0]
 800456c:	6918      	ldr	r0, [r3, #16]
 800456e:	f7ff fdb8 	bl	80040e2 <__hi0bits>
 8004572:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004576:	e7e1      	b.n	800453c <__d2b+0x62>

08004578 <_calloc_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	fb02 f401 	mul.w	r4, r2, r1
 800457e:	4621      	mov	r1, r4
 8004580:	f000 f856 	bl	8004630 <_malloc_r>
 8004584:	4605      	mov	r5, r0
 8004586:	b118      	cbz	r0, 8004590 <_calloc_r+0x18>
 8004588:	4622      	mov	r2, r4
 800458a:	2100      	movs	r1, #0
 800458c:	f7fe fa0e 	bl	80029ac <memset>
 8004590:	4628      	mov	r0, r5
 8004592:	bd38      	pop	{r3, r4, r5, pc}

08004594 <_free_r>:
 8004594:	b538      	push	{r3, r4, r5, lr}
 8004596:	4605      	mov	r5, r0
 8004598:	2900      	cmp	r1, #0
 800459a:	d045      	beq.n	8004628 <_free_r+0x94>
 800459c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045a0:	1f0c      	subs	r4, r1, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bfb8      	it	lt
 80045a6:	18e4      	addlt	r4, r4, r3
 80045a8:	f000 fa2c 	bl	8004a04 <__malloc_lock>
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <_free_r+0x98>)
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	4610      	mov	r0, r2
 80045b2:	b933      	cbnz	r3, 80045c2 <_free_r+0x2e>
 80045b4:	6063      	str	r3, [r4, #4]
 80045b6:	6014      	str	r4, [r2, #0]
 80045b8:	4628      	mov	r0, r5
 80045ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045be:	f000 ba22 	b.w	8004a06 <__malloc_unlock>
 80045c2:	42a3      	cmp	r3, r4
 80045c4:	d90c      	bls.n	80045e0 <_free_r+0x4c>
 80045c6:	6821      	ldr	r1, [r4, #0]
 80045c8:	1862      	adds	r2, r4, r1
 80045ca:	4293      	cmp	r3, r2
 80045cc:	bf04      	itt	eq
 80045ce:	681a      	ldreq	r2, [r3, #0]
 80045d0:	685b      	ldreq	r3, [r3, #4]
 80045d2:	6063      	str	r3, [r4, #4]
 80045d4:	bf04      	itt	eq
 80045d6:	1852      	addeq	r2, r2, r1
 80045d8:	6022      	streq	r2, [r4, #0]
 80045da:	6004      	str	r4, [r0, #0]
 80045dc:	e7ec      	b.n	80045b8 <_free_r+0x24>
 80045de:	4613      	mov	r3, r2
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	b10a      	cbz	r2, 80045e8 <_free_r+0x54>
 80045e4:	42a2      	cmp	r2, r4
 80045e6:	d9fa      	bls.n	80045de <_free_r+0x4a>
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	1858      	adds	r0, r3, r1
 80045ec:	42a0      	cmp	r0, r4
 80045ee:	d10b      	bne.n	8004608 <_free_r+0x74>
 80045f0:	6820      	ldr	r0, [r4, #0]
 80045f2:	4401      	add	r1, r0
 80045f4:	1858      	adds	r0, r3, r1
 80045f6:	4282      	cmp	r2, r0
 80045f8:	6019      	str	r1, [r3, #0]
 80045fa:	d1dd      	bne.n	80045b8 <_free_r+0x24>
 80045fc:	6810      	ldr	r0, [r2, #0]
 80045fe:	6852      	ldr	r2, [r2, #4]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	4401      	add	r1, r0
 8004604:	6019      	str	r1, [r3, #0]
 8004606:	e7d7      	b.n	80045b8 <_free_r+0x24>
 8004608:	d902      	bls.n	8004610 <_free_r+0x7c>
 800460a:	230c      	movs	r3, #12
 800460c:	602b      	str	r3, [r5, #0]
 800460e:	e7d3      	b.n	80045b8 <_free_r+0x24>
 8004610:	6820      	ldr	r0, [r4, #0]
 8004612:	1821      	adds	r1, r4, r0
 8004614:	428a      	cmp	r2, r1
 8004616:	bf04      	itt	eq
 8004618:	6811      	ldreq	r1, [r2, #0]
 800461a:	6852      	ldreq	r2, [r2, #4]
 800461c:	6062      	str	r2, [r4, #4]
 800461e:	bf04      	itt	eq
 8004620:	1809      	addeq	r1, r1, r0
 8004622:	6021      	streq	r1, [r4, #0]
 8004624:	605c      	str	r4, [r3, #4]
 8004626:	e7c7      	b.n	80045b8 <_free_r+0x24>
 8004628:	bd38      	pop	{r3, r4, r5, pc}
 800462a:	bf00      	nop
 800462c:	20000228 	.word	0x20000228

08004630 <_malloc_r>:
 8004630:	b570      	push	{r4, r5, r6, lr}
 8004632:	1ccd      	adds	r5, r1, #3
 8004634:	f025 0503 	bic.w	r5, r5, #3
 8004638:	3508      	adds	r5, #8
 800463a:	2d0c      	cmp	r5, #12
 800463c:	bf38      	it	cc
 800463e:	250c      	movcc	r5, #12
 8004640:	2d00      	cmp	r5, #0
 8004642:	4606      	mov	r6, r0
 8004644:	db01      	blt.n	800464a <_malloc_r+0x1a>
 8004646:	42a9      	cmp	r1, r5
 8004648:	d903      	bls.n	8004652 <_malloc_r+0x22>
 800464a:	230c      	movs	r3, #12
 800464c:	6033      	str	r3, [r6, #0]
 800464e:	2000      	movs	r0, #0
 8004650:	bd70      	pop	{r4, r5, r6, pc}
 8004652:	f000 f9d7 	bl	8004a04 <__malloc_lock>
 8004656:	4a23      	ldr	r2, [pc, #140]	; (80046e4 <_malloc_r+0xb4>)
 8004658:	6814      	ldr	r4, [r2, #0]
 800465a:	4621      	mov	r1, r4
 800465c:	b991      	cbnz	r1, 8004684 <_malloc_r+0x54>
 800465e:	4c22      	ldr	r4, [pc, #136]	; (80046e8 <_malloc_r+0xb8>)
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	b91b      	cbnz	r3, 800466c <_malloc_r+0x3c>
 8004664:	4630      	mov	r0, r6
 8004666:	f000 f991 	bl	800498c <_sbrk_r>
 800466a:	6020      	str	r0, [r4, #0]
 800466c:	4629      	mov	r1, r5
 800466e:	4630      	mov	r0, r6
 8004670:	f000 f98c 	bl	800498c <_sbrk_r>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d126      	bne.n	80046c6 <_malloc_r+0x96>
 8004678:	230c      	movs	r3, #12
 800467a:	6033      	str	r3, [r6, #0]
 800467c:	4630      	mov	r0, r6
 800467e:	f000 f9c2 	bl	8004a06 <__malloc_unlock>
 8004682:	e7e4      	b.n	800464e <_malloc_r+0x1e>
 8004684:	680b      	ldr	r3, [r1, #0]
 8004686:	1b5b      	subs	r3, r3, r5
 8004688:	d41a      	bmi.n	80046c0 <_malloc_r+0x90>
 800468a:	2b0b      	cmp	r3, #11
 800468c:	d90f      	bls.n	80046ae <_malloc_r+0x7e>
 800468e:	600b      	str	r3, [r1, #0]
 8004690:	50cd      	str	r5, [r1, r3]
 8004692:	18cc      	adds	r4, r1, r3
 8004694:	4630      	mov	r0, r6
 8004696:	f000 f9b6 	bl	8004a06 <__malloc_unlock>
 800469a:	f104 000b 	add.w	r0, r4, #11
 800469e:	1d23      	adds	r3, r4, #4
 80046a0:	f020 0007 	bic.w	r0, r0, #7
 80046a4:	1ac3      	subs	r3, r0, r3
 80046a6:	d01b      	beq.n	80046e0 <_malloc_r+0xb0>
 80046a8:	425a      	negs	r2, r3
 80046aa:	50e2      	str	r2, [r4, r3]
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	428c      	cmp	r4, r1
 80046b0:	bf0d      	iteet	eq
 80046b2:	6863      	ldreq	r3, [r4, #4]
 80046b4:	684b      	ldrne	r3, [r1, #4]
 80046b6:	6063      	strne	r3, [r4, #4]
 80046b8:	6013      	streq	r3, [r2, #0]
 80046ba:	bf18      	it	ne
 80046bc:	460c      	movne	r4, r1
 80046be:	e7e9      	b.n	8004694 <_malloc_r+0x64>
 80046c0:	460c      	mov	r4, r1
 80046c2:	6849      	ldr	r1, [r1, #4]
 80046c4:	e7ca      	b.n	800465c <_malloc_r+0x2c>
 80046c6:	1cc4      	adds	r4, r0, #3
 80046c8:	f024 0403 	bic.w	r4, r4, #3
 80046cc:	42a0      	cmp	r0, r4
 80046ce:	d005      	beq.n	80046dc <_malloc_r+0xac>
 80046d0:	1a21      	subs	r1, r4, r0
 80046d2:	4630      	mov	r0, r6
 80046d4:	f000 f95a 	bl	800498c <_sbrk_r>
 80046d8:	3001      	adds	r0, #1
 80046da:	d0cd      	beq.n	8004678 <_malloc_r+0x48>
 80046dc:	6025      	str	r5, [r4, #0]
 80046de:	e7d9      	b.n	8004694 <_malloc_r+0x64>
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
 80046e2:	bf00      	nop
 80046e4:	20000228 	.word	0x20000228
 80046e8:	2000022c 	.word	0x2000022c

080046ec <__ssputs_r>:
 80046ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f0:	688e      	ldr	r6, [r1, #8]
 80046f2:	429e      	cmp	r6, r3
 80046f4:	4682      	mov	sl, r0
 80046f6:	460c      	mov	r4, r1
 80046f8:	4691      	mov	r9, r2
 80046fa:	4698      	mov	r8, r3
 80046fc:	d835      	bhi.n	800476a <__ssputs_r+0x7e>
 80046fe:	898a      	ldrh	r2, [r1, #12]
 8004700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004704:	d031      	beq.n	800476a <__ssputs_r+0x7e>
 8004706:	6825      	ldr	r5, [r4, #0]
 8004708:	6909      	ldr	r1, [r1, #16]
 800470a:	1a6f      	subs	r7, r5, r1
 800470c:	6965      	ldr	r5, [r4, #20]
 800470e:	2302      	movs	r3, #2
 8004710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004714:	fb95 f5f3 	sdiv	r5, r5, r3
 8004718:	f108 0301 	add.w	r3, r8, #1
 800471c:	443b      	add	r3, r7
 800471e:	429d      	cmp	r5, r3
 8004720:	bf38      	it	cc
 8004722:	461d      	movcc	r5, r3
 8004724:	0553      	lsls	r3, r2, #21
 8004726:	d531      	bpl.n	800478c <__ssputs_r+0xa0>
 8004728:	4629      	mov	r1, r5
 800472a:	f7ff ff81 	bl	8004630 <_malloc_r>
 800472e:	4606      	mov	r6, r0
 8004730:	b950      	cbnz	r0, 8004748 <__ssputs_r+0x5c>
 8004732:	230c      	movs	r3, #12
 8004734:	f8ca 3000 	str.w	r3, [sl]
 8004738:	89a3      	ldrh	r3, [r4, #12]
 800473a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800473e:	81a3      	strh	r3, [r4, #12]
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004748:	463a      	mov	r2, r7
 800474a:	6921      	ldr	r1, [r4, #16]
 800474c:	f7ff fc38 	bl	8003fc0 <memcpy>
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475a:	81a3      	strh	r3, [r4, #12]
 800475c:	6126      	str	r6, [r4, #16]
 800475e:	6165      	str	r5, [r4, #20]
 8004760:	443e      	add	r6, r7
 8004762:	1bed      	subs	r5, r5, r7
 8004764:	6026      	str	r6, [r4, #0]
 8004766:	60a5      	str	r5, [r4, #8]
 8004768:	4646      	mov	r6, r8
 800476a:	4546      	cmp	r6, r8
 800476c:	bf28      	it	cs
 800476e:	4646      	movcs	r6, r8
 8004770:	4632      	mov	r2, r6
 8004772:	4649      	mov	r1, r9
 8004774:	6820      	ldr	r0, [r4, #0]
 8004776:	f000 f92b 	bl	80049d0 <memmove>
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	1b9b      	subs	r3, r3, r6
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	441e      	add	r6, r3
 8004784:	6026      	str	r6, [r4, #0]
 8004786:	2000      	movs	r0, #0
 8004788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478c:	462a      	mov	r2, r5
 800478e:	f000 f93b 	bl	8004a08 <_realloc_r>
 8004792:	4606      	mov	r6, r0
 8004794:	2800      	cmp	r0, #0
 8004796:	d1e1      	bne.n	800475c <__ssputs_r+0x70>
 8004798:	6921      	ldr	r1, [r4, #16]
 800479a:	4650      	mov	r0, sl
 800479c:	f7ff fefa 	bl	8004594 <_free_r>
 80047a0:	e7c7      	b.n	8004732 <__ssputs_r+0x46>
	...

080047a4 <_svfiprintf_r>:
 80047a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a8:	b09d      	sub	sp, #116	; 0x74
 80047aa:	4680      	mov	r8, r0
 80047ac:	9303      	str	r3, [sp, #12]
 80047ae:	898b      	ldrh	r3, [r1, #12]
 80047b0:	061c      	lsls	r4, r3, #24
 80047b2:	460d      	mov	r5, r1
 80047b4:	4616      	mov	r6, r2
 80047b6:	d50f      	bpl.n	80047d8 <_svfiprintf_r+0x34>
 80047b8:	690b      	ldr	r3, [r1, #16]
 80047ba:	b96b      	cbnz	r3, 80047d8 <_svfiprintf_r+0x34>
 80047bc:	2140      	movs	r1, #64	; 0x40
 80047be:	f7ff ff37 	bl	8004630 <_malloc_r>
 80047c2:	6028      	str	r0, [r5, #0]
 80047c4:	6128      	str	r0, [r5, #16]
 80047c6:	b928      	cbnz	r0, 80047d4 <_svfiprintf_r+0x30>
 80047c8:	230c      	movs	r3, #12
 80047ca:	f8c8 3000 	str.w	r3, [r8]
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295
 80047d2:	e0c5      	b.n	8004960 <_svfiprintf_r+0x1bc>
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	616b      	str	r3, [r5, #20]
 80047d8:	2300      	movs	r3, #0
 80047da:	9309      	str	r3, [sp, #36]	; 0x24
 80047dc:	2320      	movs	r3, #32
 80047de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047e2:	2330      	movs	r3, #48	; 0x30
 80047e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047e8:	f04f 0b01 	mov.w	fp, #1
 80047ec:	4637      	mov	r7, r6
 80047ee:	463c      	mov	r4, r7
 80047f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d13c      	bne.n	8004872 <_svfiprintf_r+0xce>
 80047f8:	ebb7 0a06 	subs.w	sl, r7, r6
 80047fc:	d00b      	beq.n	8004816 <_svfiprintf_r+0x72>
 80047fe:	4653      	mov	r3, sl
 8004800:	4632      	mov	r2, r6
 8004802:	4629      	mov	r1, r5
 8004804:	4640      	mov	r0, r8
 8004806:	f7ff ff71 	bl	80046ec <__ssputs_r>
 800480a:	3001      	adds	r0, #1
 800480c:	f000 80a3 	beq.w	8004956 <_svfiprintf_r+0x1b2>
 8004810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004812:	4453      	add	r3, sl
 8004814:	9309      	str	r3, [sp, #36]	; 0x24
 8004816:	783b      	ldrb	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 809c 	beq.w	8004956 <_svfiprintf_r+0x1b2>
 800481e:	2300      	movs	r3, #0
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	9304      	str	r3, [sp, #16]
 8004826:	9307      	str	r3, [sp, #28]
 8004828:	9205      	str	r2, [sp, #20]
 800482a:	9306      	str	r3, [sp, #24]
 800482c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004830:	931a      	str	r3, [sp, #104]	; 0x68
 8004832:	2205      	movs	r2, #5
 8004834:	7821      	ldrb	r1, [r4, #0]
 8004836:	4850      	ldr	r0, [pc, #320]	; (8004978 <_svfiprintf_r+0x1d4>)
 8004838:	f7fb fcd2 	bl	80001e0 <memchr>
 800483c:	1c67      	adds	r7, r4, #1
 800483e:	9b04      	ldr	r3, [sp, #16]
 8004840:	b9d8      	cbnz	r0, 800487a <_svfiprintf_r+0xd6>
 8004842:	06d9      	lsls	r1, r3, #27
 8004844:	bf44      	itt	mi
 8004846:	2220      	movmi	r2, #32
 8004848:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800484c:	071a      	lsls	r2, r3, #28
 800484e:	bf44      	itt	mi
 8004850:	222b      	movmi	r2, #43	; 0x2b
 8004852:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004856:	7822      	ldrb	r2, [r4, #0]
 8004858:	2a2a      	cmp	r2, #42	; 0x2a
 800485a:	d016      	beq.n	800488a <_svfiprintf_r+0xe6>
 800485c:	9a07      	ldr	r2, [sp, #28]
 800485e:	2100      	movs	r1, #0
 8004860:	200a      	movs	r0, #10
 8004862:	4627      	mov	r7, r4
 8004864:	3401      	adds	r4, #1
 8004866:	783b      	ldrb	r3, [r7, #0]
 8004868:	3b30      	subs	r3, #48	; 0x30
 800486a:	2b09      	cmp	r3, #9
 800486c:	d951      	bls.n	8004912 <_svfiprintf_r+0x16e>
 800486e:	b1c9      	cbz	r1, 80048a4 <_svfiprintf_r+0x100>
 8004870:	e011      	b.n	8004896 <_svfiprintf_r+0xf2>
 8004872:	2b25      	cmp	r3, #37	; 0x25
 8004874:	d0c0      	beq.n	80047f8 <_svfiprintf_r+0x54>
 8004876:	4627      	mov	r7, r4
 8004878:	e7b9      	b.n	80047ee <_svfiprintf_r+0x4a>
 800487a:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <_svfiprintf_r+0x1d4>)
 800487c:	1a80      	subs	r0, r0, r2
 800487e:	fa0b f000 	lsl.w	r0, fp, r0
 8004882:	4318      	orrs	r0, r3
 8004884:	9004      	str	r0, [sp, #16]
 8004886:	463c      	mov	r4, r7
 8004888:	e7d3      	b.n	8004832 <_svfiprintf_r+0x8e>
 800488a:	9a03      	ldr	r2, [sp, #12]
 800488c:	1d11      	adds	r1, r2, #4
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	9103      	str	r1, [sp, #12]
 8004892:	2a00      	cmp	r2, #0
 8004894:	db01      	blt.n	800489a <_svfiprintf_r+0xf6>
 8004896:	9207      	str	r2, [sp, #28]
 8004898:	e004      	b.n	80048a4 <_svfiprintf_r+0x100>
 800489a:	4252      	negs	r2, r2
 800489c:	f043 0302 	orr.w	r3, r3, #2
 80048a0:	9207      	str	r2, [sp, #28]
 80048a2:	9304      	str	r3, [sp, #16]
 80048a4:	783b      	ldrb	r3, [r7, #0]
 80048a6:	2b2e      	cmp	r3, #46	; 0x2e
 80048a8:	d10e      	bne.n	80048c8 <_svfiprintf_r+0x124>
 80048aa:	787b      	ldrb	r3, [r7, #1]
 80048ac:	2b2a      	cmp	r3, #42	; 0x2a
 80048ae:	f107 0101 	add.w	r1, r7, #1
 80048b2:	d132      	bne.n	800491a <_svfiprintf_r+0x176>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	9203      	str	r2, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bfb8      	it	lt
 80048c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80048c4:	3702      	adds	r7, #2
 80048c6:	9305      	str	r3, [sp, #20]
 80048c8:	4c2c      	ldr	r4, [pc, #176]	; (800497c <_svfiprintf_r+0x1d8>)
 80048ca:	7839      	ldrb	r1, [r7, #0]
 80048cc:	2203      	movs	r2, #3
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fb fc86 	bl	80001e0 <memchr>
 80048d4:	b138      	cbz	r0, 80048e6 <_svfiprintf_r+0x142>
 80048d6:	2340      	movs	r3, #64	; 0x40
 80048d8:	1b00      	subs	r0, r0, r4
 80048da:	fa03 f000 	lsl.w	r0, r3, r0
 80048de:	9b04      	ldr	r3, [sp, #16]
 80048e0:	4303      	orrs	r3, r0
 80048e2:	9304      	str	r3, [sp, #16]
 80048e4:	3701      	adds	r7, #1
 80048e6:	7839      	ldrb	r1, [r7, #0]
 80048e8:	4825      	ldr	r0, [pc, #148]	; (8004980 <_svfiprintf_r+0x1dc>)
 80048ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048ee:	2206      	movs	r2, #6
 80048f0:	1c7e      	adds	r6, r7, #1
 80048f2:	f7fb fc75 	bl	80001e0 <memchr>
 80048f6:	2800      	cmp	r0, #0
 80048f8:	d035      	beq.n	8004966 <_svfiprintf_r+0x1c2>
 80048fa:	4b22      	ldr	r3, [pc, #136]	; (8004984 <_svfiprintf_r+0x1e0>)
 80048fc:	b9fb      	cbnz	r3, 800493e <_svfiprintf_r+0x19a>
 80048fe:	9b03      	ldr	r3, [sp, #12]
 8004900:	3307      	adds	r3, #7
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	3308      	adds	r3, #8
 8004908:	9303      	str	r3, [sp, #12]
 800490a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490c:	444b      	add	r3, r9
 800490e:	9309      	str	r3, [sp, #36]	; 0x24
 8004910:	e76c      	b.n	80047ec <_svfiprintf_r+0x48>
 8004912:	fb00 3202 	mla	r2, r0, r2, r3
 8004916:	2101      	movs	r1, #1
 8004918:	e7a3      	b.n	8004862 <_svfiprintf_r+0xbe>
 800491a:	2300      	movs	r3, #0
 800491c:	9305      	str	r3, [sp, #20]
 800491e:	4618      	mov	r0, r3
 8004920:	240a      	movs	r4, #10
 8004922:	460f      	mov	r7, r1
 8004924:	3101      	adds	r1, #1
 8004926:	783a      	ldrb	r2, [r7, #0]
 8004928:	3a30      	subs	r2, #48	; 0x30
 800492a:	2a09      	cmp	r2, #9
 800492c:	d903      	bls.n	8004936 <_svfiprintf_r+0x192>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0ca      	beq.n	80048c8 <_svfiprintf_r+0x124>
 8004932:	9005      	str	r0, [sp, #20]
 8004934:	e7c8      	b.n	80048c8 <_svfiprintf_r+0x124>
 8004936:	fb04 2000 	mla	r0, r4, r0, r2
 800493a:	2301      	movs	r3, #1
 800493c:	e7f1      	b.n	8004922 <_svfiprintf_r+0x17e>
 800493e:	ab03      	add	r3, sp, #12
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	462a      	mov	r2, r5
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <_svfiprintf_r+0x1e4>)
 8004946:	a904      	add	r1, sp, #16
 8004948:	4640      	mov	r0, r8
 800494a:	f7fe f8cd 	bl	8002ae8 <_printf_float>
 800494e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004952:	4681      	mov	r9, r0
 8004954:	d1d9      	bne.n	800490a <_svfiprintf_r+0x166>
 8004956:	89ab      	ldrh	r3, [r5, #12]
 8004958:	065b      	lsls	r3, r3, #25
 800495a:	f53f af38 	bmi.w	80047ce <_svfiprintf_r+0x2a>
 800495e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004960:	b01d      	add	sp, #116	; 0x74
 8004962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004966:	ab03      	add	r3, sp, #12
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	462a      	mov	r2, r5
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <_svfiprintf_r+0x1e4>)
 800496e:	a904      	add	r1, sp, #16
 8004970:	4640      	mov	r0, r8
 8004972:	f7fe fb6f 	bl	8003054 <_printf_i>
 8004976:	e7ea      	b.n	800494e <_svfiprintf_r+0x1aa>
 8004978:	08004c14 	.word	0x08004c14
 800497c:	08004c1a 	.word	0x08004c1a
 8004980:	08004c1e 	.word	0x08004c1e
 8004984:	08002ae9 	.word	0x08002ae9
 8004988:	080046ed 	.word	0x080046ed

0800498c <_sbrk_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4c06      	ldr	r4, [pc, #24]	; (80049a8 <_sbrk_r+0x1c>)
 8004990:	2300      	movs	r3, #0
 8004992:	4605      	mov	r5, r0
 8004994:	4608      	mov	r0, r1
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	f7fc fcc6 	bl	8001328 <_sbrk>
 800499c:	1c43      	adds	r3, r0, #1
 800499e:	d102      	bne.n	80049a6 <_sbrk_r+0x1a>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	b103      	cbz	r3, 80049a6 <_sbrk_r+0x1a>
 80049a4:	602b      	str	r3, [r5, #0]
 80049a6:	bd38      	pop	{r3, r4, r5, pc}
 80049a8:	20000278 	.word	0x20000278

080049ac <__ascii_mbtowc>:
 80049ac:	b082      	sub	sp, #8
 80049ae:	b901      	cbnz	r1, 80049b2 <__ascii_mbtowc+0x6>
 80049b0:	a901      	add	r1, sp, #4
 80049b2:	b142      	cbz	r2, 80049c6 <__ascii_mbtowc+0x1a>
 80049b4:	b14b      	cbz	r3, 80049ca <__ascii_mbtowc+0x1e>
 80049b6:	7813      	ldrb	r3, [r2, #0]
 80049b8:	600b      	str	r3, [r1, #0]
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	1c10      	adds	r0, r2, #0
 80049be:	bf18      	it	ne
 80049c0:	2001      	movne	r0, #1
 80049c2:	b002      	add	sp, #8
 80049c4:	4770      	bx	lr
 80049c6:	4610      	mov	r0, r2
 80049c8:	e7fb      	b.n	80049c2 <__ascii_mbtowc+0x16>
 80049ca:	f06f 0001 	mvn.w	r0, #1
 80049ce:	e7f8      	b.n	80049c2 <__ascii_mbtowc+0x16>

080049d0 <memmove>:
 80049d0:	4288      	cmp	r0, r1
 80049d2:	b510      	push	{r4, lr}
 80049d4:	eb01 0302 	add.w	r3, r1, r2
 80049d8:	d803      	bhi.n	80049e2 <memmove+0x12>
 80049da:	1e42      	subs	r2, r0, #1
 80049dc:	4299      	cmp	r1, r3
 80049de:	d10c      	bne.n	80049fa <memmove+0x2a>
 80049e0:	bd10      	pop	{r4, pc}
 80049e2:	4298      	cmp	r0, r3
 80049e4:	d2f9      	bcs.n	80049da <memmove+0xa>
 80049e6:	1881      	adds	r1, r0, r2
 80049e8:	1ad2      	subs	r2, r2, r3
 80049ea:	42d3      	cmn	r3, r2
 80049ec:	d100      	bne.n	80049f0 <memmove+0x20>
 80049ee:	bd10      	pop	{r4, pc}
 80049f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80049f8:	e7f7      	b.n	80049ea <memmove+0x1a>
 80049fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a02:	e7eb      	b.n	80049dc <memmove+0xc>

08004a04 <__malloc_lock>:
 8004a04:	4770      	bx	lr

08004a06 <__malloc_unlock>:
 8004a06:	4770      	bx	lr

08004a08 <_realloc_r>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	4607      	mov	r7, r0
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	460e      	mov	r6, r1
 8004a10:	b921      	cbnz	r1, 8004a1c <_realloc_r+0x14>
 8004a12:	4611      	mov	r1, r2
 8004a14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a18:	f7ff be0a 	b.w	8004630 <_malloc_r>
 8004a1c:	b922      	cbnz	r2, 8004a28 <_realloc_r+0x20>
 8004a1e:	f7ff fdb9 	bl	8004594 <_free_r>
 8004a22:	4625      	mov	r5, r4
 8004a24:	4628      	mov	r0, r5
 8004a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a28:	f000 f821 	bl	8004a6e <_malloc_usable_size_r>
 8004a2c:	4284      	cmp	r4, r0
 8004a2e:	d90f      	bls.n	8004a50 <_realloc_r+0x48>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4638      	mov	r0, r7
 8004a34:	f7ff fdfc 	bl	8004630 <_malloc_r>
 8004a38:	4605      	mov	r5, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0f2      	beq.n	8004a24 <_realloc_r+0x1c>
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4622      	mov	r2, r4
 8004a42:	f7ff fabd 	bl	8003fc0 <memcpy>
 8004a46:	4631      	mov	r1, r6
 8004a48:	4638      	mov	r0, r7
 8004a4a:	f7ff fda3 	bl	8004594 <_free_r>
 8004a4e:	e7e9      	b.n	8004a24 <_realloc_r+0x1c>
 8004a50:	4635      	mov	r5, r6
 8004a52:	e7e7      	b.n	8004a24 <_realloc_r+0x1c>

08004a54 <__ascii_wctomb>:
 8004a54:	b149      	cbz	r1, 8004a6a <__ascii_wctomb+0x16>
 8004a56:	2aff      	cmp	r2, #255	; 0xff
 8004a58:	bf85      	ittet	hi
 8004a5a:	238a      	movhi	r3, #138	; 0x8a
 8004a5c:	6003      	strhi	r3, [r0, #0]
 8004a5e:	700a      	strbls	r2, [r1, #0]
 8004a60:	f04f 30ff 	movhi.w	r0, #4294967295
 8004a64:	bf98      	it	ls
 8004a66:	2001      	movls	r0, #1
 8004a68:	4770      	bx	lr
 8004a6a:	4608      	mov	r0, r1
 8004a6c:	4770      	bx	lr

08004a6e <_malloc_usable_size_r>:
 8004a6e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8004a72:	2800      	cmp	r0, #0
 8004a74:	f1a0 0004 	sub.w	r0, r0, #4
 8004a78:	bfbc      	itt	lt
 8004a7a:	580b      	ldrlt	r3, [r1, r0]
 8004a7c:	18c0      	addlt	r0, r0, r3
 8004a7e:	4770      	bx	lr

08004a80 <_init>:
 8004a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a82:	bf00      	nop
 8004a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a86:	bc08      	pop	{r3}
 8004a88:	469e      	mov	lr, r3
 8004a8a:	4770      	bx	lr

08004a8c <_fini>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr
